    .org ObjectGroup_InitJumpTable
;****************************** OBJECT INITIALIZATION ******************************
ObjectGroup00_InitJumpTable:
	.word $FFF0	; Object $00
	.word ObjInit_DoNothing	; Object $01
	.word ObjInit_SnowBall	; Object $02
	.word ObjInit_EaterBlock	; Object $03 
	.word ObjInit_CoinLock	; Object $04
	.word ObjInit_SpikeBall	; Object $05
	.word ObjInit_BounceDU	; Object $06 - OBJ_BOUNCEDOWNUP
	.word ObjInit_Brick	; Object $07 - OBJ_BRICK
	.word ObjInit_DoNothing	; Object $08 - OBJ_COIN
	.word ObjInit_Bubble	; Object $09 - OBJ_BUBBLE
	.word ObjInit_ModifyPointers	; Object $0A - OBJ_BULLY
	.word ObjInit_PowerUp	; Object $0B - OBJ_POWERUP
	.word ObjInit_PUp1; Object $0C - OBJ_POWERUP_INIT1
	.word ObjInit_PUp2	; Object $0D - OBJ_POWERUP_MUSHROOM
	.word ObjInit_HardIce	; Object $0E - OBJ_HARDICE
	.word ObjInit_Weather	; Object $0F - OBJ_RAIN
	.word ObjInit_IceFireFly; Object $10 - OBJ_PIXIE
	.word ObjInit_Key	; Object $11 OBJ_KEY
	.word ObjInit_Spring	; Object $12 OBJ_SPRING
	.word ObjInit_KeyPieceCollection	; Object $13 OBJ_KEYPIECES

	.org ObjectGroup_NormalJumpTable	; <-- help enforce this table *here*
;****************************** OBJECT GAME LOOP ******************************
	.word $FFF1	; Object $00
	.word ObjNorm_DoNothing	; Object $01
	.word ObjNorm_SnowBall	; Object $02
	.word ObjNorm_EaterBlock	; Object $03
	.word ObjNorm_CoinLock	; Object $04
	.word ObjNorm_SpikeBall	; Object $05
	.word ObjNorm_BounceDU	; Object $06 - OBJ_BOUNCEDOWNUP
	.word ObjNorm_Brick	; Object $07 - OBJ_BRICK
	.word ObjNorm_DoNothing	; Object $08 - OBJ_COIN
	.word ObjNorm_Bubble	; Object $09 - OBJ_BUBBLE
	.word ObjNorm_DoNothing	; Object $0A OBJ_BULLY
	.word ObjNorm_PowerUp; Object $0B - OBJ_POWERUP
	.word ObjNorm_DoNothing ; Object $0C - OBJ_ESWITCH
	.word ObjNorm_DoNothing	; Object $0D - OBJ_POWERUP_MUSHROOM
	.word ObjNorm_HardIce	; Object $0E - OBJ_HARDICE
	.word ObjNorm_Weather	; Object $0F
	.word ObjNorm_IceFireFly	; Object $10 - OBJ_PIXIE
	.word ObjNorm_Key	; Object $11
	.word ObjNorm_Spring	; Object $12
	.word ObjNorm_KeyPieceCollection	; Object $13 

	.org ObjectGroup_CollideJumpTable	; <-- help enforce this table *here*
;****************************** OBJECT PLAYER INTERACTION ******************************
	.word $FFF2	; Object $00
	.word ObjHit_DoNothing	; Object $01
	.word SnowBall_Hit	; Object $02
	.word ObjHit_SolidBlock	; Object $03
	.word ObjHit_DoNothing	; Object $04
	.word Player_GetHurt	; Object $05
	.word ObjHit_DoNothing	; Object $06 - OBJ_BOUNCEDOWNUP
	.word Player_GetHurt	; Object $07 - OBJ_BRICK
	.word ObjHit_DoNothing	; Object $08 - OBJ_COIN
	.word Bubble_Hit	; Object $09 - OBJ_BUBBLE
	.word ObjHit_DoNothing	; Object $0A
	.word PUp_Collect	; Object $0B - OBJ_POWERUP
	.word ObjHit_DoNothing	; Object $0C - OBJ_ESWITCH
	.word ObjInit_DoNothing	; Object $0D - OBJ_POWERUP_MUSHROOM
	.word ObjHit_HardIce	; Object $0E - OBJ_HARDICE
	.word ObjHit_DoNothing	; Object $0F
	.word Player_GetHurt	; Object $10 OBJ_PIXIE
	.word Object_Hold	; Object $11
	.word Object_Hold	; Object $12
	.word ObjHit_DoNothing	; Object $13

	.org ObjectGroup_Attributes	; <-- help enforce this table *here*
;****************************** OBJECT PALETTE/SIZE ******************************
	.byte $F3	; Object $00
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $01
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $02
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $03
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $04
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $05
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $06 - OBJ_BOUNCEDOWNUP
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $07 - OBJ_BRICK
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH8	; Object $08 - OBJ_COIN
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $09 - OBJ_BUBBLE
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $0A- OBJ_BULLY
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $0B - OBJ_POWERUP
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $0C - OBJ_ESWITCH
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $0D - OBJ_POWERUP_MUSHROOM
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $0E - OBJ_HARDICE
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $0F - 
	.byte OA1_PAL0 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $10 OBJ_PIXIE
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $11 OBJ_KEY
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $12 OBJ_REDPRING
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $13 OBJ_GREENSPRING

	.org ObjectGroup_PatTableSel	; <-- help enforce this table *here*
;****************************** OBJECT PATTERN TABLE ******************************
	.byte $F4	; Object $00
	.byte OPTS_NOCHANGE; Object $01
	.byte OPTS_NOCHANGE	; Object $02
	.byte OPTS_NOCHANGE	; Object $03
	.byte OPTS_NOCHANGE	; Object $04
	.byte OPTS_SETPT5 | $0E	; Object $05
	.byte OPTS_NOCHANGE	; Object $06 - OBJ_BOUNCEDOWNUP
	.byte OPTS_NOCHANGE	; Object $07 - OBJ_BRICK
	.byte OPTS_NOCHANGE	; Object $08 - OBJ_COIN
	.byte OPTS_NOCHANGE	; Object $09 - OBJ_BUBBLE
	.byte OPTS_NOCHANGE	; Object $0A - OBJ_BULLY
	.byte OPTS_NOCHANGE	; Object $0B - OBJ_POWERUP
	.byte OPTS_NOCHANGE	; Object $0C - OBJ_ESWITCH
	.byte OPTS_NOCHANGE	; Object $0D - OBJ_POWERUP_MUSHROOM
	.byte OPTS_SETPT5 | $0F	; Object $0E - OBJ_HARDICE
	.byte OPTS_NOCHANGE	; Object $0F
	.byte OPTS_SETPT5 | $33	; Object $10 OBJ_PIXIE
	.byte OPTS_NOCHANGE	; Object $11
	.byte OPTS_SETPT6 | $4F		; Object $12
	.byte OPTS_NOCHANGE	; Object $13
	
	.org ObjectGroup_KillAction	; <-- help enforce this table *here*
;****************************** OBJECT DEATH ROUTINE ******************************
	.byte $F5	; Object $00
	.byte KILLACT_STANDARD	; Object $01
	.byte KILLACT_NORMALANDKILLED	; Object $02
	.byte KILLACT_STANDARD	; Object $03
	.byte KILLACT_POOFDEATH	; Object $04
	.byte KILLACT_NORMALANDKILLED	; Object $05
	.byte KILLACT_STANDARD	; Object $06 - OBJ_BOUNCEDOWNUP
	.byte KILLACT_NORMALANDKILLED	; Object $07 - OBJ_BRICK
	.byte KILLACT_STANDARD	; Object $08 - OBJ_COIN
	.byte KILLACT_STANDARD	; Object $09 - OBJ_BUBBLE
	.byte KILLACT_STANDARD	; Object $0A
	.byte KILLACT_JUSTDRAWMIRROR	; Object $0B - OBJ_POWERUP
	.byte KILLACT_STANDARD	; Object $0C - OBJ_ESWITCH
	.byte KILLACT_JUSTDRAWMIRROR	; Object $0D - OBJ_POWERUP_MUSHROOM
	.byte KILLACT_NORMALANDKILLED	; Object $0E - OBJ_HARDICE
	.byte KILLACT_STANDARD	; Object $0F
	.byte KILLACT_NORMALANDKILLED	; Object $10
	.byte KILLACT_STANDARD	; Object $11
	.byte KILLACT_STANDARD	; Object $12
	.byte KILLACT_STANDARD	; Object $13

OG1_POff .func (\1 - ObjectGroup01_PatternSets)

	.org ObjectGroup_PatternStarts	; <-- help enforce this table *here*

	; Index by object group relative index (ObjGroupRel_Idx)
	.byte $F6, OG1_POff(ObjP01), OG1_POff(ObjP02), OG1_POff(ObjP03)
	.byte OG1_POff(ObjP04), OG1_POff(ObjP05), OG1_POff(ObjP06), OG1_POff(ObjP07)
	.byte OG1_POff(ObjP08), OG1_POff(ObjP09), OG1_POff(ObjP0A), OG1_POff(ObjP0B)
	.byte OG1_POff(ObjP0C), OG1_POff(ObjP0D), OG1_POff(ObjP0E), OG1_POff(ObjP0F)
	.byte OG1_POff(ObjP10), OG1_POff(ObjP11), OG1_POff(ObjP12), OG1_POff(ObjP13)

	.org ObjectGroup_PatternSets	; <-- help enforce this table *here*

ObjectGroup01_PatternSets:
	; (End restricted alignment space)
ObjP00:
	.byte $F7
	
ObjP01:
	.byte $F3, $F5, $F3, $F5, $BB, $BD, $BB, $BF

ObjP02:
	.byte $95, $97
	.byte $8D, $8F

ObjP03:
	.byte $77, $77

ObjP04:
	.byte $F5, $F7, $B5, $B7

ObjP05:
	.byte $95, $95, $97, $97

ObjP06:
	.byte $6B, $6B, $67, $67, $77, $77

ObjP07:
	.byte $67, $67, $97, $99

ObjP08:
	.byte $BB, $BB, $FB, $F9, $FB, $F9, $FF, $FD, $DA, $DA	

ObjP09:	
	.byte $A7, $A7, $A9, $A9, $AB, $AB, $8D, $8D, $8F, $8F, $91, $91

ObjP0A:
	.byte $A9, $AB, $BD, $BF

ObjP0B:
	.byte $51, $53	
	.byte $73, $73

ObjP0C:
	.byte $81, $83

ObjP0D:
	.byte $51, $53

ObjP0E:
	.byte $99, $9B

ObjP0F:
ObjP10:
	.byte $91, $93, $95, $97, $99, $9B, $95, $97

ObjP11:
	.byte $69, $7D

ObjP12:
	.byte $D7, $D7, $ED, $ED, $FF, $FF, $ED, $ED

ObjP13:
	.byte $81, $83, $85, $87, $89, $89, $87, $85, $C1, $C3, $C5, $C7, $C9, $C9, $C7, $C5



;***********************************************************************************
; SNOW BALL
;***********************************************************************************
; IMMUNITIES:
;		ICE
;***********************************************************************************
; Rolls along the ground until it hits a wall, then bursts away with ice particle effects.
; Hitting Mario will freeze the player.
;***********************************************************************************
SnowBall_Frame = Objects_Data1

ObjInit_SnowBall:
	LDA #(ATTR_ICEPROOF | ATTR_STOMPPROOF)
	STA Objects_WeaponAttr, X

	LDA #BOUND16x16
	STA Objects_BoundBox, X
	
	JMP Object_MoveTowardsPlayer

ObjNorm_SnowBall:
	LDA <Player_HaltGameZ
	BEQ SnowBall_Norm

	JMP SnowBall_Draw

SnowBall_Norm:
	LDA Objects_State, X
	CMP #OBJSTATE_KILLED
	BNE SnowBall_Move

	JSR SnowBall_Burst
	JMP Object_Delete

SnowBall_Move:
	JSR Object_DeleteOffScreen
	
	LDA Objects_State, X
	CMP #OBJSTATE_KILLED
	BEQ SnowBall_Burst

	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_FaceDirectionMoving
	JSR Object_InteractWithPlayer
	JSR Shell_KillOthers
	JSR Object_DetectTiles
	JSR Object_InteractWithTiles

	LDA <Objects_TilesDetectZ, X
	AND #(HIT_LEFTWALL | HIT_RIGHTWALL)
	BNE SnowBall_Burst

SnowBall_Animate:
	INC SnowBall_Frame, X
	LDA SnowBall_Frame, X
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame, X

SnowBall_Draw:
	JMP Object_Draw

SnowBall_Hit:
	
	JSR Player_Freeze

	LDA <Objects_XVelZ, X
	STA <Player_XVel

	LDA #$D0
	STA <Player_YVel
	STA <Player_InAir

SnowBall_Burst:
	LDA Objects_SpritesHorizontallyOffScreen,X
	ORA Objects_SpritesVerticallyOffScreen,X
	BNE SnowBall_NoBurst

	LDA <Objects_XZ, X
	STA Debris_X

	LDA <Objects_YZ, X
	STA Debris_Y
	
	JSR Common_MakeDebris

	LDA #$BF
	STA BrickBust_Tile, Y

SnowBall_NoBurst:
	LDA #SPR_PAL2
	STA BrickBust_Pal, Y
	JMP Object_Delete

SpringPals: .byte SPR_PAL1, SPR_PAL2, SPR_PAL3



;***********************************************************************************
; BLOCK EATER/MAKER
;***********************************************************************************
; IMMUNITIES:
;		ALL
;***********************************************************************************
; PROPERTIES:
;		0 - Moves at a slow speed, disappears when its path ends
;		1 - Moves at a slow speed, will reverse when its path ends
;		2 - Moves at a fast speed, disappears when its path ends
;		3 - Moves at a fast speed, will reverse when its path ends
;***********************************************************************************
; Depend on the property set, the block will look for either a hollow or sollid enemy interaction block
; and move in the direction of what it founds. Once it moves over it, it toggles that block using EOR #$01
; then continues to look for more blocks like it. If it cannot find any more blocks of that time, it changes what
; it's looking for (it was solid enemy interaction, it now looks for hollow, and vice versa) and moves in the opposite
; direction. These will only try deleting themselves once they hit their originaly starting point.
;
; These objects can be set to disappear once they can no longer find the block they are looking for.
;***********************************************************************************

BlockEater_StartX = Objects_Data1
BlockEater_StartXHi = Objects_Data2
BlockEater_StartY = Objects_Data3
BlockEater_StartYHi = Objects_Data4
BlockEater_DirectionIndex = Objects_Data5
BlockEater_TileDetectValue = Objects_Data6
BlockEater_BlockIndexCheck = Objects_Data7
BlockEater_Init = Objects_Data8

BlockEater_XVelocity: .byte $00, $08, $00, $F8
BlockEater_YVelocity: .byte $F8, $00, $08, $00

BlockCheck_XOffsets:
	.byte $08, $18, $08, $F8
	.byte $00, $00, $00, $FF
	

BlockCheck_YOffsets:
	.byte $F8, $08, $18, $08
	.byte $FF, $00, $00, $00
	
ObjInit_EaterBlock:
	JSR Object_NoInteractions

	LDA #BOUND16x16BLOCK
	STA Objects_BoundBox, X

	JSR Object_CalcBoundBox
	JSR Object_DetectTileCenter
	
	LDA Tile_LastValue
	STA BlockEater_TileDetectValue, X

	LDA <Objects_YZ, X
	STA BlockEater_StartY, X

	LDA <Objects_YHiZ, X
	STA BlockEater_StartYHi, X

	LDA <Objects_XZ, X
	STA BlockEater_StartX, X

	LDA <Objects_XHiZ, X
	STA BlockEater_StartXHi, X

	LDA #$FF
	STA BlockEater_BlockIndexCheck, X

	JMP EaterMaker_CheckBlockToggle

ObjNorm_EaterBlock:
	LDA <Player_HaltGameZ
	BEQ EaterMaker_Normal

	JSR EaterMaker_Draw

EaterMaker_RTS1:
	RTS

EaterMaker_Normal:
	LDA <Objects_XZ, X
	CMP BlockEater_StartX, X
	BNE EaterMaker1

	LDA <Objects_XHiZ, X
	CMP BlockEater_StartXHi, X
	BNE EaterMaker1

	LDA <Objects_YZ, X
	CMP BlockEater_StartY, X
	BNE EaterMaker1

	LDA <Objects_YHiZ, X
	CMP BlockEater_StartYHi, X
	BNE EaterMaker1

	JSR Object_DeleteOffScreen

EaterMaker1:
	JSR Object_CalcBoundBox

	LDA Objects_BoundLeft, X
	SUB #$01
	STA Objects_BoundLeft, X

	LDA Objects_BoundLeftHi, X
	SBC #$00
	STA Objects_BoundLeftHi, X

	LDA Objects_BoundTop, X
	SUB #$02
	STA Objects_BoundTop, X

	LDA Objects_BoundTopHi, X
	SBC #$00
	STA Objects_BoundTopHi, X

	JSR Object_ApplyXVel
	JSR Object_ApplyYVel_NoGravity
	JSR Object_InteractWithPlayer
	JSR EaterMaker_Draw

	LDA <Objects_XVelZ, X
	ORA <Objects_YVelZ, X
	BNE EaterMaker_CheckBlockToggle

	JSR EaterMaker_SetVel

EaterMaker_CheckBlockToggle:

	LDA <Objects_XZ, X
	AND #$0F
	BNE EaterMaker_RTS1

	LDA <Objects_YZ, X
	AND #$0F
	BNE EaterMaker_RTS1

	LDA Block_NeedsUpdate
	BNE EaterMaker_RTS1

	LDA <Objects_XZ, X
	ADD #$08
	STA Block_DetectX

	LDA <Objects_XHiZ, X
	ADC #$00
	STA Block_DetectXHi

	LDA <Objects_YZ, X
	ADD #$08
	STA Block_DetectY

	LDA <Objects_YHiZ, X
	ADC #$00
	STA Block_DetectYHi

	LDA BlockEater_TileDetectValue, X
	EOR #$01
	JSR Object_ChangeBlock
	
	LDA #$03
	STA BlockEater_BlockIndexCheck, X

EaterMaker_CheckBlocks:
	LDA BlockEater_BlockIndexCheck, X
	TAY

	LDA BlockCheck_XOffsets, Y
	ADD <Objects_XZ, X
	STA Block_DetectX

	LDA BlockCheck_XOffsets + 4, Y
	ADC <Objects_XHiZ, X
	STA Block_DetectXHi

	LDA BlockCheck_YOffsets, Y
	ADD <Objects_YZ, X
	STA Block_DetectY

	LDA BlockCheck_YOffsets + 4, Y
	ADC <Objects_YHiZ, X
	STA Block_DetectYHi
	
	TYA
	PHA

	JSR Object_DetectTile
	
	PLA
	TAY

	LDA Tile_LastValue
	CMP BlockEater_TileDetectValue, X
	BEQ EaterMaker_SetVel

	DEC BlockEater_BlockIndexCheck, X
	BPL EaterMaker_CheckBlocks

	LDA Objects_Property, X
	AND #$01
	BNE EaterMark_Reverse

	JMP Object_PoofDie

EaterMark_Reverse:
	LDA BlockEater_TileDetectValue, X
	EOR #$01
	STA BlockEater_TileDetectValue, X

	LDA #$00
	STA <Objects_XVelZ, X
	STA <Objects_YVelZ, X

	JMP EaterMaker_RTS1

EaterMaker_SetVel:
	TYA
	STA BlockEater_BlockIndexCheck, X

	LDY BlockEater_BlockIndexCheck, X
	BMI EaterMaker_NormalSpeed

	LDA BlockEater_XVelocity, Y
	STA <Objects_XVelZ, X

	LDA BlockEater_YVelocity, Y
	STA <Objects_YVelZ, X

	LDA Objects_Property, X
	AND #$02
	BEQ EaterMaker_NormalSpeed

	LDA <Objects_XVelZ, X
	AND #$80
	STA TempA

	LDA <Objects_XVelZ, X
	ASL A
	ORA TempA
	STA <Objects_XVelZ, X

	LDA <Objects_YVelZ, X
	AND #$80
	STA TempA

	LDA <Objects_YVelZ, X
	ASL A
	ORA TempA
	STA <Objects_YVelZ, X

EaterMaker_NormalSpeed:
	RTS

EaterMaker_Draw:
	JSR Object_DrawMirrored

	TYA
	TAX

	DEC Sprite_RAMY, X
	DEC Sprite_RAMY + 4, X
	LDX <CurrentObjectIndexZ
	RTS




ObjInit_SpikeBall:
	LDA #(ATTR_FIREPROOF | ATTR_ICEPROOF | ATTR_DASHPROOF | ATTR_NINJAPROOF | ATTR_TAILPROOF | ATTR_STOMPPROOF)
	STA Objects_WeaponAttr, X

	LDA #(ATTR_SHELLPROOF | ATTR_WINDAFFECTS | ATTR_BUMPNOKILL)
	STA Objects_BehaviorAttr, X

	LDA #BOUND16x16
	STA Objects_BoundBox, X
	RTS

SpikeBall_Frame  = Objects_Data1

ObjNorm_SpikeBall:

	LDA Objects_State, X
	CMP #OBJSTATE_KILLED
	BNE SpikeBallNotKilled

	JMP SpikeBall_Burst

SpikeBallNotKilled:
	LDA <Player_HaltGameZ
	BNE SpikeBall_Draw
	
	JSR Object_DeleteOffScreen
	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat
	JSR Shell_KillOthers
	JSR Object_DetectTiles
	JSR Object_CheckForeground

	LDA <Objects_YVelZ, X
	
	BMI Spike_BumpBottom

	JSR Object_TestBottomBumpBlocks
	JMP Spike_BumpSides

Spike_BumpBottom:
	JSR Object_TestTopBumpBlocks

Spike_BumpSides:
	JSR Object_TestSideBumpBlocks

	LDA <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ SpikeNoBounce

	LDA Object_VertTileProp, X
	CMP #TILE_ITEM_BRICK
	BEQ SpikeNoBounce

	LDA #$E0
	STA <Objects_YVelZ, X

	LDA Sound_QLevel1
	ORA #SND_LEVELBABOOM
	STA Sound_QLevel1

SpikeNoBounce:
	LDA <Objects_TilesDetectZ, X
	AND #(HIT_LEFTWALL | HIT_RIGHTWALL)
	BEQ SpikeBall_Animate

	LDA Object_HorzTileProp, X
	CMP #TILE_ITEM_BRICK
	BEQ SpikeBall_KeepGoing

	JMP SpikeBall_Burst

SpikeBall_KeepGoing:
	LDA <Objects_XVelZ, X
	EOR #$FF
	ADD #$01
	STA <Objects_XVelZ, X
	JMP SpikeBall_Animate

SpikeBall_Animate:
	INC SpikeBall_Frame, X
	LDA SpikeBall_Frame, X
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame, X

SpikeBall_Draw:
	JMP Object_DrawMirrored

SpikeBall_Burst:
	LDA #$99
	STA Object_BurstTile

	LDA #SPR_PAL1
	STA Object_BurstPalette
	JMP Object_Burst



ObjInit_Brick:
	LDA #(ATTR_FIREPROOF | ATTR_ICEPROOF | ATTR_NINJAPROOF | ATTR_STOMPPROOF)
	STA Objects_WeaponAttr, X

	LDA #BOUND16x16
	STA Objects_BoundBox, X
	RTS

Brick_PowerUp = Objects_Data1
Brick_PowerUpMap:
	.byte $00, POWERUP_COIN, POWERUP_FIREFLOWER, POWERUP_SUPERLEAF, POWERUP_ICEFLOWER, POWERUP_FROGSUIT, POWERUP_FOXLEAF, POWERUP_SHELL, POWERUP_MUSHROOM, POWERUP_HAMMERSUIT, POWERUP_NINJASHROOM, POWERUP_STAR, POWERUP_VINE, $00, $00, $00, $FF

ObjNorm_Brick:
	LDA <Player_HaltGameZ
	BEQ Brick_Norm

	JMP Brick_Draw

Brick_Norm:
	LDA Objects_State, X
	CMP #OBJSTATE_KILLED
	BEQ Brick_MakeItem

	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_DetectTiles
	JSR Object_AttackOrDefeat
	JSR Shell_KillOthers
	BCS Brick_MakeItem

	LDA <Objects_TilesDetectZ, X
	BNE Brick_MakeItem

Brick_Draw:
	JMP Object_DrawMirrored

Brick_MakeItem:
	LDA Objects_SpritesHorizontallyOffScreen,X
	ORA Objects_SpritesVerticallyOffScreen,X
	BNE Brick_NoBurst

	LDA <Objects_XZ, X
	STA Debris_X

	LDA <Objects_YZ, X
	STA Debris_Y

	JSR Common_MakeBricks

Brick_NoBurst:
	LDY Brick_PowerUp, X
	LDA Brick_PowerUpMap, Y
	BEQ Brick_Burst
	BPL Brick_MakePower

	JMP Produce_Key

Brick_MakePower:

	CMP #POWERUP_COIN
	BEQ Brick_Coin

	STA PowerUp_Type, X

	LDA #OBJ_POWERUP
	STA Objects_ID, X

	LDA #OBJSTATE_NORMAL
	STA Objects_State, X
	
	LDA #$00
	STA Objects_Orientation, X

	JMP ObjInit_PowerUp

Brick_Burst:
	JMP Object_Delete

Brick_Coin:
	LDA <Objects_XZ, X
	ADD #$08
	STA <Coin_X

	LDA <Objects_YZ, X
	ADD #$08
	STA <Coin_Y
	JSR Produce_Coin
	JMP Object_Delete





;***********************************************************************************
; HARD ICE
;***********************************************************************************
; IMMUNITIES:
;		ALL
;***********************************************************************************
; 	This block will bounce when hitting the ground for a short bit. Once settled, it should
; 	write a solid block to the tile it's occupying and it should delete itself. If Mario hits
;  	the block from underneath, it should shatter.
;***********************************************************************************


ObjInit_HardIce:

	LDA #$20
	STA Objects_Timer, X

	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #(ATTR_ICEPROOF | ATTR_STOMPPROOF)
	STA Objects_WeaponAttr, X

	RTS

HardIce_HitCount = Objects_Data1
HardIce_CanHitTimer = Objects_Data2

ObjNorm_HardIce:
	LDA <Player_HaltGameZ
	BEQ HardIce_NoXVel
	
	JMP Object_Draw

HardIce_NoXVel:
	LDA #$00
	STA Objects_XVelZ, X
	STA Objects_Orientation, X
	
	LDA Objects_XZ, X
	ADD #$08
	AND #$F0
	STA Objects_XZ, X

	JSR Object_DeleteOffScreen
	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_InteractWithPlayer
	JSR Object_DetectTiles

	LDA <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ HardIce_Draw

	LDA Object_BodyTileProp, X
	CMP #(TILE_PROP_ENEMY)
	BNE HardIce_Burst

	JSR Object_HitGround

	LDA HardIce_HitCount, X
	BNE HardIce_ChangeBlock 

	INC HardIce_HitCount, X
	
	LDA #$F0
	STA <Objects_YVelZ, X
	BNE HardIce_Draw


HardIce_ChangeBlock:

	LDA Object_BodyTileValue, X
	EOR #$01

	JSR Object_ChangeBlock
	JSR Object_Delete

HardIce_Draw:
	JMP Object_Draw 
	
HardIce_Burst:
	JMP Object_BurstIce

ObjHit_HardIce:
	LDA HitTest_Result
	CMP #$0A
	BNE HardIce_HitBlock

	JSR Object_XDistanceFromPlayer
	LDA <XDiff
	CMP #$0A
	BCC HardIce_Burst

HardIce_HitBlock:
	JMP ObjHit_SolidBlock

;***********************************************************************************
; WEATHER
;***********************************************************************************
; IMMUNITIES:
;		ALL
;***********************************************************************************
; PROPERTIES
;	0 - Rain
;	1 - Snow
;	2 - Sand
;***********************************************************************************
; 	This produces weather effects for the stage. The Y position of the object determines how
;   strong the wind effect is (0 is no wind). An even X position causes the wind to blow left.
;	An odd X position causes the wind to blow right.
;***********************************************************************************

Weather_Patterns: .byte $7B, $7B, $55, $5F, $5D, $5D 
Rain_XVel: .byte $04, $05, $06, $07, $04, $05, $06, $06
Snow_XVel: .byte $01, $01, $01, $01, $01, $01, $01, $01
Sand_XVel: .byte $06, $07, $0A, $09, $06, $08, $08, $08
Rain_YVel: .byte $03, $04, $03, $04, $03, $04, $03, $04
Snow_YVel: .byte $01, $01, $01, $01, $02, $02, $02, $02
Sand_YVel: .byte $03, $04, $03, $04, $03, $04, $03, $04

Weather_Type = Objects_Data4
Weather_Ticker = Objects_Data5

DeleteWeather:
	LDA Objects_State, Y
	CMP #OBJSTATE_NORMAL
	BNE ObjInit_Weather2

	JMP Object_SetDeadAndNotSpawned

ObjInit_Weather:
	LDA #$06
	STA Objects_SpritesRequested, X

	JSR Object_NoInteractions

	LDA Objects_Property, X
	STA Weather_Type, X
	LDY #$04

ObjInit_Weather1:
	CPY <CurrentObjectIndexZ
	BEQ ObjInit_Weather2

	LDA Objects_ID, Y
	CMP #$0F
	BEQ DeleteWeather

ObjInit_Weather2:
	DEY
	BPL ObjInit_Weather1

	LDY #$05

	LDA Objects_YZ, X
	LSR A
	LSR A
	LSR A
	LSR A
	STA <Temp_Var2

	LDA Objects_XZ, X
	AND #$10
	BNE DontReverseWind

	LDA <Temp_Var2
	EOR #$FF
	ADD #$01
	STA <Temp_Var2
	
DontReverseWind:
	LDA <Temp_Var2
	STA Wind_Speed, X
	
	JSR Half_Value
	JSR Half_Value
	
	STA Wind_ExtraVel, X

	LDA #$01
	STA WeatherActive

KeepRandomizing:
	JSR Randomize_Weather

	LDA RandomN
	STA Weather_YPos, Y
	DEY
	BPL KeepRandomizing

DontReverseWind1:
	RTS

Wind_Speed = Objects_Data1
Wind_ExtraVel = Objects_Data10
Wind_ExtraVelCarry = Objects_Data11

ObjNorm_Weather:
	LDA Weather_Disabled
	BNE DontReverseWind1

	LDA #$00
	STA Wind

	LDA Player_IsClimbing
	BNE No_Wind

	LDA Wind_Speed, X
	STA Wind

No_Wind:
	LDA <Vert_Scroll
	STA <Temp_Var7

	LDA <Horz_Scroll
	STA <Temp_Var8

	LDA Objects_Property, X 
	CMP #$02
	BNE DoNextParticle0

	INC Weather_Ticker, X

	LDA Weather_Ticker, X
	AND #$01
	BNE DoNextParticle0

	LDA <Temp_Var7
	ADD #$80
	STA <Temp_Var7

	LDA <Temp_Var8
	ADD #$80
	STA <Temp_Var8


DoNextParticle0:
	LDA Object_SpriteRAMOffset, X
	STA TempX
	LDY #$05

DoNextParticle:
	LDX <CurrentObjectIndexZ
	JSR MoveSingleParticle

	LDX TempX

	JSR DrawSingleParticle
	LDA TempX
	ADD #$04
	STA TempX
	DEY
	BPL DoNextParticle
	RTS

MoveSingleParticle:	

	LDA Weather_XPos, Y
	ADD Weather_XVel, Y
	ADD Wind_ExtraVel, X
	STA Weather_XPos, Y

	LDA Weather_YPos, Y
	ADD Weather_YVel, Y
	STA Weather_YPos, Y

	CMP #$F8
	BCC MoveSingleParticle1

	JSR Randomize_Weather

MoveSingleParticle1:
	RTS

Randomize_Weather:
	STY TempY
	JSR Randomize

	LDY TempY
	LDX <CurrentObjectIndexZ
	LDA RandomN
	STA Weather_XPos, Y

	LDA #$00
	STA Weather_YPos, Y

	LDA RandomN + 1
	AND #$07
	STA TempA

	LDA Weather_Type, X
	ASL A
	ASL A
	ASL A
	ORA TempA
	TAY

	LDY TempY

	LDA Rain_XVel, Y
	STA Weather_XVel, Y

	LDA RandomN + 2
	AND #$07
	STA TempA

	LDA Weather_Type, X
	ASL A
	ASL A
	ASL A
	ORA TempA

	TAY

	LDA Rain_YVel, Y
	LDY TempY
	STA Weather_YVel, Y

	LDA Objects_XZ, X
	AND #$10
	BNE DoNotReverse

	LDA Weather_XVel, Y
	EOR #$FF
	ADD #$01
	STA Weather_XVel, Y

DoNotReverse: 

	LDA RandomN + 3
	AND #$01
	STA TempA

	LDA Weather_Type, X
	ASL A
	ORA TempA

RainPattern:
	TAY
	LDA Weather_Patterns, Y
	LDY TempY
	STA Weather_Pattern, Y
	RTS

DrawSingleParticle:

	LDA Weather_YPos, Y
	STA Sprite_RAM, X

	LDA Weather_XPos, Y
	SUB <Temp_Var8
	STA Sprite_RAM + 3, X

	LDA Weather_Pattern, Y
	STA Sprite_RAM + 1, X

	LDA #$02
	STA TempA

	LDA Weather_XVel, Y
	BMI DontFlipParticle

	LDA #SPR_HFLIP
	ORA TempA
	STA TempA

DontFlipParticle:
	LDA TempA
	STA Sprite_RAM + 2, X
	RTS

;***********************************************************************************
; Pyro/Frost Fairies
;***********************************************************************************
; IMMUNITIES:
;	Pyro - Fireballs
;	Frost - Iceballs
;***********************************************************************************
; PROPERTIES
;	0 - Pyro (fire)
;	1 - Ice (ice)
;***********************************************************************************
;	These fairires float around towards Mario with either ice or fire balls rotating around
;   them. 
;***********************************************************************************


IceFireFlyProjectiles:
	.byte SOBJ_FIREBALL, SOBJ_ICEBALL

IceFlyRotationX:
	.byte 0, 2, 5, 7, 9, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 24
	.byte 24, 24, 24, 23, 22, 21, 20, 19, 17, 15, 13, 11, 9, 7, 5, 2
	.byte 0, -2, -5, -7, -9, -11, -13, -15, -17, -19, -20, -21, -22, -23, -24, -24
	.byte -24, -24, -24, -23, -22, -21, -20, -19, -17, -15, -13, -11, -9, -7, -5, -2

IceFlyRotationY:
	.byte 24, 24, 24, 23, 22, 21, 20, 19, 17, 15, 13, 11, 9, 7, 5, 2
	.byte 0, -2, -5, -7, -9, -11, -13, -15, -17, -19, -20, -21, -22, -23, -24, -24
	.byte -24, -24, -24, -23, -22, -21, -20, -19, -17, -15, -13, -11, -9, -7, -5, -2
	.byte 0, 2, 5, 7, 9, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 24

IceFlyRotationVel:
   .byte -$20, $20

IceFireFly_Frame = Objects_Data3
IceFireFly_ProjectileSlot = Objects_Data1
IceFireFly_ProjectileTicks = Objects_Data4
IceFireFly_ProjectileID = Objects_Data5

IceFireFly_Palettes:
	.byte SPR_PAL1, SPR_PAL2

IceFireFly_WeaponAttr:
	.byte ATTR_FIREPROOF, ATTR_ICEPROOF

ObjInit_IceFireFly:
	LDA #$04
	STA Objects_SpritesRequested,X
	
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #$FF
	STA IceFireFly_ProjectileSlot, X

	LDA #ATTR_STOMPKICKSOUND
	STA Objects_BehaviorAttr, X
	
	LDY Objects_Property, X
	LDA IceFireFlyProjectiles, Y
	STA IceFireFly_ProjectileID, X

	LDA IceFireFly_WeaponAttr, Y
	STA Objects_WeaponAttr, X
	
	LDA IceFireFly_Palettes, Y
	STA Objects_SpriteAttributes, X

	JSR InitPatrol_Chase

	JSR Object_PrepProjectile
	BCC ObjInit_IceFireFlyRTS

	TYA
	STA IceFireFly_ProjectileSlot, X

	LDA #SOBJ_PLACEHOLDER
	STA SpecialObj_ID, Y
	STA SpecialObj_Data1, Y
	STA SpecialObj_Data3, Y
	
	LDX <CurrentObjectIndexZ

ObjInit_IceFireFlyRTS:
	RTS


ObjNorm_IceFireFly:

	LDA <Player_HaltGameZ
	BEQ IceFireFly_Normal
		
	JMP IceFireFly_Draw

IceFireFly_Normal:
	LDA Objects_State, X
	CMP #OBJSTATE_KILLED
	BNE IceFireFly_DoNormal

	JSR IceFireFly_DestroyProjectiles
	JSR Object_SetDeadAndNotSpawned

	JMP Object_PoofDie

IceFireFly_DoNormal:
	JSR Object_DeleteOffScreen
	
	JSR Object_ChasePlayer
	JSR Object_CalcBoundBox
	JSR Object_FaceDirectionMoving
	JSR Object_AttackOrDefeat
	JSR IceFireFly_Animate
	JSR IceFireFly_MoveProjectiles
	RTS

IceFireFly_Animate:
	INC IceFireFly_Frame, X
	LDA IceFireFly_Frame, X
	AND #$0C
	LSR A
	LSR A
	STA Objects_Frame, X

IceFireFly_Draw:
	JSR Object_Draw
	RTS

IceFireFly_MoveProjectiles:
	INC IceFireFly_ProjectileTicks, X

	LDY IceFireFly_ProjectileSlot, X
	BMI IceFireFly_MoveProjectilesRTS
 
	LDA #$00
	STA SpecialObj_HurtEnemies, Y

	LDA IceFireFly_ProjectileTicks, X
	AND #$3F

	TAY
	
	LDA Object_SpriteRAMOffset,X
	TAX

	JSR IceFireFly_DetermineProjectileVisibility
	BCC IceFireFly_ClearFirstProjectile

	JSR IceFireFly_CalcXYPosition

	LDY IceFireFly_ProjectileSlot, X
	JSR IceFireFly_SetXYPosition

	RTS

IceFireFly_ClearFirstProjectile:
	LDX <CurrentObjectIndexZ

	LDY IceFireFly_ProjectileSlot, X
	JSR IceFireFly_ClearProjectile

IceFireFly_MoveProjectilesRTS:
	RTS

IceFireFly_DetermineProjectileVisibility:

	LDA IceFlyRotationX, Y
	STA <Temp_Var1
	BMI Projectile_NegativeXOffset

	LDA Sprite_RAMX, X
	ADD #$04
	BCS IceFireFly_NotVisible

	ADC IceFlyRotationX, Y
	BCS IceFireFly_NotVisible
	BCC Projectile_DetermineYVisibility

Projectile_NegativeXOffset:
	EOR #$FF
	ADD #$01
	STA <Temp_Var1

	LDA Sprite_RAMX, X
	ADD #$04
	SUB <Temp_Var1
	BCC IceFireFly_NotVisible

Projectile_DetermineYVisibility:
	LDA IceFlyRotationY, Y
	STA <Temp_Var1
	BMI Projectile_NegativeYOffset

	LDA Sprite_RAMY, X
	CMP #$F8
	BEQ IceFireFly_NotVisible

	ADD #$08
	BCS IceFireFly_NotVisible

	ADC IceFlyRotationY, Y
	BCS IceFireFly_NotVisible
	BCC IceFireFly_Visible

Projectile_NegativeYOffset:
	EOR #$FF
	ADD #$01
	STA <Temp_Var1

	LDA Sprite_RAMY, X
	CMP #$F8
	BEQ IceFireFly_NotVisible

	SUB <Temp_Var1
	BCC IceFireFly_NotVisible
	
IceFireFly_Visible
	LDX <CurrentObjectIndexZ
	SEC
	RTS

IceFireFly_NotVisible:
	LDX <CurrentObjectIndexZ
	CLC
	RTS

IceFireFly_ClearProjectile:
	LDA #$FF
	STA SpecialObj_XHi, Y
	STA SpecialObj_YHi, Y

	LDA #SOBJ_PLACEHOLDER
	STA SpecialObj_ID, Y
	RTs

IceFireFly_CalcXYPosition:
	LDX <CurrentObjectIndexZ

	LDA IceFlyRotationX, Y
	STA <Temp_Var1
	BMI IceFireFly_CalcXNegative

	LDA <Objects_XZ, X
	ADD #$04
	ADC IceFlyRotationX, Y
	STA <Temp_Var1

	LDA <Objects_XHiZ, X
	ADC #$00
	STA <Temp_Var2
	JMP IceFireFly_CalcY

IceFireFly_CalcXNegative:
	EOR #$FF
	ADD #$01
	STA <Temp_Var1

	LDA <Objects_XZ, X
	ADD #$04
	SUB <Temp_Var1
	STA <Temp_Var1

	LDA <Objects_XHiZ, X
	SBC #$00
	STA <Temp_Var2
	
IceFireFly_CalcY:
	LDA IceFlyRotationY, Y
	STA <Temp_Var3
	BMI IceFireFly_CalcYNegative

	LDA <Objects_YZ, X
	ADC IceFlyRotationY, Y
	STA <Temp_Var3

	LDA <Objects_YHiZ, X
	ADC #$00
	STA <Temp_Var4
	RTS

IceFireFly_CalcYNegative:
	EOR #$FF
	ADD #$01
	STA <Temp_Var3

	LDA <Objects_YZ, X
	SUB <Temp_Var3
	STA <Temp_Var3

	LDA <Objects_YHiZ, X
	SBC #$00
	STA <Temp_Var4
	RTS

IceFireFly_SetXYPosition:

	LDA <Temp_Var1
	STA SpecialObj_X, Y
	
	LDA <Temp_Var2
	STA SpecialObj_XHi, Y

	LDA <Temp_Var3
	STA SpecialObj_Y, Y
	
	LDA <Temp_Var4
	STA SpecialObj_YHi, Y

	LDA IceFireFly_ProjectileID, X
	STA SpecialObj_ID, Y
	STA SpecialObj_Data3, Y
	STA SpecialObj_AllowOffScreen, Y
	RTS


IceFireFly_DestroyProjectiles:
	LDY IceFireFly_ProjectileSlot, X
	BMI IceFireFly_DestroyProjectilesRTS

	LDA #PLAYER_POOF
	STA SpecialObj_ID, Y

	LDA #$10
	STA SpecialObj_Timer, Y

	LDA #$00
	STA SpecialObj_Data1, Y

	LDA #$FF
	STA IceFireFly_ProjectileSlot, X

IceFireFly_DestroyProjectilesRTS:
	RTS


;***********************************************************************************
; Key Piece Collection
;***********************************************************************************
; IMMUNITIES:
;		All
;***********************************************************************************
; PROPERTIES
;	0 - 1 piece needed
;	1 - 2 pieces needed
;	2 - 3 pieces needed
;	3 - 4 pieces needed
;	4 - 5 pieces needed
;***********************************************************************************
;	This is an indicator for a number of key coins to collect. Once you've collected the
;	indicated number, a key is produced. The indicator fo number of pieces needed is displayed
;	in the upper left hand corner.
;***********************************************************************************
KeyPieceGet:
	.byte $01, $02, $04, $08, $10

KeyPieceXOffset:
	.byte $10, $18, $20, $28, $30

ObjInit_KeyPieceCollection:
	LDA #$05
	STA Objects_SpritesRequested,X

	LDA #$FF
	STA Objects_YHiZ, X
	INC Objects_Global, X
	RTS

ObjNorm_KeyPieceCollection:
	LDA #$93
	STA <Temp_Var1

	LDA #$95
	STA <Temp_Var2

	LDA LastPatTab_Sel
	EOR #$01
	TAY

	LDA #$4D
	STA PatTable_BankSel + 4, Y
	CPY #$00
	BEQ ObjNorm_KeyPieceCollection1

	LDA <Temp_Var1
	ADD #$40
	STA <Temp_Var1

	LDA <Temp_Var2
	ADD #$40
	STA <Temp_Var2

ObjNorm_KeyPieceCollection1:
	LDY Object_SpriteRAMOffset, X
	LDA Objects_Data4, X
	STA <Temp_Var5

	LDA Objects_Property, X
	STA <Temp_Var6
	TAX

CheckNextPiece:
	
	LDA #$08
	STA Sprite_RAM, Y
	LDA #SPR_PAL3
	STA Sprite_RAM + 2, Y
	LDA <Temp_Var5
	AND KeyPieceGet, X
	BNE UseFilledKey

	LDA <Temp_Var2
	BNE DrawKeyPiece

UseFilledKey:
	DEC <Temp_Var6

UseFilledKey1:
	LDA <Temp_Var1

DrawKeyPiece:
	STA Sprite_RAM + 1, Y
	LDA KeyPieceXOffset, X

	STA Sprite_RAM + 3, Y
	INY
	INY
	INY
	INY

NextCheck:
	DEX
	BPL CheckNextPiece

	LDA <Temp_Var6
	BPL KeyPieceRTS

	LDX <CurrentObjectIndexZ

	LDA #OBJ_KEY
	STA Objects_ID, X
	INC Objects_Global, X

	LDA #$00
	STA Objects_Property, X

	LDA <Player_X
	STA <Objects_XZ, X
	STA Key_ReappearX, X
	STA <Poof_X

	LDA <Player_XHi
	STA <Objects_XHiZ, X
	STA Key_ReappearXHi, X

	LDA <Player_Y
	ADD #$10
	STA <Objects_YZ, X
	STA Key_ReappearY, X
	STA <Poof_Y

	LDA <Player_YHi
	ADC #$00
	STA <Objects_YHiZ, X
	STA Key_ReappearYHi, X

	LDA #$01
	STA Key_Reappear, X

	JMP Common_MakePoof

KeyPieceRTS:
	RTS

KPFrames:
	.byte $00, $04

KPFlips1:
	.byte $00, $00, $00, SPR_HFLIP

KPFlips2:
	.byte $00, $00, SPR_HFLIP, SPR_HFLIP

    .org ObjectGroup_InitJumpTable
;****************************** OBJECT INITIALIZATION ******************************
	.word ObjInit_GiantChomp	; Object $14 OBJ_GIANTCHOMP
	.word ObjInit_Waterfill	; Object $15 OBJ_WATERFILL
	.word ObjInit_KeyPiece	; Object $16 OBJ_KEYPIECE
	.word ObjInit_NegaStar; Object $17 - OBJ_NEGASTAR
	.word ObjInit_DoNothing	; Object $18 - OBJ_BOSS_BOWSER
	.word ObjInit_WaterSplash; Object $19 - OBJ_POWERUP_FIREFLOWER
	.word ObjInit_DoNothing	; Object $1A that is a l
	.word ObjInit_StarPiece	; Object $1B - OBJ_BOUNCELEFTRIGHT
	.word ObjInit_SendBack	; Object $1C
	.word ObjInit_Timer	; Object $1D
	.word ObjInit_ESwitch	; Object $1E - OBJ_ESWITCH
	.word ObjInit_DoNothing	; Object $1F - OBJ_GROWINGVINE
	.word ObjInit_Clock	; Object $20
	.word ObjInit_IceSpike	; Object $21 - OBJECT_ICESPIKE
	.word ObjInit_DoNothing	; Object $22 - OBJ_POWERUP_PUMPKIN
	.word ObjInit_DoNothing	; Object $23 - OBJ_POWERUP_FOXLEAF
	.word ObjInit_WoodenPlatHorz	; Object $24 - OBJ_PLATFORM_HORZOSC
	.word ObjInit_WoodenPlatVert	; Object $25 - OBJ_PLATFORM_VERTOSC
	.word ObjInit_WoodenPlatFallGen	; Object $26 - OBJ_WOODENPLAT_RIDER
	.word ObjInit_WoodenPlatDiagonal1	; Object $27 - OBJ_PLATFORM_DIAG1OSC

    .org ObjectGroup_NormalJumpTable
;****************************** OBJECT GAME LOOP ******************************
	.word ObjNorm_GiantChomp	; Object $14 OBJ_GIANTCHOMP
	.word ObjNorm_Waterfill	; Object $15 OBJ_BOSS
	.word ObjNormal_KeyPiece	; Object $16 OBJ_KEYPIECE
	.word ObjNorm_NegaStar; Object $17 - OBJ_NEGASTAR
	.word ObjInit_DoNothing	; Object $18 - OBJ_BOSS_BOWSER
	.word ObjNorm_WaterSplash; Object $19 - OBJ_POWERUP_FIREFLOWER
	.word ObjInit_DoNothing	; Object $1A
	.word ObjNorm_StarPiece	; Object $1B - OBJ_BOUNCELEFTRIGHT
	.word ObjNorm_SendBack	; Object $1C
	.word ObjNorm_Timer	; Object $1D
	.word ObjNorm_ESwitch	; Object $1E - OBJ_ESWITCH
	.word ObjInit_DoNothing	; Object $1F - OBJ_GROWINGVINE
	.word ObjNorm_Clock	; Object $20
	.word ObjNorm_IceSpike	; Object $21 - OBJECT_ICESPIKE
	.word ObjInit_DoNothing	; Object $22 - OBJ_POWERUP_PUMPKIN
	.word ObjInit_DoNothing	; Object $23 - OBJ_POWERUP_FOXLEAF
    .word ObjNorm_PlatformOscillate		; Object $24 - OBJ_PLATFORM_HORZOSC
	.word ObjNorm_PlatformOscillate	; Object $25 - OBJ_PLATFORM_VERTOSC
	.word ObjNorm_WoodenPlatFallGen	; Object $26 - OBJ_WOODENPLAT_RIDER
	.word ObjNorm_PlatformOscillate	; Object $27 - OBJ_PLATFORM_DIAG1OSC

    .org ObjectGroup_CollideJumpTable
;****************************** OBJECT PLAYER INTERACTION ******************************
	.word ObjHit_DoNothing	; Object $14 OBJ_GIANTCHOMP
	.word ObjHit_DoNothing	; Object $15 OBJ_WATERFILLER
	.word ObjHit_KeyPiece	; Object $16
	.word ObjHit_DoNothing	; Object $17 - OBJ_NEGASTAR
	.word ObjHit_DoNothing; Object $18 - OBJ_BOSS_BOWSER
	.word ObjHit_DoNothing	; Object $19 - OBJ_POWERUP_FIREFLOWER
	.word ObjHit_DoNothing	; Object $1A
	.word Object_SetDeadEmpty	; Object $1B - OBJ_BOUNCELEFTRIGHT
	.word ObjHit_DoNothing	; Object $1C
	.word ObjHit_DoNothing	; Object $1D
	.word ObjHit_DoNothing	; Object $1E - OBJ_ESWITCH
	.word ObjHit_DoNothing	; Object $1F - OBJ_GROWINGVINE
	.word ObjHit_Clock	; Object $20
	.word Player_GetHurt	; Object $21 - OBJECT_ICESPIKE
	.word ObjHit_DoNothing	; Object $22 - OBJ_POWERUP_PUMPKIN
	.word ObjHit_DoNothing    ; Object $23 - OBJ_POWERUP_FOXLEAF
	.word Platform_PlayerStand		; Object $24 - OBJ_PLATFORM_HORZOSC
	.word Platform_PlayerStand		; Object $25 - OBJ_PLATFORM_VERTOSC
	.word ObjHit_DoNothing		; Object $26 - OBJ_WOODENPLAT_RIDER
	.word Platform_PlayerStand		; Object $27 - OBJ_PLATFORM_DIAG1OSC

    .org ObjectGroup_PatTableSel
;****************************** OBJECT PALETTE/SIZE ******************************
	.byte OA1_PAL2 | OA1_HEIGHT32 | OA1_WIDTH32	; Object $14 OBJ_GIANTCHOMP
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $15 OBJ_WATERFILLER
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $16
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $17 - OBJ_NEGASTAR
	.byte OA1_PAL1 | OA1_HEIGHT48 | OA1_WIDTH32	; Object $18 - OBJ_BOSS_BOWSER
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $19 - OBJ_POWERUP_FIREFLOWER
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $1A
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $1B - OBJ_BOUNCELEFTRIGHT
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $1C
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_HEIGHT16	; Object $1D
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $1E - OBJ_ESWITCH
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $1F - OBJ_GROWINGVINE
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $20
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $21 - OBJECT_ICESPIKE #DAHRKDAIZ
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $22 - OBJ_POWERUP_PUMPKIN
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $23 - OBJ_POWERUP_FOXLEAF
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48		; Object $24 - OBJ_PLATFORM_HORZOSC
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48		; Object $25
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $26 - OBJ_WOODENPLAT_RIDER
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $27 - OBJ_PLATFORM_DIAG1OSC

    .org ObjectGroup_PatTableSel
;****************************** OBJECT PATTERN TABLE ******************************
    .byte OPTS_SETPT5 | $0E	; Object $14
	.byte OPTS_SETPT5 | $12	; Object $15 OBJ_WATERFILLER
	.byte OPTS_NOCHANGE	; Object $16
	.byte OPTS_SETPT5 | $4D	; Object $17 - OBJ_NEGASTAR
	.byte OPTS_SETPT5 | $3A	; Object $18 - OBJ_BOSS_BOWSER
	.byte OPTS_NOCHANGE	; Object $19 - OBJ_POWERUP_FIREFLOWER
	.byte OPTS_SETPT5 | $1A	; Object $1A
	.byte OPTS_NOCHANGE	; Object $1B - OBJ_BOUNCELEFTRIGHT
	.byte OPTS_NOCHANGE	; Object $1C
	.byte OPTS_NOCHANGE	; Object $1D
	.byte OPTS_NOCHANGE	; Object $1E - OBJ_ESWITCH
	.byte OPTS_NOCHANGE	; Object $1F - OBJ_GROWINGVINE
	.byte OPTS_NOCHANGE 	; Object $20
	.byte OPTS_SETPT5 | $12	; Object $21 - OBJECT_ICESPIKE
	.byte OPTS_NOCHANGE	; Object $22 - OBJ_POWERUP_PUMPKIN
	.byte OPTS_NOCHANGE	; Object $23 - OBJ_POWERUP_FOXLEAF
	.byte OPTS_NOCHANGE	; Object $24 - OBJ_PLATFORM_HORZOSC
	.byte OPTS_NOCHANGE	; Object $25
	.byte OPTS_NOCHANGE	; Object $26 - OBJ_WOODENPLAT_RIDER
	.byte OPTS_NOCHANGE	; Object $27 - OBJ_PLATFORM_DIAG1OSC

	.org ObjectGroup_KillAction	
;****************************** OBJECT DEATH ROUTINE ******************************
	.byte KILLACT_STANDARD	; Object $14
	.byte KILLACT_JUSTDRAW16X16	; Object $15
	.byte KILLACT_STANDARD	; Object $16
	.byte KILLACT_POOFDEATH	; Object $17 - OBJ_NEGASTAR
	.byte KILLACT_NORMALSTATE	; Object $18 - OBJ_BOSS_BOWSER
	.byte KILLACT_JUSTDRAWMIRROR	; Object $19 - OBJ_POWERUP_FIREFLOWER
	.byte KILLACT_STANDARD	; Object $1A
	.byte KILLACT_STANDARD	; Object $1B - OBJ_BOUNCELEFTRIGHT
	.byte KILLACT_STANDARD	; Object $1C
	.byte KILLACT_STANDARD	; Object $1D
	.byte KILLACT_STANDARD	; Object $1E - OBJ_ESWITCH
	.byte KILLACT_STANDARD	; Object $1F - OBJ_GROWINGVINE
	.byte KILLACT_STANDARD	; Object $20
	.byte KILLACT_NORMALSTATE	; Object $21 - OBJECT_ICESPIKE
	.byte KILLACT_STANDARD	; Object $22 - OBJ_POWERUP_PUMPKIN
	.byte KILLACT_STANDARD	; Object $23 - OBJ_POWERUP_FOXLEAF
	.byte KILLACT_STANDARD	; Object $24 - OBJ_PLATFORM_HORZOSC
	.byte KILLACT_STANDARD	; Object $25
	.byte KILLACT_STANDARD	; Object $26 - OBJ_WOODENPLAT_RIDER
	.byte KILLACT_STANDARD	; Object $27 - OBJ_PLATFORM_DIAG1OSC


OG2_POff .func (\1 - ObjectGroup02_PatternSets)

	.org ObjectGroup_PatternStarts	; <-- help enforce this table *here*
;****************************** OBJECT FRAME TABLE ******************************
    .org ObjectGroup_PatternSets	; <-- help enforce this table *here*
    .byte OG2_POff(ObjP14), OG2_POff(ObjP15), OG2_POff(ObjP16), OG2_POff(ObjP17)
	.byte OG2_POff(ObjP18), OG2_POff(ObjP19), OG2_POff(ObjP1A), OG2_POff(ObjP1B)
	.byte OG2_POff(ObjP1C), OG2_POff(ObjP1D), OG2_POff(ObjP1E), OG2_POff(ObjP1F)
	.byte OG2_POff(ObjP20), OG2_POff(ObjP21), OG2_POff(ObjP22), OG2_POff(ObjP23)
    .byte OG2_POff(ObjP24), OG2_POff(ObjP25), OG2_POff(ObjP26), OG2_POff(ObjP27)

ObjectGroup02_PatternSets:

ObjP14:
	.byte $99, $5C, $9B, $5C
  
ObjP16:	
    .byte $81, $83, $85, $87, $89, $89, $87, $85, $C1, $C3, $C5, $C7, $C9, $C9, $C7, $C5

ObjP15:
	.byte $81, $83

ObjP17:
	.byte $9F, $9F

ObjP18:	
	.byte $97, $99, $9B, $9D, $A1, $AB, $A3, $A1, $A3, $AB, $A5, $A1, $A5, $AB, $A7, $A1
	.byte $D7, $D9, $DB, $DD, $E1, $EB, $E3, $E1, $E3, $EB, $E5, $E1, $E5, $EB, $E7, $E1    

ObjP19:
	.byte $15, $15
	.byte $13, $13
	.byte $11, $11

ObjP1A:
    .byte $8D, $8D, $8F, $8F, $91, $91, $A7, $A7, $A9, $A9, $AB, $AB    

ObjP1B:
    .byte $8B, $8D, $8F, $91, $89, $89, $91, $8F, $CB, $CD, $CF, $D1, $C9, $C9, $D1, $CF	; RAS: Not actually used, see BounceBlock_Tile
    
ObjP1C:	
	.byte $B9, $BB    

ObjP1D:
	.byte $97, $99, $9B, $9D, $A1, $AB, $A3, $A1, $A3, $AB, $A5, $A1, $A5, $AB, $A7, $A1
	.byte $D7, $D9, $DB, $DD, $E1, $EB, $E3, $E1, $E3, $EB, $E5, $E1, $E5, $EB, $E7, $E1    

ObjP1E:	
	.byte $B9, $BB
	.byte $F9, $FB

ObjP1F:
    .byte $51, $53      

ObjP20:
ObjP21:
    .byte $AF, $AF

ObjP22:	
ObjP23:	
ObjP24:
ObjP25:
ObjP26:
ObjP27:
	.byte $A1, $A3, $AD, $AF, $A5, $A7, $A9, $AB

;***********************************************************************************
; Giant Chomp
;***********************************************************************************
; IMMUNITIES:
;		All
;***********************************************************************************
;	This enemy waits for Mario to be within 48 pixels between its midpoint and Mario's midpoint.
;	Then this enemy falls straight down, breaking any solid block it comes in contact with.
;	When it hits a solid object, it resets it's velocity to 0 and continues to fall
;***********************************************************************************	

GiantChomp_Action = Objects_Data1
GiantChomp_AnimTicks = Objects_Data2

GiantChomp_Palette:
	.byte SPR_PAL1, SPR_PAL0

GiantChompFrames:
	.byte $81, $83, $85, $87, $A1, $A3, $A5, $A7
	.byte $89, $8B, $8D, $8F, $A9, $AB, $AD, $AF

GiantChomp_Offsets:
	.byte $E0, $C0
	.byte $FF, $00

ObjInit_GiantChomp:
	LDA #$08
	STA Objects_SpritesRequested,X 
	
	LDA #BOUND32x32
	STA Objects_BoundBox, X

	LDA #ATT_ATTACKPROOF
	STA Objects_WeaponAttr, X

	LDA #(ATTR_SHELLPROOF | ATTR_BUMPNOKILL)
	STA Objects_BehaviorAttr, X
	RTS

ObjNorm_GiantChomp:
	LDA GiantChomp_Action, X
	JSR DynJump

	.word GiantChomp_Wait
	.word GiantChomp_Attack
	
GiantChomp_Wait:
	JSR Object_CalcBoundBox
	JSR Object_XDistanceFromPlayer

	LDA <XDiff
	CMP #$30
	BCS WaitChompRTS
	
	INC GiantChomp_Action, X
	
	LDY Objects_Property, X

	LDA #$40
	STA <Objects_YVelZ, X

	LDA <Vert_Scroll
	ADD GiantChomp_Offsets, Y
	STA <Objects_YZ, X

	LDA <Vert_Scroll_Hi
	ADC GiantChomp_Offsets + 2, Y
	STA <Objects_YHiZ, X

	LDA GiantChomp_Orientation, Y
	STA Objects_Orientation, X

WaitChompRTS:
	RTS

GiantChompDetect_XOffset:
	.byte $08, $18, $08, $18

GiantChompDetect_YOffset:
	.byte $1C, $1C, $04, $04

GiantChomp_Pal:
	.byte SPR_PAL2, SPR_PAL0


GiantChomp_Orientation:
	.byte $00, SPR_VFLIP	

GiantChomp_Attack:
	LDA <Player_HaltGameZ
	BEQ GiantChomp_Norm
	JMP GiantChomp_Draw

GiantChomp_Norm:
	LDA Objects_Property, X
	CMP #$02
	BEQ GiantChomp_NoDelete

	JSR Object_DeleteOffScreen

GiantChomp_NoDelete:
	LDA Objects_Property, X
	STA Reverse_Gravity

	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat

	LDA #ATTR_EXPLOSIONPROOF
	STA <Kill_TypeCheck
	JSR Object_KillOthers


	LDA Objects_Property, X
	ASL A
	TAY

	LDA Game_Counter
	AND #$01
	BNE GiantChomp_OtherBlock

	INY

GiantChomp_OtherBlock:
	LDA Objects_BoundLeft, X
	ADC GiantChompDetect_XOffset, Y
	STA Block_DetectX

	LDA Objects_BoundLeftHi, X
	ADC #$00
	STA Block_DetectXHi

	LDA Objects_BoundTop, X
	ADD GiantChompDetect_YOffset, Y
	STA Block_DetectY

	LDA Objects_BoundTopHi, X
	ADC #$00
	STA Block_DetectYHi

	JSR Object_DetectTile
	CMP #TILE_PROP_SOLID_ALL
	BCC GiantChomp_Animate

	LDA Tile_LastValue
	AND #$C0
	ORA #$01

	JSR Object_ChangeBlock

	LDA Sound_QLevel2
	ORA #SND_LEVELCRUMBLE
	STA Sound_QLevel2

	LDA Objects_SpritesVerticallyOffScreen, X
	BNE GiantChomp_SlowFall

	LDA Block_DetectX
	STA <Debris_X

	LDA Block_DetectY
	STA <Debris_Y
	JSR Common_MakeBricks
	
GiantChomp_SlowFall:
	LDA #$00
	STA <Objects_YVelZ, X

GiantChomp_Animate:
	LDA Game_Counter
	AND #$08
	LSR A
	LSR A
	LSR A
	STA Objects_Frame, X

GiantChomp_Draw:
	LDA #LOW(GiantChompFrames)
	STA <Giant_TilesLow

	LDA #HIGH(GiantChompFrames)
	STA <Giant_TilesHi

	JSR Object_DrawGiant

GiantChomp_RTS:
	RTS

;***********************************************************************************
; Water Filler
;***********************************************************************************
; IMMUNITIES:
;		All
;***********************************************************************************
;	This object moves quickly to the right, toggling the tile it's currently on every 16 pixels.
;***********************************************************************************	

ObjInit_Waterfill:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #$40
	STA Objects_XVelZ, X
	
	JMP Object_NoInteractions

WaterFill_Ticks = Objects_Data1

WaterFill_Flip:
	.byte $00, SPR_VFLIP

ObjNorm_Waterfill:
	LDA <Player_HaltGameZ
	BNE FillWater_Draw

WaterFill_Norm:
	
	JSR Object_DeleteOffScreen
	JSR Object_FaceDirectionMoving
	JSR Object_ApplyXVel
	JSR Object_CalcBoundBoxForced
	JSR Object_DetectTileCenter

	STY <Temp_Var1

	CMP #TILE_PROP_SOLID_ALL
	BCC FillWater_DrawWater

	LDA <Objects_XZ, X
	AND #$0F
	BNE FillWater_Animate

	LDA Objects_XZ, X
	AND #$F0
	STA Debris_X

	LDA Objects_YZ, X
	AND #$F0
	STA Debris_Y

	JSR Common_MakeBricks

	LDA #SPR_PAL2
	STA BrickBust_Pal, Y
	
	LDA <Temp_Var1
	SUB #$01

	JSR Object_ChangeBlock

	JMP FillWater_Animate

FillWater_DrawWater:
	LDA <Objects_XZ, X
	AND #$0F
	BNE FillWater_Animate

	LDA <Temp_Var1
	EOR #$01

	JSR Object_ChangeBlock

FillWater_Animate:
	INC WaterFill_Ticks, X
	
	LDA WaterFill_Ticks, X
	AND #$03
	
	LSR A

	TAY
	
	LDA Objects_Orientation, X
	ORA WaterFill_Flip, Y
	STA Objects_Orientation, X

FillWater_Draw:
	JMP Object_Draw

;***********************************************************************************
; Key Piece
;***********************************************************************************
; IMMUNITIES:
;		All
;***********************************************************************************
; PROPERTIES:
; 	0 - Fills key piece collection slot #1
; 	1 - Fills key piece collection slot #2
; 	2 - Fills key piece collection slot #3
; 	3 - Fills key piece collection slot #4
; 	4 - Fills key piece collection slot #5
; 	5 - Fills key piece collection slot #6
; 	6 - Fills key piece collection slot #7
;***********************************************************************************
; 	This object remains stationary and watch for contact with Mario. Once touched,
;	this object searches for the key collection object and fills in it's inidcated slot
; 	in the collection.
;***********************************************************************************	

ObjInit_KeyPiece:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	JSR Object_NoInteractions
	RTS

ObjNormal_KeyPiece:
	LDA <Player_HaltGameZ
	BNE KeyPiece_Draw

	STA Debug_Snap
	LDY LastPatTab_Sel
	LDA PatTable_BankSel + 4, Y
	CMP #$4D
	BEQ KeyPiece_PTableFine

	TYA
	EOR #$01
	TAY

	LDA #$4D
	STA PatTable_BankSel + 4, Y

KeyPiece_PTableFine:
	LDA KPFrames, Y
	STA Objects_Frame, X

	JSR Object_DeleteOffScreen
	JSR Object_CalcBoundBox
	JSR Object_InteractWithPlayer

KeyPiece_Animate:
	INC Objects_Data2, X

	LDA Objects_Data2, X
	LSR A
	LSR A 
	LSR A
	AND #$03
	ORA Objects_Frame, X
	STA Objects_Frame, X

KeyPiece_Draw:
	JSR Object_Draw

	LDA Objects_Frame, X
	AND #$03
	TAX

	LDA KPFlips1, X
	ORA Sprite_RAM + 2, Y
	STA Sprite_RAM + 2, Y

	LDA KPFlips2, X
	ORA Sprite_RAM + 6, Y
	STA Sprite_RAM + 6, Y
	RTS

ObjHit_KeyPiece:
	LDY #$04

FindKeyTracker:
	LDA Objects_ID,Y
	CMP #OBJ_KEYPIECES
	BEQ SetKeyField

	DEY
	BPL FindKeyTracker
	RTS

SetKeyField:
	LDA Objects_Property, X
	TAX

	LDA Objects_Data4, Y
	ORA KeyPieceGet, X
	STA Objects_Data4, Y

	LDA #SND_MAPINVENTORYFLIP	 
	STA Sound_QMap	

	LDX <CurrentObjectIndexZ
	JMP Object_SetDeadEmpty

;***********************************************************************************
; Water Splash
;***********************************************************************************
; IMMUNITIES:
;		All
;***********************************************************************************
; 	An oject that just represents the splash animation when an object goes in and out of water
;***********************************************************************************	
ObjInit_WaterSplash:
	JMP Object_NoInteractions
	
WaterSplash_Frame = Objects_Data1

ObjNorm_WaterSplash:
	LDA <Player_HaltGameZ
	BEQ WaterSplash_Norm

	JMP WaterSplash_Draw

WaterSplash_Norm:
	LDA <Objects_YZ, X
	AND #$F0
	STA <Objects_YZ, X

	LDA Objects_Timer, X
	BNE WaterSplash_Animate

	JMP Object_Delete
	
WaterSplash_Animate:
	LDA Objects_Timer, X
	LSR A
	LSR A

	AND #$03
	STA Objects_Frame, X

WaterSplash_Draw:
	JMP Object_DrawMirrored


;***********************************************************************************
; Timer
;***********************************************************************************
; IMMUNITIES:
;		All
;***********************************************************************************
; 	0 - 30 Seconds
; 	1 - 100 Seconds
;***********************************************************************************
; 	This object kills the player once the count down reaches 0. The time left displays
;	in the upper left hand corner.
;***********************************************************************************	
TimerStartTimes:
	.byte 30, 100

ObjInit_Timer:
	LDA #$03
	STA Objects_SpritesRequested, X

	LDA Objects_Property, X
	TAY

	LDA TimerStartTimes, Y
	STA Objects_Data4, X

	LDA #$B0
	STA Objects_Data5, X

	INC Objects_Global, X
	
	JMP Object_NoInteractions

ObjNorm_Timer:
	LDA Objects_Data2, X
	BNE ObjNorm_Timer0

	LDA #MUS1_TIMEWARNING	 
	STA Sound_QMusic1
	INC Objects_Data2, X

ObjNorm_Timer0:
	LDA <Player_HaltGameZ
	BNE ObjNorm_Timer1

	LDA Objects_Data4, X
	BEQ ObjNorm_Timer2

	DEC Objects_Data5, X
	BNE ObjNorm_Timer1

	DEC Objects_Data4, X
	LDA #$2D
	STA Objects_Data5, X

ObjNorm_Timer1:
	JSR DrawTimer
	RTS

ObjNorm_Timer2:
	JSR Player_Die
	RTS

Timer_XOffset:
	.byte $20, $18, $10

DrawTimer:
	LDA LastPatTab_Sel
	EOR #$01
	TAY

	LDA #$4D
	STA PatTable_BankSel + 4, Y

	LDA Objects_Data4, X
	STA DigitsParam

	LDA #$00
	STA DigitsParam + 1

	JSR BytesTo3Digits

	LDA LastPatTab_Sel
	EOR #$01
	TAX

	LDA Lock_NumOffset, X
	STA <Temp_Var1

	LDX <CurrentObjectIndexZ
	LDY Object_SpriteRAMOffset, X

	LDX #$02

DrawTimer1:
	LDA #$10
	STA Sprite_RAMY, Y

	LDA #SPR_PAL2
	STA Sprite_RAMAttr, Y

	LDA Timer_XOffset, X
	STA Sprite_RAMX, Y

	LDA <DigitsResult, X
	ASL A
	ADD #$A1
	ADD <Temp_Var1
	STA Sprite_RAMTile, Y

	INY
	INY
	INY
	INY

	DEX
	BPL DrawTimer1

	LDX <CurrentObjectIndexZ
	RTS

;***********************************************************************************
; Clock
;***********************************************************************************
; IMMUNITIES:
;		All
;***********************************************************************************
; 	0 - Adds 5 seconds
; 	1 - Adds 10 seconds
; 	2 - Adds 15 seconds
; 	3 - Adds 20 seconds
; 	4 - Adds 25 seconds
; 	5 - Adds 30 seconds
;***********************************************************************************
; 	Once Mario touches this object, a number of seconds are added to the timer object.
;***********************************************************************************	
Clock_Collected = Objects_Data3
Clock_Frame = Objects_Data4

Clock_FrameOffsets:
	.byte $00, $08

ObjInit_Clock:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	JMP Object_NoInteractions

ObjNorm_Clock:
	JSR Object_DeleteOffScreen
	
	LDA #$00
	STA <Temp_Var10

	LDA LastPatTab_Sel
	EOR #$01
	TAY

	LDA #$4D
	STA PatTable_BankSel + 4, Y

ObjNorm_Clock0:
	LDA <Player_HaltGameZ
	BNE ObjNorm_Clock1

	LDA Clock_Collected, X
	BNE ObjNorm_Clock2

	JSR Object_CalcBoundBox
	JSR Object_InteractWithPlayer

	LDA LastPatTab_Sel
	EOR #$01
	TAY

	INC Clock_Frame, X
	LDA Clock_Frame, X
	LSR A
	LSR A
	LSR A
	AND #$01
	ADD Clock_FrameOffsets, Y
	STA Objects_Frame, X
	
ObjNorm_Clock1:
	JMP Object_Draw

ObjNorm_Clock2:
	LDA <Player_HaltGameZ
	BNE ObjNorm_Clock3

	LDA LastPatTab_Sel
	EOR #$01
	TAY

	LDA Objects_Property, X
	ADD #$02
	ADD <Temp_Var10
	ADD Clock_FrameOffsets, Y
	STA Objects_Frame, X

	JSR Object_ApplyYVel_NoGravity

	LDA Objects_Timer, X
	BEQ ObjNorm_Clock4

ObjNorm_Clock3:
	JMP Object_Draw

ObjNorm_Clock4:
	JMP Object_Delete

ClockTimes:
	.byte 5, 10, 15, 20, 25, 30

ObjHit_Clock:
	LDY #$04

ObjHit_Clock1:
	LDA Objects_ID, Y
	CMP #$1D
	BEQ ObjHit_Clock2

	DEY
	BPL ObjHit_Clock1
	RTS

ObjHit_Clock2:
	LDA Objects_Property, X
	TAX
	LDA ClockTimes, X
	ADD Objects_Data4, Y
	STA Objects_Data4, Y

	LDX <CurrentObjectIndexZ

	INC Clock_Collected, X

	LDA #$20
	STA Objects_Timer, X

	LDA #$F8
	STA Objects_YVelZ, X

	LDA #SPR_PAL2
	STA Objects_SpriteAttributes, X

	LDA Sound_QLevel1
	ORA #SND_MAPBONUSAPPEAR
	STA Sound_QMap
	RTS

;***********************************************************************************
; Spike
;***********************************************************************************
; IMMUNITIES:
;		Iceballs
;		Tail attacks
;		Stomping
;		Shell attacks
;***********************************************************************************
; 	Waits for Mario to get within 49 pixels, then shakes and falls. Once it hits the ground, it
;	shatters.
;***********************************************************************************	
ObjInit_IceSpike:
	LDA #(ATTR_ICEPROOF | ATTR_TAILPROOF | ATTR_STOMPPROOF)
	STA Objects_WeaponAttr, X

	LDA #ATTR_SHELLPROOF
	STA Objects_BehaviorAttr, X

	LDA #BOUND8x16
	STA Objects_BoundBox, X
	RTS

IceSpike_Action = Objects_Data1

ObjNorm_IceSpike:
	
	LDA <Player_HaltGameZ
	BEQ IceSpike_Normal

	JMP Object_DrawAligned
	
IceSpike_Normal:
	LDA Objects_State, X
	CMP #OBJSTATE_KILLED
	BNE IceSpike_NotDead

	JMP Object_BurstIce

IceSpike_NotDead:
	JSR Object_DeleteOffScreen

	LDA IceSpike_Action, X
	JSR DynJump

	.word IceSpike_Wait
	.word IceSpike_Shake
	.word IceSpike_Fall

IceSpike_Wait:
	JSR Object_CalcBoundBox
	JSR Object_XDistanceFromPlayer
	LDA <XDiff
	CMP #$31
	BCS IceSpike_NoShake

	JSR Object_YDistanceFromPlayer
	LDA <YDiffAboveBelow
	BEQ IceSpike_NoShake

	INC IceSpike_Action, X

	LDA #$20
	STA Objects_Timer, X

IceSpike_NoShake:
	JSR Object_InteractWithPlayer
	JMP Object_DrawAligned

IceSpike_Shake:
	LDA Objects_Timer, X
	BNE IceSpike_KeepShaking

	INC IceSpike_Action, X

IceSpike_KeepShaking:
	AND #$01
	STA <Temp_Var1

	LDA <Objects_XZ, X
	AND #$FE
	ORA <Temp_Var1
	STA <Objects_XZ, X
	STA <Objects_XZ, X

	JSR Object_CalcBoundBox
	JSR Object_InteractWithPlayer
	JMP Object_DrawAligned

IceSpike_Fall:
	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_InteractWithPlayer
	JSR Object_DetectTiles

	LDA <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ IceSpike_NoBurst

	JSR Object_BurstIce

IceSpike_NoBurst:
	JMP Object_DrawAligned

ObjInit_WoodenPlatHorz:
	
	JSR ObjInit_PlatformCommon
	
	LDA #$00
	STA Objects_Property, X

	JMP InitPatrol_NoTimers

ObjInit_WoodenPlatVert:
	JSR ObjInit_PlatformCommon
	LDA #$01
	STA Objects_Property, X
	JMP InitPatrol_NoTimers    


PlatformGenDelay:
	.byte $00, $20  

ObjInit_WoodenPlatFallGen:
	LDY Objects_Property, X
	
    LDA PlatformGenDelay, Y
	STA Objects_Timer, X
	
    LDA #$FC
	STA <Objects_YVelZ, X
	
    LDA Objects_SpriteAttributes,X
	ORA #SPR_BEHINDBG
	STA Objects_SpriteAttributes,X

ObjInit_WoodenPlatFallGen1:
	LDA <Objects_YZ, X
	STA Objects_Data4, X
	
    LDA <Objects_YHiZ, X
	STA Objects_Data5, X
	RTS

Reset_WoodenPlatFallGen:
	LDA #$60
	STA Objects_Timer, X

	LDA Objects_Data4, X
	STA <Objects_YZ, X

	LDA Objects_Data5, X
	STA <Objects_YHiZ, X

	LDA #00
	STA Objects_Data3, X
	RTS

ObjNorm_WoodenPlatFallGen:
	RTS		 ; Return    



ObjInit_WoodenPlatDiagonal1:
	JSR ObjInit_PlatformCommon
	LDA #$02
	STA Objects_Property, X
	JMP InitPatrol_NoTimers
    


PlatformTimers:
	.byte $01, $11, $21, $31, $41, $51, $61, $71

Platform_StartX = Objects_Data3
Platform_StartXHi = Objects_Data4
Platform_SteppedOn = Objects_Data5
Platform_MadeContact = Objects_Data6
Platform_Fall = Objects_Data7

ObjInit_PlatformCommon:
	LDA #$06
	STA Objects_SpritesRequested, X

	LDA #BOUND48x16
	STA Objects_BoundBox, X

	JSR Object_NoInteractions

	LDA <Objects_XZ, X
	STA Platform_StartX, X

	LDA <Objects_XHiZ, X
	STA Platform_StartXHi, X

	LDA <Objects_YZ, X
	SUB #$02
	STA <Objects_YZ, X

	LDA <Objects_YHiZ, X
	SBC #$00
	STA <Objects_YHiZ, X

	LDY Objects_Property, X
	LDA PlatformTimers, Y
	STA Patrol_ResetTimer, X
	RTS


ObjNorm_PlatformOscillate:
	LDA <Player_HaltGameZ
	BNE ObjNorm_PlatformOscillate1	 ; If gameplay halted, Delete if off-screen, otherwise draw wide 48x16 sprite

	JSR Object_CalcBoundBoxForced
	
	LDA #$00
	STA Platform_MadeContact, X

	JSR Object_InteractWithPlayer
	JSR DoPatrol
	JSR Platform_ContactCheck

	LDA <Objects_XZ, X
	CMP Platform_StartX, X
	BNE ObjNorm_PlatformOscillate1

	LDA <Objects_XHiZ, X
	CMP Platform_StartXHi, X

	BNE ObjNorm_PlatformOscillate1


	JSR Object_DeleteOffScreen

ObjNorm_PlatformOscillate1:
	LDA Objects_SpriteAttributes, X
	ORA #SPR_BEHINDBG
	STA Objects_SpriteAttributes, X
	JMP Platform_Draw
	
ObjInit_WoodenPlat:
	RTS		 ; Return
    

Platform_Draw:
	LDA #$00
	STA Objects_Orientation, X
	
	LDA Objects_SpritesVerticallyOffScreen,X
	BEQ Platform_DoDraw

	RTS

Platform_DoDraw:
	INC <Objects_YZ, X
	JSR Object_DrawMirrored

	DEC <Objects_YZ, X

	LDA Objects_SpritesHorizontallyOffScreen,X
	AND #SPRITE_2_HINVISIBLE
	BNE Platform_Draw1

	LDA <Objects_SpriteX, X
	ADD #$10
	STA Sprite_RAMX + 8, Y

	LDA <Objects_SpriteY, X
	STA Sprite_RAMY + 8, Y

	LDA Sprite_RAMAttr, Y
	STA Sprite_RAMAttr + 8, Y

	LDA Sprite_RAMTile, Y
	STA Sprite_RAMTile + 8, Y

Platform_Draw1:
	LDA Objects_SpritesHorizontallyOffScreen,X
	AND #SPRITE_3_HINVISIBLE
	BNE Platform_Draw2

	LDA <Objects_SpriteX, X
	ADD #$18
	STA Sprite_RAMX + 12, Y

	LDA <Objects_SpriteY, X
	STA Sprite_RAMY + 12, Y

	LDA Sprite_RAMAttr + 4, Y
	STA Sprite_RAMAttr + 12, Y

	LDA Sprite_RAMTile + 4, Y
	STA Sprite_RAMTile + 12, Y

Platform_Draw2:
	LDA Objects_SpritesHorizontallyOffScreen,X
	AND #SPRITE_4_HINVISIBLE
	BNE Platform_Draw3

	LDA <Objects_SpriteX, X
	ADD #$20
	STA Sprite_RAMX + 16, Y

	LDA <Objects_SpriteY, X
	STA Sprite_RAMY + 16, Y

	LDA Sprite_RAMAttr, Y
	STA Sprite_RAMAttr + 16, Y

	LDA Sprite_RAMTile, Y
	STA Sprite_RAMTile + 16, Y

Platform_Draw3:
	
	LDA Objects_SpritesHorizontallyOffScreen,X
	AND #SPRITE_5_HINVISIBLE
	BNE Platform_Draw4

	LDA <Objects_SpriteX, X
	ADD #$28
	STA Sprite_RAMX + 20, Y

	LDA <Objects_SpriteY, X
	STA Sprite_RAMY + 20, Y

	LDA Sprite_RAMAttr + 4, Y
	STA Sprite_RAMAttr + 20, Y

	LDA Sprite_RAMTile + 4, Y
	STA Sprite_RAMTile + 20, Y

Platform_Draw4:
	RTS		 ; Return

Platform_PlayerStand:
	LDA <Player_YVel
	BMI Platform_PlayerStand1

	LDA HitTest_Result
	AND #HITTEST_BOTTOM
	BEQ Platform_PlayerStand1

	LDA Player_BoundBottom
	SUB Objects_BoundTop, X
	CMP #$04
	BCS Platform_PlayerStand1

	LDA #$01
	STA Platform_SteppedOn, X
	STA Platform_MadeContact, X

Platform_PlayerStand1:	
	RTS

Platform_PlayerOffset:
	.byte $01, $00
	.byte $00, $00

Platform_ContactCheck:
	LDA Platform_MadeContact, X
	BEQ Platform_CheckRTS
	
	LDA <Objects_YZ,X	 
	SUB #30
	STA <Player_Y

	LDA <Objects_YHiZ,X
	SBC #$00
	STA <Player_YHi

	LDA #$00
	STA <Player_YVel
	STA Player_InAir

	LDA <Objects_XVelZ, X
	STA Player_CarryXVel
	
Platform_CheckRTS:
	RTS
    	
    .org ObjectGroup_InitJumpTable
;****************************** OBJECT INITIALIZATION ******************************
    .word ObjInit_WoodenPlatCopyDiagonal2	; Object $28 - OBJ_PLATFORM_DIAG2OSC
	.word ObjInit_Spike	; Object $29 - OBJ_SPIKE
	.word ObjInit_Spark		; Object $2A - OBJ_SPARK
	.word ObjInit_DiagonalPodobo		; Object $2B - OBJ_RICOCHET_PODOBO
	.word ObjInit_WoodenPlatCopyCCW	; Object $2C - OBJ_PLATFORM_CLOCKOSC
	.word ObjInit_WoodenPlatCopyCW	; Object $2D - OBJ_PLATFORM_CCLOCKOSC
	.word ObjInit_PirateBoo	; Object $2E - OBJ_PIRATEBOO
	.word ObjInit_Boo		; Object $2F - OBJ_BOO
	.word ObjInit_DoNothing	; Object $30 - OBJ_PACBOO
	.word ObjInit_Phanto		; Object $31 - OBJ_PHANTO
	.word ObjInit_PhantoFlip	; Object $32 - OBJ_PHANTO_FLIP
	.word ObjInit_DoNothing		; Object $33 - OBJ_NIPPER
	.word ObjInit_Toad		; Object $34 - OBJ_TOAD
	.word ObjInit_Lightning		; Object $35 - OBJ_LIGHTNINGBOLT
	.word ObjInit_PlatformCopyFollow	; Object $36 - OBJ_PLATFORM_PATH
	.word ObjInit_DoNothing	; Object $37 - OBJ_PLATFORM_DIAG1OSCS
	.word ObjInit_DoNothing	; Object $38 - OBJ_PLATFORM_DIAG2OSCS
	.word ObjInit_DoNothing	; Object $39 - OBJ_PACBOOHOME
	.word ObjInit_DoNothing	; Object $3A - OBJ_JUMPCONTROL
	.word ObjInit_DoNothing	; Object $3B - OBJ_SPECTERCHEEP

    .org ObjectGroup_NormalJumpTable
;****************************** OBJECT GAME LOOP ******************************
	.word ObjNorm_PlatformCopyOscillate	; Object $28 - OBJ_PLATFORM_DIAG2OSC
	.word ObjNorm_Spike		; Object $29 - OBJ_SPIKE
	.word ObjNorm_Spark		; Object $2A - OBJ_SPARK
	.word ObjNorm_DiagonalPodobo	; Object $2B - OBJ_RICOCHET_PODOBO
	.word ObjNorm_PlatformCopyOscillate		; Object $2C - OBJ_PLATFORM_CLOCKOSC
	.word ObjNorm_PlatformCopyOscillate		; Object $2D - OBJ_PLATFORM_CCLOCKOSC
	.word ObjNorm_PirateBoo	; Object $2E - OBJ_PIRATEBOO
	.word ObjNorm_Boo		; Object $2F - OBJ_BOO
	.word ObjNorm_DoNothing	; Object $30 - OBJ_PACBOO
	.word ObjNorm_Phanto		; Object $31 - OBJ_PHANTO
	.word ObjNorm_Phanto		; Object $32 - OBJ_PHANTO_FLIP
	.word ObjNorm_DoNothing		; Object $33 - OBJ_NIPPER
	.word ObjNorm_Toad		; Object $34 - OBJ_TOAD
	.word ObjNorm_Lightning	; Object $35 - OBJ_LIGHTNINGBOLT
	.word ObjNorm_PlatformCopyFollow	; Object $36 - OBJ_PLATFORM_PATH
	.word ObjNorm_DoNothing	; Object $37 - OBJ_PLATFORM_DIAG1OSCS
	.word ObjNorm_DoNothing	; Object $38 - OBJ_PLATFORM_DIAG2OSCS
	.word ObjNorm_DoNothing		; Object $39 - OBJ_PACBOOHOME
	.word ObjNorm_DoNothing	; Object $3A - OBJ_JUMPCONTROL
	.word ObjNorm_DoNothing	; Object $3B - OBJ_SPECTERCHEEP

    .org ObjectGroup_CollideJumpTable
;****************************** OBJECT PLAYER INTERACTION ******************************
	.word Platform_PlayerStand		; Object $28 - OBJ_PLATFORM_DIAG2OSC
	.word ObjHit_DoNothing		; Object $29 - OBJ_SPIKE
	.word Player_GetHurt		; Object $2A - OBJ_SPARK
	.word Player_GetHurt	; Object $2B - OBJ_RICOCHET_PODOBO
	.word Platform_PlayerStand		; Object $2C - OBJ_PLATFORM_CLOCKOSC
	.word Platform_PlayerStand		; Object $2D - OBJ_PLATFORM_CCLOCKOSC
	.word PirateBoo_TakeCoins		; Object $2E - OBJ_PIRATEBOO
	.word Player_GetHurt		; Object $2F - OBJ_BOO
	.word Player_GetHurt		; Object $30 - OBJ_PACBOO
	.word Player_GetHurt		; Object $31 - OBJ_PHANTO
	.word Player_GetHurt		; Object $32 - OBJ_PHANTO_FLIP
	.word Player_GetHurt		; Object $33 - OBJ_NIPPER
	.word ObjHit_DoNothing		; Object $34 - OBJ_TOAD
	.word Player_GetHurt		; Object $35 - OBJ_LIGHTNINGBOLT
	.word Platform_PlayerStand		; Object $36 - OBJ_PLATFORM_PATH
	.word Platform_PlayerStand		; Object $37 - OBJ_PLATFORM_DIAG1OSCS
	.word Platform_PlayerStand		; Object $38 - OBJ_PLATFORM_DIAG2OSCS
	.word ObjHit_DoNothing		; Object $39 - OBJ_PACBOOHOME
	.word ObjHit_DoNothing		; Object $3A - OBJ_JUMPCONTROL
	.word Player_GetHurt		; Object $3B - OBJ_SPECTERCHEEP

    .org ObjectGroup_PatTableSel
;****************************** OBJECT PALETTE/SIZE ******************************
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $28 - OBJ_PLATFORM_DIAG2OSC
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $29 - OBJ_SPIKE
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $2A - OBJ_SPARK
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $2B - OBJ_RICOCHET_PODOBO
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $2C - OBJ_PLATFORM_CLOCKOSC
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $2D - OBJ_PLATFORM_CCLOCKOSC
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $2E - OBJ_PIRATEBOO
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $2F - OBJ_BOO
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $30 - OBJ_PACBOO
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $31 - OBJ_PHANTO
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $32 - OBJ_PHANTO_FLIP
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $33 - OBJ_NIPPER
	.byte OA1_PAL3 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $34 - OBJ_TOAD
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH8	; Object $35 - OBJ_LIGHTNINGBOLT
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $36 - OBJ_PLATFORM_PATH
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $37 - OBJ_PLATFORM_DIAG1OSCS
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $38 - OBJ_PLATFORM_DIAG2OSCS
	.byte OA1_PAL0 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $39 - OBJ_PACBOOHOME
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $3A - OBJ_JUMPCONTROL
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $3B - OBJ_SPECTERCHEEP

    .org ObjectGroup_PatTableSel
;****************************** OBJECT PATTERN TABLE ******************************
	.byte OPTS_NOCHANGE	; Object $28 - OBJ_PLATFORM_DIAG2OSC
	.byte OPTS_SETPT5 | $0E	; Object $29 - OBJ_SPIKE
	.byte OPTS_SETPT5 | $0A	; Object $2A - OBJ_SPARK
	.byte OPTS_SETPT5 | $0A	; Object $2B - OBJ_RICOCHET_PODOBO
	.byte OPTS_NOCHANGE	; Object $2C - OBJ_PLATFORM_CLOCKOSC
	.byte OPTS_NOCHANGE	; Object $2D - OBJ_PLATFORM_CCLOCKOSC
	.byte OPTS_SETPT5 | $37	; Object $2E - OBJ_PIRATEBOO
	.byte OPTS_SETPT5 | $37	; Object $2F - OBJ_BOO
	.byte OPTS_SETPT5 | $37	; Object $30 - OBJ_PACBOO
	.byte OPTS_SETPT5 | $37	; Object $31 - OBJ_PHANTO
	.byte OPTS_SETPT5 | $12	; Object $32 - OBJ_PHANTO_FLIP
	.byte OPTS_SETPT5 | $37	; Object $33 - OBJ_NIPPER
	.byte OPTS_SETPT5 | $37	; Object $34 - OBJ_TOAD
	.byte OPTS_SETPT5 | $1A	; Object $35 - OBJ_LIGHTNINGBOLT
	.byte OPTS_NOCHANGE	; Object $36 - OBJ_PLATFORM_PATH
	.byte OPTS_NOCHANGE	; Object $37 - OBJ_PLATFORM_DIAG1OSCS
	.byte OPTS_NOCHANGE	; Object $38 - OBJ_PLATFORM_DIAG2OSCS
	.byte OPTS_NOCHANGE; Object $39 - OBJ_PACBOOHOME
	.byte OPTS_SETPT6 | $13	; Object $3A - OBJ_JUMPCONTROL
	.byte OPTS_SETPT6 | $13	; Object $3B - OBJ_SPECTERCHEEP

	.org ObjectGroup_KillAction	
;****************************** OBJECT DEATH ROUTINE ******************************
	.byte KILLACT_STANDARD	; Object $28 - OBJ_PLATFORM_DIAG2OSC
	.byte KILLACT_NORMALSTATE	; Object $29 - OBJ_SPIKE
	.byte KILLACT_POOFDEATH	; Object $2A - OBJ_SPARK
	.byte KILLACT_POOFDEATH	; Object $2B - OBJ_RICOCHET_PODOBO
	.byte KILLACT_STANDARD	; Object $2C - OBJ_PLATFORM_CLOCKOSC
	.byte KILLACT_STANDARD	; Object $2D - OBJ_PLATFORM_CCLOCKOSC
	.byte KILLACT_POOFDEATH	; Object $2E - OBJ_PIRATEBOO
	.byte KILLACT_POOFDEATH	; Object $2F - OBJ_BOO
	.byte KILLACT_NORMALSTATE	; Object $30 - OBJ_PACBOO
	.byte KILLACT_NORMALSTATE	; Object $31 - OBJ_PHANTO
	.byte KILLACT_POOFDEATH	; Object $32 - OBJ_PHANTO_FLIP
	.byte KILLACT_STANDARD	; Object $33 - OBJ_NIPPER
	.byte KILLACT_STANDARD	; Object $34 - OBJ_TOAD
	.byte KILLACT_POOFDEATH	; Object $35 - OBJ_LIGHTNINGBOLT
	.byte KILLACT_STANDARD	; Object $36 - OBJ_PLATFORM_PATH
	.byte KILLACT_STANDARD	; Object $37 - OBJ_PLATFORM_DIAG1OSCS
	.byte KILLACT_STANDARD	; Object $38 - OBJ_PLATFORM_DIAG2OSCS
	.byte KILLACT_POOFDEATH	; Object $39 - OBJ_PACBOOHOME
	.byte KILLACT_STANDARD	; Object $3A - OBJ_JUMPCONTROL
	.byte KILLACT_POOFDEATH	; Object $3B - OBJ_SPECTERCHEEP


OG3_POff .func (\1 - ObjectGroup03_PatternSets)

	.org ObjectGroup_PatternStarts	; <-- help enforce this table *here*
;****************************** OBJECT FRAME TABLE ******************************
	.byte OG3_POff(ObjP28), OG3_POff(ObjP29), OG3_POff(ObjP2A), OG3_POff(ObjP2B)
	.byte OG3_POff(ObjP2C), OG3_POff(ObjP2D), OG3_POff(ObjP2E), OG3_POff(ObjP2F)
	.byte OG3_POff(ObjP30), OG3_POff(ObjP31), OG3_POff(ObjP32), OG3_POff(ObjP33)
	.byte OG3_POff(ObjP34), OG3_POff(ObjP35), OG3_POff(ObjP36), OG3_POff(ObjP37)
	.byte OG3_POff(ObjP38), OG3_POff(ObjP39), OG3_POff(ObjP3A), OG3_POff(ObjP3B)


	.org ObjectGroup_PatternSets	; <-- help enforce this table *here*

ObjectGroup03_PatternSets:

ObjP28:
ObjP29:
ObjP2C:
ObjP2D:
	.byte $B1, $B3, $B5, $B7, $B9, $BB, $B1, $BF, $B1, $B3

ObjP2A:
	.byte $AF, $AF, $BF, $BF

ObjP2B:
	.byte $B1, $B3, $B5, $B7, $B9, $BB    


ObjP2E:
	.byte $B5, $B7

ObjP2F:
	.byte $B1, $B3, $91, $93

ObjP30:
	.byte $91, $93, $B1, $B3, $95, $97

ObjP31:
ObjP32:
	.byte $BD, $BF

ObjP33:
	.byte $95, $97, $B5, $B7, $9D, $9F, $BD, $BF, $99, $9B, $B9, $BB

ObjP34:
	.byte $8D, $8F, $89, $8B 

ObjP35:
	.byte $99, $9B
	.byte $95, $97, $AD, $AF, $95, $97

ObjP36:
ObjP37:
ObjP38:    
ObjP39:
ObjP3A:
	.byte $71, $E1, $E3, $E1, $E3, $71
	
ObjP3B:
	.byte $FB, $FD, $71, $71, $FB, $FD, $71, $71, $FB, $FF, $71, $71, $FB, $FF, $71, $71
	
Spike_Frames:
	.byte $04, $04, $04, $04, $04, $02, $02, $03, $03, $03, $03, $02, $02, $02, $02

Spike_XOff:
	.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	.byte $00, $00, $01, $02, $03, $04

Spike_YOff:
	.byte $00, $00, $00, $FE, $FE, $FC, $FA, $F8, $F6, $F4, $F2
	.byte $F0, $EE, $F0, $F0, $F0, $F0

ObjInit_Spike:
	LDA #$04
	STA Objects_SpritesRequested, X

	LDA #ATTR_ICEPROOF
	STA Objects_WeaponAttr, X
	
	LDA #(ATTR_STOMPKICKSOUND)
	STA Objects_BehaviorAttr, X

	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #$40
	STA Objects_Timer, X
	STA Objects_Regen, X

	LDA #$02
	STA Objects_ExpPoints, X
	RTS

Spike_Action = Objects_Data3
Spike_Frame = Objects_Data4
Spike_BallOffset = Objects_Data5

ObjNorm_Spike:
	LDA Objects_State, X
	CMP #OBJSTATE_KILLED
	BNE Spike_Norm1
	
	LDA Spike_Action, X
	BEQ Spike_Die

	LDA <Objects_XZ, X
	STA Debris_X

	LDA <Objects_YZ, X
	STA Debris_Y

	JSR Common_MakeDebris

	LDA #$99
	STA BrickBust_Tile, Y

	LDA #SPR_PAL1
	STA BrickBust_Pal, Y
	
Spike_Die:
	JMP ObjState_PoofDying

Spike_Norm1:
	LDA <Player_HaltGameZ
	BEQ Spike_Norm
	JMP Spike_Draw

Spike_Norm:
	JSR Object_DeleteOffScreen
	JSR Object_CalcBoundBox
	JSR Object_FacePlayer
	JSR Object_AttackOrDefeat

	LDA Spike_Action, X
	JSR DynJump

	.word SpikeWait
	.word SpikeOpenMouth
	.word SpikeThrowSpike

SpikeWait:
	LDA #$00
	STA Objects_Frame, X

	LDA Objects_Timer, X
	BNE SpikeWait1

	INC Spike_Action, X

	LDA #$60
	STA Objects_Timer, X

SpikeWait1:
	LDA Object_SpriteRAMOffset,X
	JMP Spike_Draw

SpikeOpenMouth:
	INC Spike_Frame, X
	INC Spike_BallOffset, X

	LDA Spike_BallOffset, X
	CMP #$20
	BCC SpikeOpenMouth0

	LDA #$20
	STA Spike_BallOffset, X

	LDA Objects_Timer, X
	BNE SpikeOpenMouth0

	INC Spike_Action, X

SpikeOpenMouth0:
	LDA Spike_Frame, X
	CMP #$20
	BCS SpikeOpenMouth1

	LSR A
	LSR A
	LSR A
	AND #$03
	STA Objects_Frame, X

SpikeOpenMouth1:
	JMP Spike_Draw
	
SpikeThrow_XVel:
	.byte $10, $18

SpikeThrow_YVel:
	.byte $D0, $C0

SpikeThrowSpike:
	LDA Objects_SpritesHorizontallyOffScreen,X
	ORA Objects_SpritesHorizontallyOffScreen,X
	BNE Spike_Draw

	JSR Object_FindEmptyX
	BCC Spike_Draw

	LDY <CurrentObjectIndexZ

	LDA #OBJ_SPIKEBALL
	STA Objects_ID, X

	LDA #OBJSTATE_FRESH
	STA Objects_State, X

	LDA Objects_YZ, Y
	SUB #$12
	STA <Objects_YZ, X

	LDA Objects_YHiZ, Y
	SBC #$00
	STA <Objects_YHiZ, X

	LDA Objects_XZ, Y
	STA <Objects_XZ, X

	LDA Objects_XHiZ, Y
	STA <Objects_XHiZ, X

	
	LDA RandomN, X
	AND #$01
	TAY

	LDA SpikeThrow_XVel, Y
	STA <Objects_XVelZ, X

	LDY CurrentObjectIndexZ

	LDA Objects_Orientation, Y
	AND #SPR_HFLIP
	BNE Spike_BallNoFlip

	LDA <Objects_XVelZ, X
	EOR #$FF
	ADD #$01
	STA <Objects_XVelZ, X

Spike_BallNoFlip:
	LDA RandomN, X
	AND #$10
	LSR A
	LSR A
	LSR A
	LSR A
	TAY

	LDA SpikeThrow_YVel, Y
	STA <Objects_YVelZ, X

	JSR Object_CalcBoundBox

	LDX <CurrentObjectIndexZ
	LDA #$00
	STA Spike_Action, X
	STA Spike_BallOffset, X
	STA Spike_Frame, X

	LDA #$40
	STA Objects_Timer, X

Spike_Draw:
	JSR Object_Draw
	
	LDA Spike_Action, X
	BEQ Spike_Draw1

	LDY Object_SpriteRAMOffset, X

	LDA #$95
	STA Sprite_RAMTile + 8, Y
	STA Sprite_RAMTile + 12, Y

	LDA #SPR_PAL1
	STA Sprite_RAMAttr + 8, Y

	LDA #(SPR_PAL1 | SPR_HFLIP)
	STA Sprite_RAMAttr + 12, Y

	LDA Spike_BallOffset, X
	LSR A
	STA <Temp_Var1

	LDX <CurrentObjectIndexZ
	LDA Objects_Orientation, X
	BEQ Spike_BallRight

	LDX <Temp_Var1

	LDA Sprite_RAMX, Y
	SUB Spike_XOff, X
 	BCC Spike_BallUnderflow2

	STA Sprite_RAMX + 8, Y
	
	LDA Sprite_RAMY, Y
	ADD Spike_YOff, X
	STA Sprite_RAMY + 8, Y

	LDA Sprite_RAMX + 8, Y
	ADD #$08
	BCS Spike_BallUnderflow2
	
	STA Sprite_RAMX + 12, Y

	LDA Sprite_RAMY, Y
	ADD Spike_YOff, X
	STA Sprite_RAMY + 12, Y

Spike_BallUnderflow2:
	RTS

Spike_BallRight:
	LDX <Temp_Var1

	LDA Sprite_RAMX, Y
	ADD Spike_XOff, X
	BCS Spike_Draw1
	STA Sprite_RAMX + 8, Y

	LDA Sprite_RAMY, Y
	ADD Spike_YOff, X
	STA Sprite_RAMY + 8, Y

	LDA Sprite_RAMX + 8, Y
	ADD #$08
	BCS Spike_Draw1
	
	STA Sprite_RAMX + 12, Y

	LDA Sprite_RAMY, Y
	ADD Spike_YOff, X
	STA Sprite_RAMY + 12, Y
Spike_Draw1:
	RTS


Spark_Direction = Objects_Data2
Spark_Speed = Objects_Data3
Spark_HitDetect = Objects_Data4

ObjInit_Spark:
	LDA #BOUND16x16BLOCK
	STA Objects_BoundBox, X

	LDA #(ATTR_FIREPROOF | ATTR_ICEPROOF | ATTR_HAMMERPROOF | ATTR_TAILPROOF | ATTR_STOMPPROOF)
	STA Objects_WeaponAttr, X

	LDA #$02
	STA Objects_Health, X

	LDA Objects_Property, X
	AND #$01
	STA Spark_Direction, X

	LDA Objects_Property, X
	AND #$FE
	LSR A
	STA Spark_Speed, X

	LDA #$00
	STA Spark_HitDetect, X
	RTS

; this basically detects certain corners based on current movement direction
SparkDetects:
	.byte (HIT_RIGHTWALL | HIT_GROUND), (HIT_LEFTWALL | HIT_GROUND), (HIT_CEILING | HIT_LEFTWALL), (HIT_RIGHTWALL | HIT_CEILING)
	.byte (HIT_LEFTWALL | HIT_GROUND), (HIT_RIGHTWALL | HIT_GROUND), (HIT_CEILING | HIT_RIGHTWALL), (HIT_LEFTWALL | HIT_CEILING)

SparkYVel:
	.byte $10, $10, $F0, $F0
	.byte $10, $10, $F0, $F0

SparkXVel:
	.byte $10, $F0, $F0, $10
	.byte $F0, $10, $10, $F0

ObjNorm_Spark:
	LDA <Player_HaltGameZ
	BEQ SparkNorm

	JMP Spark_Draw

SparkNorm:
	JSR Object_DeleteOffScreen

	LDA Spark_Speed, X
	STA TempA

ObjNorm_Spark1:
	JSR Spark_Move
	DEC TempA
	BPL ObjNorm_Spark1

	JSR Object_AttackOrDefeat
	JMP Spark_Animate

Spark_Move:
	LDA Spark_Direction, X
	ASL A
	ASL A
	ORA Spark_HitDetect, X
	TAY

	LDA SparkXVel, Y
	STA <Objects_XVelZ, X
	STA Objects_EffectiveXVel,X

	LDA SparkYVel, Y
	STA <Objects_YVelZ, X

	TYA
	AND #$01			; only odd numbered states move vertically, even move horzontally
	BNE NoSparkXVel

	LDA <Objects_YZ, X
	AND #$0F
	BNE ApplySparkX

	JSR Object_ApplyYVel_NoGravity

ApplySparkX:
	JSR Object_ApplyXVel
	JSR Object_CalcBoundBox
	JSR Object_DetectTiles

	LDA Objects_TilesDetectZ, X
	JSR Object_CheckForeground

	LDA <Objects_XZ, X
	AND #$0F
	CMP #$0F
	BEQ SparkHitDetection

	CMP #$01
	BEQ SparkHitDetection
	BNE KeepGoing

NoSparkXVel:
	LDA <Objects_XZ, X
	AND #$0F
	BNE ApplySparkY

	JSR Object_ApplyXVel

ApplySparkY:
	JSR Object_ApplyYVel_NoGravity
	JSR Object_CalcBoundBox
	JSR Object_DetectTiles

	LDA Objects_TilesDetectZ, X
	JSR Object_CheckForeground

	LDA <Objects_YZ, X
	AND #$0F
	CMP #$0E
	BEQ SparkHitDetection

	CMP #$01
	BEQ SparkHitDetection
	BNE KeepGoing

SparkHitDetection:
	LDA Spark_Direction, X		; var1 = 0 -> clockwise movement, var1 = 1 -> counter clockwise
	ASL A
	ASL A
	ORA Spark_HitDetect, X
	TAY

	LDA <Objects_TilesDetectZ, X
	AND SparkDetects, Y  
	BNE WallCeilGrndDet

	LDA Spark_HitDetect, X	; neither corner was detected (no ground or wall) so we need to wrap around the tile
	ADD #$01
	AND #$03
	STA Spark_HitDetect, X
	RTS

WallCeilGrndDet:
	CMP SparkDetects, Y
	BNE KeepGoing
	
	LDA Spark_HitDetect, X		; both corners were detected, we need to crawl against the tile
	SUB #$01
	AND #$03
	STA Spark_HitDetect, X

KeepGoing:						; if we only detected one ground or wall we keep going in the same direction
	RTS

Spark_Animate:
	LDA <Counter_1
	AND #$04
	LSR A
	LSR A
	STA Objects_Frame, X

Spark_Draw:
	LDA Object_SpriteRAMOffset, X
	JMP Object_DrawMirrored    


Ricochet_Direction = Objects_Data4

Diagonal_PodoboInitXVel:
	.byte $F0, $F0, $10, $10

Diagonal_PodoboInitYVel:
	.byte $10, $F0, $F0, $10

Diagonal_PodoboSpriteFlips:
	.byte SPR_VFLIP, $00, SPR_HFLIP, SPR_VFLIP | SPR_HFLIP

ObjInit_DiagonalPodobo:
	LDA #(ATTR_FIREPROOF | ATTR_HAMMERPROOF | ATTR_NINJAPROOF | ATTR_TAILPROOF | ATTR_DASHPROOF | ATTR_STOMPPROOF)
	STA Objects_WeaponAttr, X

	LDA #(ATTR_SHELLPROOF | ATTR_NOICE )
	STA Objects_BehaviorAttr, X

	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA Objects_Property, X
	TAY

	LDA Diagonal_PodoboInitXVel, Y
	STA Objects_XVelZ, X

	LDA Diagonal_PodoboInitYVel, Y
	STA Objects_YVelZ, X

	LDA Diagonal_PodoboSpriteFlips, Y
	STA Objects_Orientation, X

	LDA #$01
	STA Objects_Health, X
	RTS

ObjNorm_DiagonalPodobo:
	LDA <Player_HaltGameZ
	BNE ObjNorm_DiagonalPodoboEnd

	JSR Object_DeleteOffScreen
	
	LDA Ricochet_Direction, X
	CMP #$0A
	BCS ObjNorm_DiagonalPodobo0

	INC Ricochet_Direction, X
	BNE ObjNorm_DiagonalPodobo01

ObjNorm_DiagonalPodobo0
	LDA #$00
	STA Ricochet_Direction, X
	
ObjNorm_DiagonalPodobo01:
	LDA Ricochet_Direction, X
	LSR A
	LSR A
	STA Objects_Frame, X

	INC Object_DisableWater
	JSR Object_ApplyXVel
	JSR Object_ApplyYVel_NoGravity
	
	JSR Object_CalcBoundBox
	JSR Object_DetectTiles
	JSR Object_CheckForeground

	LDA <Objects_YZ, X
	AND #$0F
	BNE Podobo_RichocetCheck

	LDA Object_BodyTileProp, X
	AND #TILE_PROP_WATER
	BNE Podobo_Richocet

Podobo_RichocetCheck:
	LDA <Objects_TilesDetectZ,X
	AND #(HIT_GROUND | HIT_CEILING)
	BEQ ObjNorm_DiagonalPodobo1
	

Podobo_Richocet:
	LDA <Objects_YVelZ,X	 
	
	EOR #$FF
	ADD #$01
	
	STA <Objects_YVelZ,X
	
	LDA Objects_Orientation, X
	EOR #SPR_VFLIP
	STA Objects_Orientation, X

ObjNorm_DiagonalPodobo1:
	LDA <Objects_TilesDetectZ,X
	AND #(HIT_LEFTWALL | HIT_RIGHTWALL)
	BEQ ObjNorm_DiagonalPodobo2
	
	LDA <Objects_XVelZ,X	 
	
	EOR #$FF
	ADD #$01
	
	STA <Objects_XVelZ, X

	LDA Objects_Orientation, X
	EOR #SPR_HFLIP
	STA Objects_Orientation, X

ObjNorm_DiagonalPodobo2:
	JSR Object_AttackOrDefeat

ObjNorm_DiagonalPodoboEnd:
	JMP Object_Draw

ObjInit_WoodenPlatCopyDiagonal2:
	JSR ObjInit_PlatformCommon
	LDA #$03
	STA Objects_Property, X
	JMP InitPatrol_NoTimers

ObjInit_WoodenPlatCopyCCW:
	JSR ObjInit_PlatformCommon
	LDA #$04
	STA Objects_Property, X
	JMP InitPatrol_NoTimers

ObjInit_WoodenPlatCopyCW:
	JSR ObjInit_PlatformCommon
	LDA #$05
	STA Objects_Property, X
	JMP InitPatrol_NoTimers
    

ObjInit_PlatformCopyFollow:
	JMP ObjInit_PlatformCopyCommon    


ObjNorm_PlatformCopyFollow:
	LDA <Player_HaltGameZ
	BNE ObjNorm_PlatformCopyFollow1	 ; If gameplay halted, Delete if off-screen, otherwise draw wide 48x16 sprite

	JSR PlatformCopyFollow_CheckOffScreen

	LDA #$00
	STA PlatformCopy_MadeContact, X

	JSR Object_CalcBoundBox
	JSR Object_InteractWithPlayer

	LDA PlatformCopy_SteppedOn, X
	BEQ PlatformCopyFollow_NoMove

	LDA PlatformCopy_Fall, X
	BEQ PlatformCopyFollow_MoveNormal

	JSR Object_ApplyY_With_Gravity
	JMP PlatformCopyFollow_NoMove

PlatformCopyFollow_MoveNormal:
	JSR Object_ApplyXVel
	JSR Object_ApplyYVel_NoGravity	

PlatformCopyFollow_NoMove:
	JSR PlatformCopy_ContactCheck

	LDA PlatformCopy_SteppedOn, X
	BEQ ObjNorm_PlatformCopyFollow1
	
	LDA <Objects_XZ, X
	AND #$0F
	BNE ObjNorm_PlatformCopyFollow1

	LDA <Objects_YZ, X
	AND #$0F
	CMP #$0E
	BNE ObjNorm_PlatformCopyFollow1

	LDA Objects_XVelFrac, X
	ORA Objects_YVelFrac, X
	BNE ObjNorm_PlatformCopyFollow1

	JSR PlatformCopy_FollowBlocks

ObjNorm_PlatformCopyFollow1:
	LDA Objects_SpriteAttributes, X
	ORA #SPR_BEHINDBG
	STA Objects_SpriteAttributes, X

	JMP PlatformCopy_Draw

PlatformCopyFollow_CheckOffScreen:
	JSR Object_DeleteOffScreen
	
	LDY Objects_SpawnIdx,X
	LDA Level_ObjectsSpawned,Y
	ORA #$80
	STA Level_ObjectsSpawned,Y
	RTS

PlatformCopyTimers:
	.byte $01, $11, $21, $31, $41, $51, $61, $71


PlatformCopy_XOffsets:
	.byte $28, $18, $08, $18

PlatformCopy_YOffsets:
	.byte $08, $18, $08, $F8
	.byte $00, $00, $00, $FF

PlatformCopy_XVel:
	.byte $08, $00, $F8, $00

PlatformCopy_YVel:
	.byte $00, $08, $00, $F8

PlatformCopy_Index = Objects_Data1
PlatformCopy_Ticker = Objects_Data2
PlatformCopy_Regen = Objects_Data6
PlatformCopy_NotBehind = Objects_Data7
PlatformCopy_MaxFall = Objects_Data8
PlatformCopy_StartY = Objects_Data9
PlatformCopy_StartYHi = Objects_Data10    

PlatformCopy_FollowBlocks:
	LDA #$00
	STA PlatformCopy_Fall, X

	LDA #$03
	STA PlatformCopy_Index, X

PlatformCopy_CheckBlocks:
	LDY PlatformCopy_Index, X
	LDA PlatformCopy_XOffsets, Y
	ADD <Objects_XZ, X
	STA Block_DetectX

	LDA <Objects_XHiZ, X
	ADC #$00
	STA Block_DetectXHi

	LDA PlatformCopy_YOffsets, Y
	ADD <Objects_YZ, X
	STA Block_DetectY

	LDA PlatformCopy_YOffsets + 4, Y
	ADC <Objects_YHiZ, X
	STA Block_DetectYHi

	JSR Object_DetectTile
	CMP #TILE_PROP_ENEMY
	BEQ PlatformCopy_SetVel

	DEC PlatformCopy_Index, X
	BPL PlatformCopy_CheckBlocks
	
	LDA #$01
	STA PlatformCopy_Fall, X

	LDA #$00
	STA <Objects_XVelZ, X
	RTS

PlatformCopy_SetVel:
	LDA Tile_LastValue
	AND #$C0
	ORA #$01
	JSR Object_ChangeBlock

	LDY PlatformCopy_Index, X
	LDA PlatformCopy_XVel, Y
	STA <Objects_XVelZ, X

	LDA PlatformCopy_YVel, Y
	STA <Objects_YVelZ, X
	RTS    

PlatformCopy_StartX = Objects_Data3
PlatformCopy_StartXHi = Objects_Data4
PlatformCopy_SteppedOn = Objects_Data5
PlatformCopy_MadeContact = Objects_Data6
PlatformCopy_Fall = Objects_Data7

ObjInit_PlatformCopyCommon:
	LDA #$06
	STA Objects_SpritesRequested, X

	LDA #BOUND48x16
	STA Objects_BoundBox, X

	JSR Object_NoInteractions

	LDA <Objects_XZ, X
	STA PlatformCopy_StartX, X

	LDA <Objects_XHiZ, X
	STA PlatformCopy_StartXHi, X

	LDA <Objects_YZ, X
	SUB #$02
	STA <Objects_YZ, X

	LDA <Objects_YHiZ, X
	SBC #$00
	STA <Objects_YHiZ, X

	LDY Objects_Property, X
	LDA PlatformCopyTimers, Y
	STA Patrol_ResetTimer, X
	RTS    


ObjNorm_PlatformCopyOscillate:
	LDA <Player_HaltGameZ
	BNE ObjNorm_PlatformCopyOscillate1	 ; If gameplay halted, Delete if off-screen, otherwise draw wide 48x16 sprite

	JSR Object_CalcBoundBoxForced
	
	LDA #$00
	STA PlatformCopy_MadeContact, X

	JSR Object_InteractWithPlayer
	JSR DoPatrol
	JSR PlatformCopy_ContactCheck

	LDA <Objects_XZ, X
	CMP PlatformCopy_StartX, X
	BNE ObjNorm_PlatformCopyOscillate1

	LDA <Objects_XHiZ, X
	CMP PlatformCopy_StartXHi, X

	BNE ObjNorm_PlatformCopyOscillate1


	JSR Object_DeleteOffScreen

ObjNorm_PlatformCopyOscillate1:
	LDA Objects_SpriteAttributes, X
	ORA #SPR_BEHINDBG
	STA Objects_SpriteAttributes, X
	JMP PlatformCopy_Draw
	
ObjInit_WoodenPlatCopy:
	RTS		 ; Return    


PlatformCopy_Draw:
	LDA #$00
	STA Objects_Orientation, X
	
	LDA Objects_SpritesVerticallyOffScreen,X
	BEQ PlatformCopy_DoDraw

	RTS

PlatformCopy_DoDraw:
	INC <Objects_YZ, X
	JSR Object_DrawMirrored

	DEC <Objects_YZ, X

	LDA Objects_SpritesHorizontallyOffScreen,X
	AND #SPRITE_2_HINVISIBLE
	BNE PlatformCopy_Draw1

	LDA <Objects_SpriteX, X
	ADD #$10
	STA Sprite_RAMX + 8, Y

	LDA <Objects_SpriteY, X
	STA Sprite_RAMY + 8, Y

	LDA Sprite_RAMAttr, Y
	STA Sprite_RAMAttr + 8, Y

	LDA Sprite_RAMTile, Y
	STA Sprite_RAMTile + 8, Y

PlatformCopy_Draw1:
	LDA Objects_SpritesHorizontallyOffScreen,X
	AND #SPRITE_3_HINVISIBLE
	BNE PlatformCopy_Draw2

	LDA <Objects_SpriteX, X
	ADD #$18
	STA Sprite_RAMX + 12, Y

	LDA <Objects_SpriteY, X
	STA Sprite_RAMY + 12, Y

	LDA Sprite_RAMAttr + 4, Y
	STA Sprite_RAMAttr + 12, Y

	LDA Sprite_RAMTile + 4, Y
	STA Sprite_RAMTile + 12, Y

PlatformCopy_Draw2:
	LDA Objects_SpritesHorizontallyOffScreen,X
	AND #SPRITE_4_HINVISIBLE
	BNE PlatformCopy_Draw3

	LDA <Objects_SpriteX, X
	ADD #$20
	STA Sprite_RAMX + 16, Y

	LDA <Objects_SpriteY, X
	STA Sprite_RAMY + 16, Y

	LDA Sprite_RAMAttr, Y
	STA Sprite_RAMAttr + 16, Y

	LDA Sprite_RAMTile, Y
	STA Sprite_RAMTile + 16, Y

PlatformCopy_Draw3:
	
	LDA Objects_SpritesHorizontallyOffScreen,X
	AND #SPRITE_5_HINVISIBLE
	BNE PlatformCopy_Draw4

	LDA <Objects_SpriteX, X
	ADD #$28
	STA Sprite_RAMX + 20, Y

	LDA <Objects_SpriteY, X
	STA Sprite_RAMY + 20, Y

	LDA Sprite_RAMAttr + 4, Y
	STA Sprite_RAMAttr + 20, Y

	LDA Sprite_RAMTile + 4, Y
	STA Sprite_RAMTile + 20, Y

PlatformCopy_Draw4:
	RTS		 ; Return    


PlatformCopy_PlayerOffset:
	.byte $01, $00
	.byte $00, $00

PlatformCopy_ContactCheck:
	LDA Platform_MadeContact, X
	BEQ PlatformCopy_CheckRTS
	
	LDA <Objects_YZ,X	 
	SUB #30
	STA <Player_Y

	LDA <Objects_YHiZ,X
	SBC #$00
	STA <Player_YHi

	LDA #$00
	STA <Player_YVel
	STA Player_InAir

	LDA <Objects_XVelZ, X
	STA Player_CarryXVel
	
PlatformCopy_CheckRTS:
	RTS

PirateBoo_CoinTimer = Objects_Data1

ObjInit_PirateBoo:
	LDA #(ATTR_FIREPROOF | ATTR_ICEPROOF | ATTR_HAMMERPROOF | ATTR_TAILPROOF | ATTR_DASHPROOF | ATTR_STOMPPROOF | ATTR_STOMPPROOF)
	STA Objects_WeaponAttr, X

	LDA #(ATTR_EXPLOSIONPROOF | ATTR_SHELLPROOF)
	STA Objects_BehaviorAttr, X

	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #$E8
	STA ChaseVel_LimitLo, X

	LDA #$18
	STA ChaseVel_LimitHi, X

	LDA Objects_Property, X
	BEQ PriateBoo_InitRTS

	LDA #SPR_BEHINDBG
	STA Objects_SpriteAttributes, X
PriateBoo_InitRTS:
	RTS

ObjNorm_PirateBoo:
	LDA <Player_HaltGameZ
	BNE PirateBoo_Draw

	JSR Object_CalcBoundBox
	JSR Object_ChasePlayer
	JSR Object_FaceDirectionMoving
	JSR Object_InteractWithPlayer	

PirateBoo_Draw:
	JMP Object_Draw 	

PirateBoo_TakeCoins:
	INC PirateBoo_CoinTimer, X
	LDA PirateBoo_CoinTimer, X
	AND #$03
	BNE PirateBoo_Draw

	INC Coins_Lost

	LDA Sound_QLevel1
	ORA #SND_LEVELCOIN
	STA Sound_QLevel1
	STA Force_Coin_Update
	BNE PirateBoo_Draw
	
Boo_PlayerCheck:
	.byte $00, SPR_HFLIP

Boo_Speeds:
	.byte $F0, $E0
	.byte $10, $20

ObjNorm_Boo:
	LDA <Player_HaltGameZ
	BNE Boo_Draw

	JSR Object_DeleteOffScreen

	LDY #$00
	LDA DayNight
	BEQ Boo_SetLimits

	INY

Boo_SetLimits:
	LDA Boo_Speeds, Y
	STA ChaseVel_LimitLo, X

	LDA Boo_Speeds + 2, Y
	STA ChaseVel_LimitHi, X

	JSR Object_FacePlayer
	JSR Object_CalcBoundBox	
	JSR Object_AttackOrDefeat
	
	LDA DayNight
	BNE Boo_Chase

	LDA Boo_PlayerCheck, Y
	CMP <Player_FlipBits
	BNE Boo_Still

Boo_Chase:
	JSR Object_ChasePlayer

	LDA #$01
	STA Objects_Frame, X
	BNE Boo_Draw

Boo_Still:
	LDA #$00
	STA Objects_Frame, X
	STA <Objects_XVelZ, X
	STA <Objects_YVelZ, X

Boo_Draw:
	JMP Object_Draw

    
ObjInit_Boo:
	LDA #(ATTR_FIREPROOF | ATTR_ICEPROOF | ATTR_HAMMERPROOF | ATTR_TAILPROOF | ATTR_DASHPROOF | ATTR_STOMPPROOF | ATTR_STOMPPROOF)
	STA Objects_WeaponAttr, X

	LDA #(ATTR_EXPLOSIONPROOF | ATTR_SHELLPROOF)
	STA Objects_BehaviorAttr, X

	LDA #BOUND16x16
	STA Objects_BoundBox, X

	RTS

Boo_CheckPlayerSight:
	LDA DayNight
	BNE PRG002_A8CC
	JSR Object_FacePlayer
	CLC
	RTS

PRG002_A8CC:
	SEC
	RTS		 ; Return


ObjInit_Phanto:

	LDA #BOUND16x16
	STA Objects_BoundBox, X

	JMP Object_NoInteractions

ObjInit_PhantoFlip:

	RTS		 ; Return    


Phanto_ChaseTimer = Objects_Data3
Phanto_Action = Objects_Data4
Phanto_Shaker = Objects_Data5

ObjNorm_Phanto:
	LDA <Player_HaltGameZ
	BEQ ObjNorm_Phanto1
	
	JMP Phanto_Draw

ObjNorm_Phanto1:
	LDA Phanto_Action, X
	JSR DynJump

	.word Phanto_Wait
	.word Phanto_Wake
	.word Phanto_Chase
	.word Phanto_Hover

Phanto_FindKey:
	LDY #07

Phanto_KeyLooking:
	LDA Objects_ID, Y
	CMP #OBJ_KEY
	BEQ Phanto_KeyFound

	DEY
	BPL Phanto_KeyLooking

Phanto_KeyNotFound:
	CLC
	RTS

Phanto_KeyFound:
	LDA Objects_BeingHeld, Y
	BEQ Phanto_KeyNotFound

	SEC
	RTS

Phanto_Wait:
	JSR Phanto_FindKey
	BCC Phanto_Wait_End

	INC Phanto_Action, X

	LDA #$40
	STA Objects_Timer, X

Phanto_Wait_End:
	JMP Object_Draw

Phanto_Wake:
	LDA Objects_Timer, X
	BNE Phanto_Wake1

	INC Phanto_Action, X
	
	LDA #(ATTR_STOMPPROOF)
	STA Objects_WeaponAttr, X

Phanto_Wake1:
	JSR Object_Draw

	INC Phanto_Shaker, X
	LDA Phanto_Shaker, X
	AND #$08
	BNE Phanto_Wake2

	LDA #SND_LEVELCRUMBLE
	STA Sound_QLevel2

Phanto_Wake2:
	LDA Phanto_Shaker, X
	AND #$01
	BNE Phanto_Wake_End
	
	TYA
	TAX
	
	INC  Sprite_RAMX, X
	INC  Sprite_RAMX + 4,X

Phanto_Wake_End:
	RTS

Phanto_Chase:
	LDA Objects_State, X
	CMP #OBJSTATE_KILLED
	BNE Phanto_ChaseNormal

	JSR Phanto_Poof
	
	LDA #$FF
	STA Objects_Timer, X
	
	LDA #OBJSTATE_NORMAL
	STA Objects_State, X
	RTS

Phanto_ChaseNormal:	
	JSR Phanto_FindKey
	BCS Phanto_ChaseHover

	JMP Phanto_Poof

Phanto_ChaseHover:
	LDA #$D0
	STA ChaseVel_LimitLo, X

	LDA #$30
	STA ChaseVel_LimitHi, X

	JSR Object_ChasePlayerX

	LDA #$F0
	STA ChaseVel_LimitLo, X

	LDA #$10
	STA ChaseVel_LimitHi, X
	
	JSR Object_ChasePlayerY

	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat

Phanto_Draw:
	LDA #$00
	STA Objects_Frame, X

	JMP Object_Draw

Phanto_Poof:
	LDA Objects_SpritesHorizontallyOffScreen, X
	ORA Objects_SpritesVerticallyOffScreen, X
	BNE Phanto_SetHover

	LDA <Objects_XZ, X
	STA Poof_X

	LDA <Objects_YZ, X
	STA Poof_Y

	LDA #$FF
	STA <Objects_YHiZ, X
	
	JSR Common_MakePoof

Phanto_SetHover:
	LDA #$03
	STA Phanto_Action, X
	RTS

Phanto_HoverStartX:
	.byte $20, $E0

Phanto_Hover:
	LDA Objects_Timer, X
	BNE Phanto_HoverRTS

	JSR Phanto_FindKey
	BCC Phanto_HoverRTS

	LDY Player_Direction

	LDA <Horz_Scroll
	ADD Phanto_HoverStartX, Y
	STA <Objects_XZ, X
	STA <Poof_X

	LDA <Horz_Scroll_Hi
	ADC #$00
	STA <Objects_XHiZ, X

	LDA <Vert_Scroll
	ADD #$80
	STA <Objects_YZ, X
	STA <Poof_Y

	LDA <Vert_Scroll_Hi
	ADC #$00
	STA <Objects_YHiZ, X

	LDA #$00
	STA <Objects_XVelZ, X
	STA <Objects_YVelZ, X

	LDA #$02
	STA Phanto_Action, X
	JMP Common_MakePoof

Phanto_HoverRTS:
	RTS
    

ObjInit_Toad:

ObjNorm_Toad:
 
;	; Returns 'Y' as offset to Mario's or Luigi's inventory memory



Lightning_Action = Objects_Data1
Lightning_WaterColor = Objects_Data2


ObjInit_Lightning:
	JSR Object_NoInteractions
	LDA #BOUND16x16
	STA Objects_BoundBox, X
	RTS

ObjNorm_Lightning;
	LDA Lightning_Action, X
	JSR DynJump

	.word Lightning_Fall
	.word Lightning_Electricuting
	
Lightning_Fall:
	LDA <Player_HaltGameZ
	BEQ Lightning_Normal
	JMP Lightning_Draw

Lightning_Normal:
	JSR Object_DeleteOffScreen

	LDA #$00
	STA <Objects_XVelZ, X

	LDA #$30
	STA <Objects_YVelZ, X

	JSR Object_CalcBoundBox
	JSR Object_Move
	JSR Object_DetectTiles
	JSR Object_InteractWithPlayer

	LDA Objects_SpritesHorizontallyOffScreen,X
	ORA Objects_SpritesVerticallyOffScreen,X
	BNE Lightning_GroundCheck

	LDA Object_VertTileProp, X
	CMP #(TILE_PROP_SOLID_ALL | TILE_PROP_ENEMYSOLID)
	BNE Lightning_GroundCheck

	LDA Objects_BoundBottom, X
	STA Block_DetectY
	AND #$F0
	STA Debris_Y

	LDA Objects_BoundBottomHi, X
	STA Block_DetectYHi

	LDA <Objects_XZ, X
	ADD #$08
	STA Block_DetectX
	AND #$F0
	STA Debris_X

	LDA <Objects_XHiZ, X
	ADC #$00
	STA Block_DetectXHi

	LDA Object_VertTileValue, X
	ADD #$01
	JSR Object_ChangeBlock

	JSR Common_MakeBricks
	JMP Lightning_Draw

Lightning_GroundCheck:
	LDA <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ Lightning_CheckWater

	LDA Objects_SpritesHorizontallyOffScreen,X
	ORA Objects_SpritesVerticallyOffScreen,X
	BNE Lightning_Poof

	LDA <Objects_YZ, X
	AND #$F0
	ORA #$06
	STA <Objects_YZ, X

	JSR Object_PrepProjectile
	
	LDA #SOBJ_LIGHTNINGBOLT
	STA SpecialObj_ID, Y

	LDA #$C0
	STA SpecialObj_XVel,Y

	LDA <Objects_XZ, X
	STA SpecialObj_X,Y

	LDA <Objects_XHiZ, X
	STA SpecialObj_XHi,Y

	LDA <Objects_YZ, X
	STA SpecialObj_Y,Y

	LDA <Objects_YHiZ, X
	STA SpecialObj_YHi,Y

	JSR Object_PrepProjectile
	
	LDA #SOBJ_LIGHTNINGBOLT
	STA SpecialObj_ID, Y

	LDA #$30
	STA SpecialObj_XVel,Y

	LDA <Objects_XZ, X
	STA SpecialObj_X,Y

	LDA <Objects_XHiZ, X
	STA SpecialObj_XHi,Y

	LDA <Objects_YZ, X
	STA SpecialObj_Y,Y

	LDA <Objects_YHiZ, X
	STA SpecialObj_YHi,Y

	LDA #$02
	STA SpecialObj_Data1, Y

Lightning_Poof:
	JMP Object_PoofDie

Lightning_CheckWater:
	LDA Object_VertTileProp, X
	CMP #TILE_PROP_WATER
	BEQ Lightning_Electricute

	CMP #(TILE_PROP_WATER | TILE_PROP_FOREGROUND)
	BNE Lightning_Draw

Lightning_Electricute:
	LDA #$01
	STA Lightning_Action, X
	
	LDA #$20
	STA Objects_Timer, X

	LDA Palette_Buffer + $0F
	STA Lightning_WaterColor, X
	
Lightning_Draw:
	JSR Object_Draw

Lightning_RTS:
	RTS

Lightning_Electricuting:
	LDA Objects_Timer, X
	BNE Lightning_Flash

	JMP Object_Delete

Lightning_Flash:
	AND #$02
	BNE Lightning_FlashWhite

	LDA Lightning_WaterColor, X
	STA Palette_Buffer + $0F
	BNE Lightning_PlayerHurt

Lightning_FlashWhite:
	LDA #$30
	STA Palette_Buffer + $0F

Lightning_PlayerHurt:
	LDA Player_InWater
	BEQ Lightning_RTS

	JSR Player_GetHurt
	RTS 
	
    .org ObjectGroup_InitJumpTable
;****************************** OBJECT INITIALIZATION ******************************
    .word ObjInit_DoNothing	; Object $3C - OBJ_PLATFORM_PATHFOLLOW
	.word ObjInit_DoNothing		; Object $3D - OBJ_NIPPERFIREBREATHER
	.word ObjInit_DoNothing	; Object $3E - OBJ_PLATFORMFLOATS
	.word ObjInit_DryBones	; Object $3F - OBJ_DRYBONES
	.word ObjInit_PipeBlock	; Object $40 - OBJ_PIPEBLOCK
	.word ObjInit_PiranhaGrower		; Object $41 - OBJ_PIRANHAGROWER
	.word ObjInit_DryCheep	; Object $42 - OBJ_FLAMINGCHEEP
	.word ObjInit_BeachedCheep	; Object $43 - OBJ_BEACHEDCHEEP
	.word ObjInit_PlatformUnstable	; Object $44 - OBJ_PLATFORMUNSTABLE
	.word ObjInit_DoNothing		; Object $45 - OBJ_PWING
	.word ObjInit_Snifit	; Object $46 - OBJ_SNIFIT
	.word ObjInit_Birdo		; Object $47 - OBJ_BIRDO
	.word ObjInit_Ninji	; Object $48 - OBJ_NINJI
	.word ObjInit_DoNothing	; Object $49 - OBJ_FLOATINGBGCLOUD
	.word ObjInit_MagicStar1	; Object $4A - OBJ_MAGICSTAR
	.word ObjInit_MagicStar2	; Object $4B - OBJ_MAGICSTAR
	.word ObjInit_MagicStar3	; Object $4C - OBJ_MAGICSTAR
	.word ObjInit_JumpControl	; Object $4D
	.word ObjInit_DoNothing		; Object $4E
	.word ObjInit_DoNothing		; Object $4F - OBJ_CHAINCHOMPFREE

    .org ObjectGroup_NormalJumpTable
;****************************** OBJECT GAME LOOP ******************************
	.word ObjNorm_PlatformUnstable	; Object $3C - OBJ_PLATFORM_PATHFOLLOW
	.word ObjNorm_DoNothing	; Object $3D - OBJ_NIPPERFIREBREATHER
	.word ObjNorm_DoNothing	; Object $3E - OBJ_PLATFORMFLOATS
	.word ObjNorm_DryBones		; Object $3F - OBJ_DRYBONES
	.word ObjNorm_PipeBlock	; Object $40 - OBJ_PIPEBLOCK
	.word ObjNorm_PiranhaGrower	; Object $41 - OBJ_PIRANHAGROWER
	.word ObjNorm_DryCheep	; Object $42 - OBJ_FLAMINGCHEEP
	.word ObjNorm_BeachedCheep	; Object $43 - OBJ_BEACHEDCHEEP
	.word ObjNorm_PlatformUnstable	; Object $44 - OBJ_PLATFORMUNSTABLE
	.word ObjNorm_DoNothing		; Object $45 - OBJ_PWING
	.word ObjNorm_Snifit	; Object $46 - OBJ_SNIFIT
	.word ObjNorm_Birdo	; Object $47 - OBJ_BIRDO
	.word ObjNorm_Ninji	; Object $48 - OBJ_NINJI
	.word ObjNorm_DoNothing	; Object $49 - OBJ_FLOATINGBGCLOUD
	.word ObjNorm_MagicStar	; Object $4A - OBJ_MAGICSTAR
	.word ObjNorm_MagicStar		; Object $4B - OBJ_MAGICSTAR
	.word ObjNorm_MagicStar		; Object $4C - OBJ_MAGICSTAR
	.word ObjNorm_JumpControl	; Object $4D
	.word RhythmPlatforms		; Object $4E
	.word DPad_ControlTiles	; Object $4F - OBJ_CHAINCHOMPFREE

    .org ObjectGroup_CollideJumpTable
;****************************** OBJECT PLAYER INTERACTION ******************************
	.word Platform_PlayerStandCopy		; Object $3C - OBJ_PLATFORM_PATHFOLLOW
	.word Player_GetHurt		; Object $3D - OBJ_NIPPERFIREBREATHER
	.word Platform_PlayerStandCopy		; Object $3E - OBJ_PLATFORMFLOATS
	.word Player_GetHurt		; Object $3F - OBJ_DRYBONES
	.word ObjHit_SolidBlock		; Object $40 - OBJ_PIPEBLOCK
	.word Player_GetHurt	; Object $41 - OBJ_PIRANHAGROWER
	.word Player_GetHurt		; Object $42 - OBJ_FLAMINGCHEEP
	.word ObjHit_DoNothing		; Object $43 - OBJ_BEACHEDCHEEP
	.word Platform_PlayerStandCopy		; Object $44 - OBJ_PLATFORMUNSTABLE
	.word ObjHit_DoNothing		; Object $45 - OBJ_PWING
	.word ObjHit_DoNothing		; Object $46 - OBJ_SNIFIT
	.word Birdo_HurtOrStand		; Object $47 - OBJ_BIRDO
	.word ObjHit_DoNothing	; Object $48 - OBJ_NINJI
	.word ObjHit_DoNothing	; Object $49 - OBJ_FLOATINGBGCLOUD
	.word Magic_StarCollect	; Object $4A - OBJ_MAGICSTAR
	.word Magic_StarCollect	; Object $4A - OBJ_MAGICSTAR
	.word Magic_StarCollect	; Object $4A - OBJ_MAGICSTAR
	.word ObjHit_DoNothing; Object $4D
	.word ObjHit_DoNothing	; Object $4E
	.word ObjHit_DoNothing	; Object $4F - OBJ_CHAINCHOMPFREE

    .org ObjectGroup_PatTableSel
;****************************** OBJECT PALETTE/SIZE ******************************
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $3C - OBJ_PLATFORM_PATHFOLLOW
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $3D - OBJ_NIPPERFIREBREATHER
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $3E - OBJ_PLATFORMFLOATS
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $3F - OBJ_DRYBONES
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH32	; Object $40 - OBJ_PIPEBLOCK
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $41 - OBJ_PIRANHAGROWER
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $42 - OBJ_FLAMINGCHEEP
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $43 - OBJ_BEACHEDCHEEP
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $44 - OBJ_PLATFORMUNSTABLE
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $45 - OBJ_PWING
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $46 - OBJ_SNIFIT
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $47 - OBJ_BIRDO
    .byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $48 - OBJ_NINJI
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $49 - OBJ_FLOATINGBGCLOUD
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $4A - OBJ_MAGICSTAR
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $4B - OBJ_MAGICSTAR
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $4C - OBJ_MAGICSTAR
	.byte OA1_PAL0 | OA1_HEIGHT16 | OA1_WIDTH8	; Object $4D
	.byte OA1_PAL0 | OA1_HEIGHT16 | OA1_WIDTH8	; Object $4E
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $4F - OBJ_CHAINCHOMPFREE

    .org ObjectGroup_PatTableSel
;****************************** OBJECT PATTERN TABLE ******************************
	.byte OPTS_NOCHANGE	; Object $3C - OBJ_PLATFORM_PATHFOLLOW
	.byte OPTS_SETPT5 | $0A	; Object $3D - OBJ_NIPPERFIREBREATHER
	.byte OPTS_NOCHANGE; Object $3E - OBJ_PLATFORMFLOATS
	.byte OPTS_SETPT6 | $13	; Object $3F - OBJ_DRYBONES
	.byte OPTS_SETPT5 | $0B	; Object $40 - OBJ_PIPEBLOCK
	.byte OPTS_SETPT5 | $0B	; Object $41 - OBJ_PIRANHAGROWER
	.byte OPTS_SETPT5 | $0A	; Object $42 - OBJ_FLAMINGCHEEP
	.byte OPTS_SETPT6 | $4F	; Object $43 - OBJ_BEACHEDCHEEP
	.byte OPTS_NOCHANGE ; Object $44 - OBJ_PLATFORMUNSTABLE
	.byte OPTS_SETPT5 | $4D	; Object $45 - OBJ_PWING
	.byte OPTS_SETPT5 | $0F	; Object $46 - OBJ_SNIFIT
	.byte OPTS_SETPT5 | $4C		; Object $47 - OBJ_BIRDO
    .byte OPTS_SETPT5 | $0F	; Object $48 - OBJ_NINJI
	.byte OPTS_NOCHANGE	; Object $49 - OBJ_FLOATINGBGCLOUD
	.byte OPTS_NOCHANGE	; Object $4A - OBJ_MAGICSTAR
	.byte OPTS_NOCHANGE	; Object $4B - OBJ_MAGICSTAR
	.byte OPTS_NOCHANGE	; Object $4C - OBJ_MAGICSTAR
	.byte OPTS_NOCHANGE	; Object $4D
	.byte OPTS_NOCHANGE	; Object $4E
	.byte OPTS_SETPT5 | $0E	; Object $4F - OBJ_CHAINCHOMPFREE

	.org ObjectGroup_KillAction	
;****************************** OBJECT DEATH ROUTINE ******************************
	.byte KILLACT_STANDARD	; Object $3C - OBJ_PLATFORM_PATHFOLLOW
	.byte KILLACT_STANDARD	; Object $3D - OBJ_NIPPERFIREBREATHER
	.byte KILLACT_STANDARD	; Object $3E - OBJ_PLATFORMFLOATS
	.byte KILLACT_POOFDEATH	; Object $3F - OBJ_DRYBONES
	.byte KILLACT_NORMALANDKILLED	; Object $40 - OBJ_PIPEBLOCK
	.byte KILLACT_NORMALANDKILLED	; Object $41 - OBJ_PIRANHAGROWER
	.byte KILLACT_POOFDEATH	; Object $42 - OBJ_FLAMINGCHEEP
	.byte KILLACT_POOFDEATH	; Object $43 - OBJ_BEACHEDCHEEP
	.byte KILLACT_STANDARD	; Object $44 - OBJ_PLATFORMUNSTABLE
	.byte KILLACT_POOFDEATH	; Object $45 - OBJ_PWING
	.byte KILLACT_POOFDEATH	; Object $46 - OBJ_SNIFIT
	.byte KILLACT_POOFDEATH	; Object $47 - OBJ_BIRDO
    .byte KILLACT_POOFDEATH	; Object $48 - OBJ_NINJI
	.byte KILLACT_STANDARD	; Object $49 - OBJ_FLOATINGBGCLOUD
	.byte KILLACT_STANDARD	; Object $4A - OBJ_MAGICSTAR
	.byte KILLACT_STANDARD	; Object $4B - OBJ_MAGICSTAR
	.byte KILLACT_STANDARD	; Object $4C - OBJ_MAGICSTAR
	.byte KILLACT_STANDARD	; Object $4D
	.byte KILLACT_STANDARD	; Object $4E
	.byte KILLACT_POOFDEATH	; Object $4F - OBJ_CHAINCHOMPFREE


OG4_POff .func (\1 - ObjectGroup04_PatternSets)

	.org ObjectGroup_PatternStarts	; <-- help enforce this table *here*
;****************************** OBJECT FRAME TABLE ******************************
	.byte OG1_POff(ObjP3C), OG1_POff(ObjP3D), OG1_POff(ObjP3E), OG1_POff(ObjP3F)
	.byte OG1_POff(ObjP40), OG1_POff(ObjP41), OG1_POff(ObjP42), OG1_POff(ObjP43)
	.byte OG1_POff(ObjP44), OG1_POff(ObjP45), OG1_POff(ObjP46), OG1_POff(ObjP47)
	.byte OG4_POff(ObjP48), OG4_POff(ObjP49), OG4_POff(ObjP4A), OG4_POff(ObjP4B)
	.byte OG4_POff(ObjP4C), OG4_POff(ObjP4D), OG4_POff(ObjP4E), OG4_POff(ObjP4F)


    .org ObjectGroup_PatternSets	; <-- help enforce this table *here*

ObjectGroup04_PatternSets:

ObjP3C:
ObjP3D:
	.byte $A1, $A3, $A5, $A7, $A9, $AB

ObjP3E:
ObjP3F:
	.byte $C1, $C3, $C5, $C7
	.byte $C9, $CB, $CD, $CF
	.byte $71, $D1, $D3, $D5
	.byte $71, $71, $DD, $DF

ObjP40:
	.byte $AF, $B1, $B3, $B5    

ObjP41:
	.byte $E1, $E1, $E5, $E5, $B9, $B7, $BF, $BB, $B3, $B3, $B5, $B5, $B7, $B9, $BB, $BF    

ObjP42:
	.byte $91, $93, $91, $9B, $91, $9B    

ObjP43:
	.byte $E7, $E9, $E7, $EF, $E7, $EF

ObjP44:
	.byte $77, $77, $77, $77, $77, $77

ObjP45:
	.byte $BD, $BF

ObjP46:
	.byte $A9, $AB
	.byte $AD, $AF  

ObjP47:
	.byte $81, $83, $89, $8B
	.byte $81, $83, $93, $95
	.byte $85, $87, $89, $8B
	.byte $85, $87, $93, $95
	.byte $9D, $9F, $89, $8B
	.byte $9D, $9F, $93, $95      

ObjP48:
	.byte $A1, $A3, $A5, $A7, $A5, $A7

ObjP49:
ObjP4A:
ObjP4B:
ObjP4C:
	.byte $7F, $7F
	
ObjP4D:
ObjP4E:
ObjP4F:


ObjInit_DryBones:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA <Objects_YZ, X
	ADD #$10
	STA <Objects_YZ, X

	LDA <Objects_YHiZ, X
	ADC #$00
	STA <Objects_YHiZ, X

	LDA #$08
	STA Objects_Timer, X

	JSR Object_CalcBoundBox
	JSR Object_MoveTowardsPlayer

	LDA #(ATTR_BUMPNOKILL | ATTR_CARRYANDBUMP)
	STA Objects_BehaviorAttr, X

	LDA #(ATTR_FIREPROOF | ATTR_TAILPROOF)
	STA Objects_WeaponAttr, X

	LDA #$04
	STA Objects_SpritesRequested, X
	RTS

DryBones_Frames = Objects_Data1

DryBones_CrumbleFrames:
	.byte $02, $03, $03, $03, $03, $03, $03, $03
	.byte $03, $03, $03, $03, $03, $03, $03, $02

DryBones_PoofX:
	.byte $F8, $10

ObjNorm_DryBones:
	LDA <Player_HaltGameZ
	BEQ DryBones_Norm

	JMP DryBones_Draw

DryBones_Norm:	
	JSR Object_DeleteOffScreen

	LDA Objects_Timer2, X
	CMP #$0F
	BNE DryBones_NoPoof

	LDY #$00

	LDA Objects_Orientation, X
	BEQ DryBones_MakePoof

	INY

DryBones_MakePoof:
	LDA <Objects_XZ, X
	ADD DryBones_PoofX, Y
	STA <Poof_X

	LDA <Objects_YZ, X
	STA Poof_Y
	JSR Common_MakePoof

DryBones_NoPoof:
	LDA Objects_Timer2, X
	CMP #$01
	BNE DryBones_DoMove

	JSR Object_MoveTowardsPlayer

	LDA #(ATTR_BUMPNOKILL | ATTR_CARRYANDBUMP)
	STA Objects_BehaviorAttr, X

DryBones_DoMove:	
	JSR Object_Move
	JSR Object_FaceDirectionMoving
	JSR Object_CalcBoundBox
	JSR Object_DetectTiles
	JSR Object_InteractWithTiles
	JSR Object_InteractWithObjects
	JSR Object_AttackOrDefeat

	LDA Objects_Timer, X
	BNE DryBones_Animate

	LDA Objects_PreviousTilesDetect, X
	AND #HIT_GROUND
	BNE DryBones_CheckStomped

	LDA <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BNE DryBones_Fall

DryBones_CheckStomped:
	LDA Objects_State, X
	CMP #OBJSTATE_KILLED
	BNE DryBones_Animate

DryBones_Fall:
	JSR DryBones_Crumble
	
DryBones_Animate:
	LDA Objects_Timer2, X
	BEQ DryBones_AnimateWalk

	LSR A
	LSR A
	LSR A
	LSR A
	TAY

	LDA DryBones_CrumbleFrames, Y
	STA Objects_Frame,X

	BNE DryBones_Draw

DryBones_AnimateWalk:
	INC DryBones_Frames,X
	LDA DryBones_Frames,X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame,X
	JMP DryBones_Draw

DryBones_Draw:
	LDA Objects_Frame, X
	CMP #$02
	BCC DryBones_DrawStanding

	LDA #$00
	STA <Temp_Var9
	
	LDA Objects_Timer2, X
	CMP #$30
	BCS DryBones_CheckDirection

	CMP #$10
	BCC DryBones_CheckDirection

	LSR A
	AND #$01
	STA <Temp_Var9

DryBones_CheckDirection:
	LDA Objects_Orientation, X
	BNE DryBones_LyingRight
	
	LDA #$10
	ORA <Temp_Var9
	STA <Temp_Var9
	
DryBones_LyingRight:
	LDA <Objects_XZ, X
	SUB <Temp_Var9
	STA <Objects_XZ, X

	JSR Object_Draw32x16

	LDA <Objects_XZ, X
	ADD <Temp_Var9
	STA <Objects_XZ, X
	RTS

DryBones_DrawStanding:
	LDA <Objects_YZ, X
	SUB #$10
	STA <Objects_YZ, X
	
	JSR Object_Draw16x32
	
	LDA <Objects_YZ, X
	ADD #$10
	STA <Objects_YZ, X
	RTS

DryBones_SkullOff:
	.byte $F4, $0C
	.byte $FF, $00

DryBones_SkullXVel:
	.byte $F0, $10

DryBones_Crumble:
	LDA Objects_SpritesHorizontallyOffScreen, X
	ORA Objects_SpritesVerticallyOffScreen, X
	ORA Objects_Timer2, X
	BNE DryBones_CrumbleRTS

	LDA #$F2
	STA Objects_Timer2, X

	LDA #OBJSTATE_NORMAL
	STA Objects_State, X

	LDA #$00
	STA <Objects_XVelZ, X

	LDA #ATTR_BUMPNOKILL
	STA Objects_BehaviorAttr, X

	LDY #$00

	LDA Objects_Orientation, X
	BEQ DryBones_SkullPrep

	INY

DryBones_SkullPrep:
	LDA DryBones_SkullXVel, Y
	STA <Temp_Var14

	LDA DryBones_SkullOff, Y
	STA <Temp_Var15

	LDA DryBones_SkullOff + 2, Y
	STA <Temp_Var16

	JSR Object_PrepProjectile
	
	LDA #SOBJ_SKULL
	STA SpecialObj_ID, Y

	LDA <Objects_XZ, X
	ADD <Temp_Var15
	STA SpecialObj_X, Y

	LDA <Objects_XHiZ, X
	ADC <Temp_Var16
	STA SpecialObj_XHi, Y

	LDA <Temp_Var14
	STA SpecialObj_XVel, Y

	LDA <Objects_YZ, X
	ADD #$04
	STA SpecialObj_Y, Y

	LDA <Objects_YHiZ, X
	ADC #$00
	STA SpecialObj_YHi, Y

	LDA #$E2
	STA SpecialObj_Timer, Y

	LDA #$00
	STA SpecialObj_YVel, Y

DryBones_CrumbleRTS:
	RTS


ObjInit_PipeBlock:
	LDA #BOUND32x16BLOCK
	STA Objects_BoundBox, X
	
	LDA #$04
	STA Objects_SpritesRequested, X

	LDA <Objects_YZ, X
	SUB #$01
	STA <Objects_YZ, X

	LDA <Objects_YHiZ, X
	SBC #$00
	STA <Objects_YHiZ, X

	LDA #$10
	STA Objects_Timer, X

	LDA Objects_Property, X
	STA PipeBlock_State, X
	TAY

	LDA PipeBlock_YVelFrac, Y
	STA Objects_YVelFrac, X

	LDA <Objects_YZ, X
	STA PipeBlock_StartY, X

	LDA <Objects_YHiZ, X
	STA PipeBlock_StartYHi, X
	
	JMP Object_NoInteractions

PipeBlock_State = Objects_Data1
PipeBlock_ChangeRightQueue = Objects_Data2
PipeBlock_DisableMove = Objects_Data3
PipeBlock_StartY = Objects_Data4
PipeBlock_StartYHi = Objects_Data5

PipeBlock_YVel:
	.byte $08, $F8, $08, $F8

ObjNorm_PipeBlock:
	LDA <Player_HaltGameZ
	BEQ PipeBlock_Norm

	JMP PipeBlock_Draw

PipeBlock_Norm:

	LDA <Objects_YZ, X
	CMP PipeBlock_StartY, X
	BNE PipeBlock_NoDelete

	LDA <Objects_YHiZ, X
	CMP PipeBlock_StartYHi, X
	BNE PipeBlock_NoDelete

	JSR Object_DeleteOffScreen	

PipeBlock_NoDelete:
	JSR PipeBlock_MatchPalette
	JSR Object_CalcBoundBox
	JSR Object_KillOthers
	JSR Object_InteractWithPlayer

	LDA Objects_Timer, X
	ORA PipeBlock_DisableMove, X
	BNE PipeBlock_Stall

	LDY PipeBlock_State, X

	LDA PipeBlock_YVel, Y
	STA Objects_YVelZ, X

	JSR Object_ApplyYVel_NoGravity

PipeBlock_Stall:	
	LDA PipeBlock_ChangeRightQueue, X
	BNE PipeBlock_CheckByPass

	LDA Objects_Timer, X
	BNE PipeBlock_DoDraw
	
PipeBlock_CheckByPass:	
	JSR PipeBlock_CheckBlocks

PipeBlock_DoDraw:
	JMP PipeBlock_Draw

PipeBlock_YCheck:
	.byte $18, $F8, $18, $F8
	.byte $00, $FF, $00, $FF

PipeBlock_YVelFrac:
	.byte $00, $80, $00, $80

PipeBlock_PropCheck:
	.byte TILE_PROP_SOLID_ALL | TILE_PROP_ENEMYSOLID
	.byte TILE_PROP_ENEMY
	.byte TILE_PROP_ENEMY
	.byte TILE_PROP_SOLID_ALL | TILE_PROP_ENEMYSOLID

PipeBlock_CheckBlocks:
	LDA Block_NeedsUpdate
	BEQ PipeBlock_DoCheck

	LDA #$01
	STA PipeBlock_DisableMove, X

	LDA #$00
	STA <Objects_YVelZ, X
	RTS

PipeBlock_DoCheck:
	STA PipeBlock_DisableMove, X

	LDA PipeBlock_ChangeRightQueue, X
	BEQ PipeBlock_NotQueued
	JMP PipeBlock_ChangeBlockRight

PipeBlock_NotQueued:
	LDY PipeBlock_State, X
	
	LDA <Objects_YZ, X
	AND #$0F
	CMP #$0F
	BNE PipeBlock_CheckBlocksRTS

	LDA <Objects_YZ, X
	ADD PipeBlock_YCheck, Y
	STA Tile_DetectionY

	LDA <Objects_YHiZ, X
	ADC PipeBlock_YCheck + 4, Y
	STA Tile_DetectionYHi

	LDA <Objects_XZ, X
	ADD #$08
	STA Tile_DetectionX

	LDA <Objects_XHiZ, X
	STA Tile_DetectionXHi	

	JSR Object_DetectTile
	LDY PipeBlock_State, X
	CMP PipeBlock_PropCheck, Y
	BNE PipeBlock_ChangeDirection

	JSR PipeBlock_ChangeBlockLeft
	INC PipeBlock_ChangeRightQueue, X
	JMP PipeBlock_CheckBlocksRTS

PipeBlock_ChangeDirection:
	LDA PipeBlock_State, X
	EOR #$01
	STA PipeBlock_State, X

	LDA #$20
	STA Objects_Timer, X

	LDA #$00
	STA <Objects_YVelZ, X

	JSR PipeBlock_ChangeBlockLeft
	INC PipeBlock_ChangeRightQueue, X

	LDY PipeBlock_State, X
	LDA PipeBlock_YVelFrac, Y
	STA Objects_YVelFrac, X 

PipeBlock_CheckBlocksRTS:
	RTS

PipeBlock_ChangeBlockLeft:
	LDA <Objects_XZ, X
	STA Tile_DetectionX

	LDA <Objects_XHiZ, X
	STA Tile_DetectionXHi

PipeBlock_ChangeBlock:
	LDA <Objects_YZ, X
	ADD #$08
	STA Tile_DetectionY

	LDA <Objects_YHiZ, X
	ADC #$00
	STA Tile_DetectionYHi

	JSR Object_DetectTile
	TYA
	EOR #$01
	JSR Object_ChangeBlock
	
	RTS

PipeBlock_ChangeBlockRight:
	LDA #$00
	STA PipeBlock_ChangeRightQueue, X

	LDA <Objects_XZ, X
	ADD #$10
	STA Tile_DetectionX

	LDA <Objects_XHiZ, X
	ADC #$00
	STA Tile_DetectionXHi

	JMP PipeBlock_ChangeBlock


PipeBlock_Draw:
	JSR Object_Draw

	LDA ObjP40 + 2
	STA Sprite_RAMTile + 8, Y

	LDA ObjP40 + 3
	STA Sprite_RAMTile + 12, Y

	LDA Sprite_RAMAttr , Y
	STA Sprite_RAMAttr + 8, Y
	STA Sprite_RAMAttr + 12, Y

	LDA Objects_SpritesHorizontallyOffScreen, X
	AND #SPRITE_2_HINVISIBLE
	ORA Objects_SpritesVerticallyOffScreen, X
	BNE PipeBlock_Draw1

	LDA Objects_SpriteX , X
	ADD #$10
	STA Sprite_RAMX + 8, Y

	LDA Objects_SpriteY, X
	STA Sprite_RAMY + 8, Y
	

PipeBlock_Draw1:
	LDA Objects_SpritesHorizontallyOffScreen, X
	AND #SPRITE_3_HINVISIBLE
	ORA Objects_SpritesVerticallyOffScreen, X
	BNE PipeBlock_DrawRTS
	
	LDA Objects_SpriteX , X
	ADD #$18
	STA Sprite_RAMX + 12, Y

	LDA Objects_SpriteY, X 
	STA Sprite_RAMY + 12, Y

PipeBlock_DrawRTS:	
	RTS

PipeBlock_MatchPalette:
	LDA Pal_Data + 10
	STA Pal_Data + 26
	STA Palette_Buffer + 26

	LDA Pal_Data + 11
	STA Pal_Data + 27
	STA Palette_Buffer + 27
	RTS


Grower_DrawAttributes:
	.byte $00, SPR_HFLIP, SPR_HFLIP, SPR_HFLIP, SPR_VFLIP, SPR_HFLIP | SPR_VFLIP, $00, $00


Grower_DrawFlip:
	.byte $02, $03, $00, $01

Grower_XVel:
	.byte $00, $20, $00, $E0

Grower_YVel:
	.byte $E0, $00, $20, $00


Grower_Frame = Objects_Data1
Grower_Direction = Objects_Data2
Grower_StartX = Objects_Data3
Grower_StartXHi = Objects_Data4
Grower_StartY = Objects_Data5
Grower_StartYHi = Objects_Data6
Grower_TilePropDetect = Objects_Data7
Grower_ReverseDraw = Objects_Data8

Grower_WeaponAttributes:
	.byte ATTR_STOMPPROOF, ATTR_ALLWEAPONPROOF

Grower_BehaviorAttributes:
	.byte 0, ATTR_EXPLOSIONPROOF | ATTR_SHELLPROOF

ObjInit_PiranhaGrower:
	LDA #ATTR_STOMPPROOF
	STA Objects_WeaponAttr, X

ObjInit_PiranhaGrowerCommon:	
	; which direction to start in 0 = up, 1 = right, 2 = down, 3 = left

	LDA #ATTR_NOICE
	STA Objects_BehaviorAttr, X

	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA Objects_Property, X
	STA Grower_Direction, X

	 ; Grower_StartYHi = current tile to check for (Toggle sbeten #TILE_PROP_ENEMY and #TILE_PROP_HARMFUL)
	LDA #TILE_PROP_ENEMY
	STA Grower_TilePropDetect, X

	; back up original position
	LDA Objects_XZ, X
	STA Grower_StartX, X
	
	LDA Objects_XHiZ, X
	STA Grower_StartXHi, X
	
	LDA Objects_YZ, X
	STA Grower_StartY, X
	
	LDA Objects_YHiZ, X
	STA Grower_StartYHi, X
	RTS

ObjNorm_PiranhaGrower:
	LDA <Player_HaltGameZ
	BEQ Grower_Norm
	
	JMP Grower_Draw

Grower_Norm:
	LDA Objects_PlayerProjHit, X
	BEQ Grower_NotHit

	LDA #$00
	STA Objects_Timer2, X
	STA Objects_PlayerProjHit, X

Grower_NotHit:
	LDA Objects_State, X
	CMP #OBJSTATE_KILLED
	BNE Grower_Normal

	JMP Grower_Retract
	
Grower_Normal:
	LDA Objects_Timer, X
	BEQ Grower_Move
	
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat
	JSR Grower_Animate
	JSR Grower_TimerToggle
	RTS

Grower_Move:
	JSR Object_ApplyXVel
	JSR Object_ApplyYVel
	JSR Object_CalcBoundBox
	
	LDA <Objects_XZ, X
	ORA <Objects_YZ, X
	AND #$0F
	BNE Grower_Animate
	
	JSR Grower_AtStart
	BCC Grower_NoDelete

	JSR Grower_CheckOffScreen
	
Grower_NoDelete:

	JSR Object_DetectTiles	
	JSR Grower_InteractWithTiles
	JSR Object_AttackOrDefeat

Grower_Animate:
	INC Grower_Frame, X
	
	LDA Grower_Frame, X
	AND #$08
	LSR A
	LSR A
	LSR A
	STA <Temp_Var1
	LDA Grower_Direction, X
	EOR Grower_ReverseDraw, X
	ASL A
	STA <Temp_Var2
	ORA <Temp_Var1
	STA Objects_Frame, X

Grower_Draw:
	JSR Object_DrawAligned

	LDA Grower_Direction, X
	EOR Grower_ReverseDraw, X
	ASL A
	TAX
	LDA Grower_DrawAttributes, X
	ORA Sprite_RAM + 2, Y
	STA Sprite_RAM + 2, Y
	
	LDA Grower_DrawAttributes + 1, X
	ORA Sprite_RAM + 6, Y
	STA Sprite_RAM + 6, Y
	RTS

Grower_AtStart:
	LDA Grower_StartX, X
	CMP Objects_XZ, X
	BNE Grower_NotBeginning

	LDA Grower_StartXHi, X
	CMP Objects_XHiZ, X
	BNE Grower_NotBeginning

	LDA Grower_StartY, X
	CMP Objects_YZ, X
	BNE Grower_NotBeginning

	LDA Grower_StartYHi, X
	CMP Objects_YHiZ, X
	BNE Grower_NotBeginning
	SEC
	RTS
	
Grower_NotBeginning:
	CLC
	RTS

Grower_CheckOffScreen:
	LDA #$01
	STA TempA
	
	JSR Grower_DeleteOffScreen

	LDA TempA
	BEQ Grower_CheckOffScreen1
	JSR Object_DetectTileCenter

	LDA Block_NeedsUpdate
	BNE Grower_CheckOffScreen1
	
	LDA Tile_LastValue
	EOR #$01

	JSR Object_ChangeBlock
	PLA
	PLA

Grower_CheckOffScreen1:
	RTS

Grower_DeleteOffScreen:
	JSR Object_DeleteOffScreen
	LDA #$00
	STA TempA
	RTS

Grower_TimerToggle:
	LDX <CurrentObjectIndexZ

	LDA Objects_Timer, X
	BEQ Grower_TimerToggle1

	LDA Objects_Timer, X
	CMP #$01
	BNE Grower_TimerToggle1

	LDA Grower_ReverseDraw, X
	EOR #$02
	STA Grower_ReverseDraw, X

	LDA Grower_TilePropDetect, X
	CMP #TILE_PROP_ENEMY
	BEQ Grower_TimerToggle0

	LDA #TILE_PROP_ENEMY
	STA Grower_TilePropDetect, X
	RTS

Grower_TimerToggle0:
	LDA #(TILE_PROP_SOLID_ALL | TILE_PROP_HARMFUL)
	STA Grower_TilePropDetect, X

Grower_TimerToggle1:
	RTS

Grower_InteractWithTiles:
	LDA Block_NeedsUpdate
	BEQ Grower_InteractWithTiles2

Grower_InteractWithTiles1:
	LDA #$00
	STA <Objects_XVelZ, X
	STA <Objects_YVelZ, X
	RTS

Grower_InteractWithTiles2:
	JSR Object_DetectTileCenter

	LDA Tile_LastValue
	EOR #$01
	JSR Object_ChangeBlock

	LDA #$00
	STA <Temp_Var13
	JSR Grower_DetectBlockAbove
	CMP Grower_TilePropDetect, X
	BEQ Grower_SetVelocity

	INC <Temp_Var13
	JSR Grower_DetectBlockRight
	CMP Grower_TilePropDetect, X
	BEQ Grower_SetVelocity

	INC <Temp_Var13
	JSR Grower_DetectBlockBelow
	CMP Grower_TilePropDetect, X
	BEQ Grower_SetVelocity
	
	INC <Temp_Var13
	JSR Grower_DetectBlockLeft
	CMP Grower_TilePropDetect, X
	BEQ Grower_SetVelocity
	
	LDA #$00
	STA <Objects_XVelZ, X
	STA <Objects_YVelZ, X

	LDA #$80
	STA Objects_Timer, X

	RTS

Grower_SetVelocity:
	LDY <Temp_Var13
	LDA Grower_XVel, Y
	STA <Objects_XVelZ, X
	
	LDA Grower_YVel, Y
	STA <Objects_YVelZ, X
	
	TYA
	STA Grower_Direction, X
	LDY Grower_StartYHi, X
	CPY #(TILE_PROP_SOLID_ALL | TILE_PROP_HARMFUL)
	BNE DrawPiranhaGrow1

	TAY
	LDA Grower_DrawFlip, Y 
	STA Grower_Direction, X

DrawPiranhaGrow1:
	LDA #$00
	RTS

Grower_DetectBlockAbove:
	LDA <Objects_YZ, X
	SUB #$08
	STA Tile_DetectionY

	LDA <Objects_YHiZ, X
	SBC #$00
	STA Tile_DetectionYHi

	LDA <Objects_XZ, X
	STA Tile_DetectionX

	LDA <Objects_XHiZ, X
	STA Tile_DetectionXHi

	JSR Object_DetectTile

	LDA Tile_LastProp
	RTS

Grower_DetectBlockBelow:
	LDA <Objects_YZ, X
	ADD #$18
	STA Tile_DetectionY

	LDA <Objects_YHiZ, X
	ADC #$00
	STA Tile_DetectionYHi

	LDA <Objects_XZ, X
	STA Tile_DetectionX

	LDA <Objects_XHiZ, X
	STA Tile_DetectionXHi

	JSR Object_DetectTile
	LDA Tile_LastProp
	RTS

Grower_DetectBlockRight:
	LDA <Objects_YZ, X
	STA Tile_DetectionY

	LDA <Objects_YHiZ, X
	STA Tile_DetectionYHi

	LDA <Objects_XZ, X
	ADD #$18
	STA Tile_DetectionX

	LDA <Objects_XHiZ, X
	ADC #$00
	STA Tile_DetectionXHi

	JSR Object_DetectTile
	LDA Tile_LastProp
	RTS

Grower_DetectBlockLeft:
	LDA <Objects_YZ, X
	STA Tile_DetectionY

	LDA <Objects_YHiZ, X
	STA Tile_DetectionYHi

	LDA <Objects_XZ, X
	SUB #$08
	STA Tile_DetectionX

	LDA <Objects_XHiZ, X
	SBC #$00
	STA Tile_DetectionXHi

	JSR Object_DetectTile
	LDA Tile_LastProp
	RTS

Grower_Retract:

	JSR Object_CalcBoundBox

Grower_KeepRetracting:
	LDA Block_NeedsUpdate
	BNE Grower_RetractRTS

	LDA Objects_Timer2, X
	BNE Grower_RetractRTS
	
	JSR Object_DetectTileCenter

	LDA Tile_LastValue
	AND #$FE
	JSR Object_ChangeBlock
	
	LDA Objects_SpritesHorizontallyOffScreen, X
	ORA Objects_SpritesVerticallyOffScreen, X
	BNE Grower_NoPoof

	LDA <Objects_XZ, X
	AND #$F0
	STA <Poof_X

	LDA <Objects_YZ, X
	AND #$F0
	STA <Poof_Y
	JSR Common_MakePoof

Grower_NoPoof:	
	JSR Grower_DetectBlockAbove
	CMP #(TILE_PROP_SOLID_ALL | TILE_PROP_HARMFUL)
	BEQ Grower_SetPosition

	JSR Grower_DetectBlockRight
	CMP #(TILE_PROP_SOLID_ALL | TILE_PROP_HARMFUL)
	BEQ Grower_SetPosition

	JSR Grower_DetectBlockBelow
	CMP #(TILE_PROP_SOLID_ALL | TILE_PROP_HARMFUL)
	BEQ Grower_SetPosition

	JSR Grower_DetectBlockLeft
	CMP #(TILE_PROP_SOLID_ALL | TILE_PROP_HARMFUL)
	BEQ Grower_SetPosition

	JMP Object_Delete

Grower_SetPosition:	
	LDA Tile_DetectionX
	STA <Objects_XZ, X

	LDA Tile_DetectionXHi
	STA <Objects_XHiZ, X

	LDA Tile_DetectionY
	STA <Objects_YZ, X

	LDA Tile_DetectionYHi
	STA <Objects_YHiZ, X

	LDA #$08
	STA Objects_Timer2, X
	
Grower_RetractRTS:
	RTS	


ObjInit_DryCheep:
	LDA #$04
	STA Objects_SpritesRequested,X

	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #ATTR_STOMPKICKSOUND
	STA Objects_BehaviorAttr, X

	JSR Object_MoveTowardsPlayerFast
	
	LDA <Objects_XZ, X
	STA DryCheep_PoofX, X

	LDA <Objects_YZ, X
	STA DryCheep_PoofY, X

	LDA <Objects_YHiZ, X
	STA DryCheep_PoofYHi, X

	LDA Objects_Property, X
	STA DryCheep_Burning, X

	LDA #$01
	STA Objects_Health, X
	RTS

DryCheep_Burning = Objects_Data2
DryCheep_PoofX = Objects_Data3
DryCheep_PoofY = Objects_Data4
DryCheep_PoofYHi = Objects_Data5
DryCheep_FlameFrame = Objects_Data6
DryCheep_PoofTimer = Objects_Data7

DryCheep_PoofTime:
	.byte $13

Flame_Frames:
	.byte $81, $83, $85, $87	

ObjNorm_DryCheep:
	LDA <Player_HaltGameZ
	BNE Dry_DrawNoAnimate

ObjNorm_DryCheep0:
	JSR Object_DeleteOffScreen
	
	LDA DryCheep_Burning, X
	BNE Dry_WeaponAttr

	LDA #(ATTR_FIREPROOF)
	STA Objects_WeaponAttr, X
	BEQ Dry_CheckIce

Dry_WeaponAttr:
	LDA #(ATTR_FIREPROOF | ATTR_TAILPROOF | ATTR_STOMPPROOF | ATTR_NOICE)
	STA Objects_WeaponAttr, X

Dry_CheckIce:
	LDA Objects_PlayerProjHit, X
	BEQ Dry_NotHit

	CMP #HIT_ICEBALL
	BNE Dry_NotHit

	LDA DryCheep_Burning, X
	BEQ Dry_NotHit

Dry_RemoveBurn:
	LDA #$00
	STA DryCheep_Burning, X
	STA Objects_PlayerProjHit, X
	
	INC Objects_Health, X

Dry_NotHit:
	LDA Objects_Timer, X
	BNE Dry_InWater
	
	LDA Objects_InWater, X
	BEQ Dry_Move

	JSR Object_MoveTowardsPlayerFast

	LDA BeachedCheep_YVel
	STA <Objects_YVelZ, X

Dry_Move:
	JSR Object_Move
	JSR Object_FaceDirectionMoving
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat

Dry_Normal:
	JSR Object_DetectTiles

	LDA Objects_Property, X
	CMP #$03
	BNE DryCheep_Tiles

	LDA <Objects_TilesDetectZ,X
	AND #~HIT_GROUND
	STA <Objects_TilesDetectZ,X

DryCheep_Tiles:	
	JSR Object_InteractWithTiles
	JSR Dry_DoBounce
	LDA Objects_InWater, X
	BEQ Dry_Draw
	
Dry_SetTimer:
	LDA #$20
	STA Objects_Timer, X
	JSR Dry_CheckLava
	JSR Object_FacePlayer

Dry_Draw:
	INC BeachedCheep_CurrentFrame,X
	LDA BeachedCheep_CurrentFrame,X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame,X

Dry_DrawNoAnimate:
	JMP DryCheep_DrawFlamesAndSmoke

Dry_InWater:
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat
	JMP DryCheep_DrawFlamesAndSmoke

Dry_DoBounce:
	LDA <Objects_TilesDetectZ, X
	AND #$04
	BEQ Dry_DoBounce1

	LDA BeachedCheep_GroundBounce
	STA <Objects_YVelZ, X

Dry_DoBounce1:
	RTS

Dry_CheckLava:
	LDA Object_BodyTileProp, X
	AND #$0F
	CMP #(TILE_PROP_HARMFUL)
	BEQ Dry_MakeBurn

	LDA #$00
	STA DryCheep_Burning, X
	RTS

Dry_MakeBurn:
	LDA #$01
	STA DryCheep_Burning, X

	LDA DryCheep_PoofTime
	STA DryCheep_PoofTimer, X
	RTS

DryCheep_DrawFlamesAndSmoke:
	JSR Object_Draw
	
	LDA DryCheep_Burning, X
	BNE DryCheep_MakeFlamePoof
	RTS

DryCheep_MakeFlamePoof:
	LDA Sprite_RAM,Y
	SUB #$08
	STA Sprite_RAM+8,Y

	LDA Sprite_RAM + 4,Y
	SUB #$08
	STA Sprite_RAM+12,Y

	LDA Sprite_RAM+3,Y
	STA Sprite_RAM+11,Y

	LDA Sprite_RAM+7,Y
	STA Sprite_RAM+15,Y

	LDA Sprite_RAM+2,Y
	AND #$BF
	STA Sprite_RAM+10,Y
	STA Sprite_RAM+14,Y

	INC DryCheep_FlameFrame, X
	LDA DryCheep_FlameFrame, X
	LSR A
	LSR A
	AND #$02
	TAX 
	LDA Flame_Frames, X
	STA Sprite_RAM+9,Y

	LDA Flame_Frames + 1, X
	STA Sprite_RAM+13,Y

	LDA <Player_HaltGameZ
	BNE DryCheep_DrawFlamesAndSmoke2

	LDX <CurrentObjectIndexZ


	LDA Objects_XVelZ, X
	ORA Objects_YVelZ, X
	BEQ DryCheep_DrawFlamesAndSmoke2

	LDA DryCheep_PoofTimer, X
	BNE DryCheep_DrawFlamesAndSmoke1

	LDA Objects_InWater, X
	BNE DryCheep_DrawFlamesAndSmoke2

	LDA Objects_SpritesHorizontallyOffScreen,X
	ORA Objects_SpritesVerticallyOffScreen,X
	BNE DryCheep_SkipPoof

	LDA <Objects_XZ, X
	STA <Poof_X

	LDA <Objects_YZ, X
	STA <Poof_Y

	LDA <Objects_YHiZ, X
	STA <Poof_YHi

	JSR Common_MakePoof

DryCheep_SkipPoof:
	LDA DryCheep_PoofTime
	STA DryCheep_PoofTimer, X

	LDA <Objects_XZ, X
	STA DryCheep_PoofX, X

	LDA <Objects_YZ, X
	STA DryCheep_PoofY, X

	LDA <Objects_YHiZ, X
	STA DryCheep_PoofYHi, X
	
DryCheep_DrawFlamesAndSmoke1:
	DEC DryCheep_PoofTimer, X

DryCheep_DrawFlamesAndSmoke2:
	RTS



ObjInit_BusterBeatle:
ObjNorm_BusterBeatle:
	RTS		 ; Return

ObjInit_BeachedCheep:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #(ATTR_STOMPKICKSOUND)
	STA Objects_BehaviorAttr, X

	LDA <Objects_YVelZ, X
	BNE BeachedCheep_Prop

	LDA #(ATTR_CARRYANDBUMP | ATTR_STOMPKICKSOUND)
	STA Objects_BehaviorAttr, X

	JSR Object_MoveTowardsPlayerFast

BeachedCheep_Prop:
	LDY Objects_Property, X
	CPY #$02
	BNE ObjInit_BeachedCheep1

	LDA #$10
	STA <Objects_YVelZ, X

ObjInit_BeachedCheep1:
	LDA BeachedCheep_VFlip, Y
	ORA Objects_Orientation, X
	STA Objects_Orientation, X
	RTS
	
BeachedCheep_XVel: .byte $10, $F0
BeachedCheep_YVel: .byte $A0, $60
BeachedCheep_VFlip: .byte $00, SPR_VFLIP, $00, $00

BeachedCheep_IsWaiting = Objects_Data3
BeachedCheep_CurrentFrame = Objects_Data4
BeachedCheep_NoWaterTimer = Objects_Data5

BeachedCheep_GroundBounce: 
	.byte $D0, $F8, $D0

BeachedCheep_CeilingBounce: 
	.byte $08, $30, $30

ObjNorm_BeachedCheep:
	LDA <Player_HaltGameZ
	BEQ ObjNorm_BeachedCheep0
	JMP Beached_DrawNoAnimate

ObjNorm_BeachedCheep0:
	JSR Object_DeleteOffScreen
	
	LDA Objects_Timer, X
	BEQ Beached_NoTimer
	JMP Beached_InWater
	
Beached_NoTimer:
	LDA Objects_InWater, X
	BEQ Beached_Move

	JSR Object_MoveTowardsPlayerFast
	
	LDY Objects_Property, X

	LDA BeachedCheep_YVel, Y
	STA <Objects_YVelZ, X

	LDA #$10
	STA BeachedCheep_NoWaterTimer, X

Beached_Move:
	
	LDY Objects_Property, X
	BEQ Beached_Move1

	CPY #$03
	BEQ Beached_Move1

	CPY #$01
	BEQ Beached_ReveseGravity

	INC NoGravity
	BNE Beached_Move1

Beached_ReveseGravity:
	INC Reverse_Gravity

Beached_Move1:
	JSR Object_Move
	JSR Object_FaceDirectionMoving
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat
	JSR Object_DetectTiles

	LDA Objects_Property, X
	CMP #$03
	BNE Beached_InteractTiles

	LDA <Objects_YVelZ, X
	BMI Beached_NoDetect

	LDA #$00
	STA Objects_Property, X

	LDA Object_BodyTileProp, X
	CMP #TILE_PROP_SOLID_ALL
	BCC Beached_InteractTiles

	JMP Object_PoofDie

Beached_InteractTiles:
	JSR Object_InteractWithTiles
	JSR Beached_DoBounce

Beached_NoDetect:
	LDA BeachedCheep_NoWaterTimer, X
	BEQ Beached_WaterOk

	DEC BeachedCheep_NoWaterTimer, X
	JMP Beached_Draw

Beached_WaterOk:
	LDA Objects_InWater, X
	BEQ Beached_Draw
	
Beached_SetTimer:
	LDA #$20
	STA Objects_Timer, X
	JSR Object_FacePlayer

Beached_Draw:
	INC BeachedCheep_CurrentFrame,X
	LDA BeachedCheep_CurrentFrame,X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame,X

Beached_DrawNoAnimate:
	JMP Object_Draw

Beached_InWater:
	JSR Object_FacePlayer
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat
	JMP Object_Draw

Beached_DoBounce:
	LDY Objects_Property, X
	LDA <Objects_TilesDetectZ, X
	AND #$04
	BEQ Beached_DoBounce1

	LDA BeachedCheep_GroundBounce, Y
	STA <Objects_YVelZ, X

Beached_DoBounce1:
	LDA  <Objects_TilesDetectZ, X
	AND #$08
	BEQ Beached_DoBounce2

	LDA BeachedCheep_CeilingBounce, Y
	STA <Objects_YVelZ, X

Beached_DoBounce2:
	RTS


Platform_Index = Objects_Data1
Platform_Ticker = Objects_Data2
Platform_Regen = Objects_Data6
Platform_NotBehind = Objects_Data7
Platform_MaxFall = Objects_Data8
Platform_StartY = Objects_Data9
Platform_StartYHi = Objects_Data10
PlatformUnstable_MoveTimer = Objects_Data11
PlatformUnstable_NoRegen = Objects_Data12

ObjInit_PlatformUnstable:
	LDA #BOUND48x16
	STA Objects_BoundBox, X

	LDA #$06
	STA Objects_SpritesRequested, X

	JSR Object_NoInteractions

	LDA #$20
	STA Platform_MaxFall, X
	STA Platform_Regen, X
	STA Platform_NotBehind, X

	LDA <Objects_YZ, X
	STA Platform_StartY, X

	LDA <Objects_YHiZ, X
	STA Platform_StartYHi, X
	RTS

ObjNorm_PlatformUnstable:
	LDA <Player_HaltGameZ
	BNE Unstable_Draw

	JSR Object_DeleteOffScreen
	JSR Unstable_CheckRegen
	JSR Object_CalcBoundBox
	
	LDA #$00
	STA Platform_MadeContact, X

	JSR Object_InteractWithPlayer
	JSR Unstable_Move
	JSR Platform_ContactCheck

Unstable_Draw:
	LDA Objects_Timer, X  
	BEQ Unstable_DrawNorm
	RTS

Unstable_DrawNorm:
	LDA Platform_NotBehind, X
	BNE Unstable_Draw1

Unstable_Draw1:
	JMP Platform_DrawCopy

Unstable_Move:
	LDA PlatformUnstable_MoveTimer, X
	BEQ Unstable_MoveNormal

	DEC PlatformUnstable_MoveTimer, X
	BNE Unstable_MoveContant

	INC Platform_SteppedOn, X
	
	LDA Objects_SpriteAttributes, X
	AND #~SPR_BEHINDBG
	STA Objects_SpriteAttributes, X
	
	JSR Object_ApplyYVel_NoGravity
	RTS

Unstable_MoveContant:
	JSR Object_ApplyYVel_NoGravity

	LDA Objects_SpriteAttributes, X
	ORA #SPR_BEHINDBG
	STA Objects_SpriteAttributes, X
	RTS

Unstable_MoveNormal:

	LDA Platform_SteppedOn, X
	BEQ Unstable_MoveRTS

	JSR Object_Move

	LDA <Objects_YVelZ,X
	BMI Unstable_MoveRTS
	CMP #$20
	BCC Unstable_MoveRTS

	LDA #$20
	STA <Objects_YVelZ,X

Unstable_MoveRTS:
	RTS

Unstable_CheckSteppedOn:
	LDA Platform_SteppedOn, X
	BEQ Unstable_CheckSteppedOnRTS

	INC Platform_Ticker, X
	LDA Platform_Ticker, X
	AND #$01
	BEQ Unstable_CheckSteppedOnRTS

	JSR Object_Move

Unstable_CheckSteppedOnRTS:
	RTS

Unstable_CheckRegen:
	LDA Objects_Timer, X  
	BEQ Unstable_CheckFallTooFar

	LDA #$00
	STA Platform_SteppedOn, X
	STA <Objects_YVelZ, X
	
	LDA Platform_StartY, X
	STA <Objects_YZ, X

	LDA Platform_StartYHi, X
	STA <Objects_YHiZ, X
	PLA
	PLA
	RTS

Unstable_CheckFallTooFar:
	LDA PlatformUnstable_NoRegen, X
	BNE Unstable_CheckFallTooFarRTS

	LDA <Objects_YHiZ, X
	BEQ Unstable_CheckFallTooFarRTS
	BMI Unstable_CheckFallTooFarRTS

	LDA <Objects_YZ, X
	CMP #$B0
	BCC Unstable_CheckFallTooFarRTS

	LDA #$60
	STA Objects_Timer, X

Unstable_CheckFallTooFarRTS:
	RTS

Unstable_CheckContact:
	LDA Platform_MadeContact, X
	BEQ Unstable_CheckContactRTS

Unstable_CheckContactRTS:
	RTS
  


Platform_DrawCopy:
	LDA #$00
	STA Objects_Orientation, X
	
	LDA Objects_SpritesVerticallyOffScreen,X
	BEQ Platform_DoDrawCopy

	RTS

Platform_DoDrawCopy:
	INC <Objects_YZ, X
	JSR Object_DrawMirrored

	DEC <Objects_YZ, X

	LDA Objects_SpritesHorizontallyOffScreen,X
	AND #SPRITE_2_HINVISIBLE
	BNE Platform_DrawCopy1

	LDA <Objects_SpriteX, X
	ADD #$10
	STA Sprite_RAMX + 8, Y

	LDA <Objects_SpriteY, X
	STA Sprite_RAMY + 8, Y

	LDA Sprite_RAMAttr, Y
	STA Sprite_RAMAttr + 8, Y

	LDA Sprite_RAMTile, Y
	STA Sprite_RAMTile + 8, Y

Platform_DrawCopy1:
	LDA Objects_SpritesHorizontallyOffScreen,X
	AND #SPRITE_3_HINVISIBLE
	BNE Platform_DrawCopy2

	LDA <Objects_SpriteX, X
	ADD #$18
	STA Sprite_RAMX + 12, Y

	LDA <Objects_SpriteY, X
	STA Sprite_RAMY + 12, Y

	LDA Sprite_RAMAttr + 4, Y
	STA Sprite_RAMAttr + 12, Y

	LDA Sprite_RAMTile + 4, Y
	STA Sprite_RAMTile + 12, Y

Platform_DrawCopy2:
	LDA Objects_SpritesHorizontallyOffScreen,X
	AND #SPRITE_4_HINVISIBLE
	BNE Platform_DrawCopy3

	LDA <Objects_SpriteX, X
	ADD #$20
	STA Sprite_RAMX + 16, Y

	LDA <Objects_SpriteY, X
	STA Sprite_RAMY + 16, Y

	LDA Sprite_RAMAttr, Y
	STA Sprite_RAMAttr + 16, Y

	LDA Sprite_RAMTile, Y
	STA Sprite_RAMTile + 16, Y

Platform_DrawCopy3:
	
	LDA Objects_SpritesHorizontallyOffScreen,X
	AND #SPRITE_5_HINVISIBLE
	BNE Platform_DrawCopy4

	LDA <Objects_SpriteX, X
	ADD #$28
	STA Sprite_RAMX + 20, Y

	LDA <Objects_SpriteY, X
	STA Sprite_RAMY + 20, Y

	LDA Sprite_RAMAttr + 4, Y
	STA Sprite_RAMAttr + 20, Y

	LDA Sprite_RAMTile + 4, Y
	STA Sprite_RAMTile + 20, Y

Platform_DrawCopy4:
	RTS		 ; Return

Platform_PlayerStandCopy:
	LDA <Player_YVel
	BMI Platform_PlayerStandCopy1

	LDA HitTest_Result
	AND #HITTEST_BOTTOM
	BEQ Platform_PlayerStandCopy1

	LDA Player_BoundBottom
	SUB Objects_BoundTop, X
	CMP #$04
	BCS Platform_PlayerStandCopy1

	LDA #$01
	STA Platform_SteppedOn, X
	STA Platform_MadeContact, X

Platform_PlayerStandCopy1:	
	RTS

Platform_PlayerOffsetCopy:
	.byte $01, $00
	.byte $00, $00

Platform_ContactCheckCopy:
	LDA Platform_MadeContact, X
	BEQ Platform_CheckCopyRTS
	
	LDA <Objects_YZ,X	 
	SUB #30
	STA <Player_Y

	LDA <Objects_YHiZ,X
	SBC #$00
	STA <Player_YHi

	LDA #$00
	STA <Player_YVel
	STA Player_InAir

	LDA <Objects_XVelZ, X
	STA Player_CarryXVel
	
Platform_CheckCopyRTS:
	RTS



ObjInit_Snifit:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #$02
	STA Objects_Health, X

	LDA #$40
	STA Objects_Timer, X

	JSR Object_CalcBoundBox
	JSR Object_FacePlayer

	LDA Objects_Property, X
	BNE Snifit_InitRTS

	JSR Object_MoveTowardsPlayer

Snifit_InitRTS:
	RTS

Snifit_Frame = Objects_Data1
Snifit_Action = Objects_Data2
Snifit_ShotsLeft = Objects_Data3
Snifit_ShootTimer = Objects_Data4

Snifit_Shots:
	.byte $03, $02, $01, $04, $02, $01, $02, $03

ObjNorm_Snifit:
	LDA <Player_HaltGameZ
	BEQ Snifit_Norm
	JMP Snifit_Draw

Snifit_Norm:
	JSR Object_DeleteOffScreen
	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_DetectTiles
	JSR Object_InteractWithTiles
	JSR Object_AttackOrDefeat

	LDA Snifit_Action, X
	JSR DynJump

	.word Snifit_March
	.word Snifit_Shoot

Snifit_March:
	LDA Objects_Timer, X
	BNE Snifit_MarchDone

	LDA #$10
	STA Snifit_ShootTimer, X
	INC Snifit_Action, X

	LDA #$00
	STA Objects_XVelZ, X

	LDA RandomN
	AND #$07
	TAY

	LDA Snifit_Shots, Y
	STA Snifit_ShotsLeft, X

Snifit_MarchDone:
	JMP Snifit_Animate

Snifit_ShootXVel:
	.byte $18, $E8

Snifit_WalkTimer:
	.byte $40, $60, $50, $40

Snifit_Draw2:
	JMP Snifit_Draw
	
Snifit_Shoot:
	LDA Snifit_ShootTimer, X
	BEQ Snifit_DoShot

	DEC Snifit_ShootTimer, X
 	BNE Snifit_Draw2

	LDA Snifit_ShotsLeft, X
	BEQ Snifit_Draw2

	LDA RandomN
	AND #$01
	BNE Snifit_Draw2
	

	LDA #$C0
	STA <Objects_YVelZ, X
	BNE Snifit_Draw2

Snifit_DoShot:
	JSR Object_FacePlayer
	LDA Snifit_ShotsLeft, X
	BNE Snifit_CheckYVel

	LDA #$00
	STA Snifit_Action, X

	LDA RandomN
	AND #$03
	TAY 
	
	LDA Snifit_WalkTimer, Y
	STA Objects_Timer, X

	LDA Objects_Property, X
	BEQ Snifit_ShootFacePlayer
	JMP Snifit_Draw

Snifit_ShootFacePlayer:
	JSR Object_MoveTowardsPlayer
	JMP Snifit_Draw

Snifit_CheckYVel:
	LDA <Objects_YVelZ, X
	BMI Snifit_ShootDone

	LDA Objects_SpritesVerticallyOffScreen, X
	ORA Objects_SpritesHorizontallyOffScreen, X
	BNE Snifit_FireballNoFlip

	JSR Object_PrepProjectile
	BCC Snifit_ShootDone

	LDA #SOBJ_FIREBALL
	STA SpecialObj_ID, Y

	LDA #$01
	STA SpecialObj_Data1, Y
	STA SpecialObj_Data3, Y

	LDA #$E8
	STA SpecialObj_XVel, Y

	LDA #$00
	STA SpecialObj_YVel, Y

	LDA <Objects_XZ, X
	ADD #$04
	STA SpecialObj_X, Y

	LDA <Objects_XHiZ, X
	STA SpecialObj_XHi, Y

	LDA <Objects_YZ, X
	STA SpecialObj_Y, Y

	LDA <Objects_YHiZ, X
	STA SpecialObj_YHi, Y

	LDA Objects_Orientation, X
	BEQ Snifit_FireballNoFlip

	LDA #$18
	STA SpecialObj_XVel, Y

Snifit_FireballNoFlip:
	DEC Snifit_ShotsLeft, X

	LDA #$30
	STA Snifit_ShootTimer, X

Snifit_ShootDone:
	JMP Snifit_Draw

Snifit_Animate:
	LDA Objects_Property, X
	BNE Snifit_AnimateAnyway

	LDA <Objects_XVelZ, X
	BEQ Snifit_Draw

Snifit_AnimateAnyway:
	INC Snifit_Frame, X

	LDA Snifit_Frame, X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame, X

Snifit_Draw:
	JMP Object_Draw



Birdo_WalkTicker = Objects_Data1
Birdo_Pause = Objects_Data2
Birdo_HurtTimer = Objects_Data3
Birdo_PrevHealth = Objects_Data4
Birdo_PalState = Objects_Data5
Birdo_TickIndex = Objects_Data6

Birdo_FireBallYVel:
	.byte $00, $03, $06, $09
	.byte $00, $FD, $FA, $F7

Birdo_Pal:
	.byte SPR_PAL1, SPR_PAL2

ObjInit_Birdo:
	LDA #$04
	STA Objects_SpritesRequested, X

	LDA #BOUND16x32TALL
	STA Objects_BoundBox, X

	LDA #(ATTR_ICEPROOF)
	STA Objects_WeaponAttr, X

	LDA #(ATTR_NOICE | ATTR_BUMPNOKILL)
	STA Objects_BehaviorAttr, X

	LDA RandomN
	AND #$03
	TAY

	LDA Birdo_ShootTimers, Y
	STA Objects_Timer, X

	LDA #$08
	STA Objects_ExpPoints, X

	LDA #$04
	STA Objects_Health, X
	STA Birdo_PrevHealth, X

	LDY Objects_Property, X

	LDA Birdo_Pal, Y
	STA Objects_SpriteAttributes, X
	STA Birdo_PalState, X
	RTS

Birdo_Walk:
	.byte $00, $0C, $00, $F4
	.byte $01, $01, $FF, $FF

Birdo_EggShoot:
	.byte $E0, $20

Birdo_ShootTimers:
	.byte $80, $C0, $A0, $E0

ObjNorm_Birdo:
	LDA <Player_HaltGameZ
	BEQ ObjNorm_Birdo1
	JMP Birdo_Draw

ObjNorm_Birdo1:
	LDA Objects_State, X
	CMP #OBJSTATE_KILLED
	BNE ObjNorm_Birdo2
	
	JMP Object_Draw16x32

ObjNorm_Birdo2:
	JSR Object_DeleteOffScreen

	LDA Objects_Health, X
	CMP Birdo_PrevHealth, X
	BEQ Birdo_NotHit

	LDA Birdo_HurtTimer, X
	BEQ Birdo_Hit
	
	LDA Birdo_PrevHealth, X
	STA Objects_Health, X
	JMP Birdo_NotHit

Birdo_Hit:
	LDA Objects_Health, X
	STA Birdo_PrevHealth, X
	
	LDA #$1F
	STA Birdo_HurtTimer, X
	STA Objects_Timer2, X

Birdo_NotHit:
	LDA Birdo_HurtTimer, X
	BEQ Birdo_CheckPause

	DEC Birdo_HurtTimer, X
	JMP ObjNorm_BirdoDraw

Birdo_CheckPause:
	LDA Birdo_Pause, X
	BNE Birdo_PauseShoot

Birdo_Waltz:
	INC Birdo_WalkTicker, X
	LDA Birdo_WalkTicker, X
	AND #$C0
	CLC
	ROL A
	ROL A
	ROL A
	TAY

	STA Birdo_TickIndex, X

	LDA Birdo_Walk, Y
	STA Objects_XVelZ, X 

	LDA Objects_Timer, X
	BEQ Birdo_ResetTimer
	
	JMP Birdo_Norm
	
Birdo_ResetTimer:
	LDA #$20
	STA Objects_Timer, X

	LDA #$00
	STA Objects_XVelZ, X

	LDA #$02
	STA Birdo_Pause, X
	JMP Birdo_Norm

Birdo_PauseShoot:
	LDA Objects_Timer, X
	BNE Birdo_TryShoot

	LDA RandomN
	AND #$03
	TAY

	LDA Birdo_ShootTimers, Y
	STA Objects_Timer, X

	LDA #$00
	STA Birdo_Pause, X

Birdo_TryShoot:
	CMP #$08
	BNE Birdo_Norm

	LDA Objects_SpritesVerticallyOffScreen,X
	ORA Objects_SpritesHorizontallyOffScreen,X
	BNE Birdo_Norm

	LDY #$00
	LDA Objects_Orientation, X
	BEQ Birdo_EggNoFlip
	
	INY

Birdo_EggNoFlip:
	LDA Birdo_EggShoot, Y
	STA <Temp_Var16

	JSR SpecialObject_FindEmpty
	CPY #$FF
	BEQ Birdo_Norm

	LDA #$00
	STA SpecialObj_YVel,Y

	LDA Objects_Property, X
	BEQ Birdo_ShootEgg
	 
	LDA RandomN
	AND #$07
	TAX

	LDA Birdo_FireBallYVel, X
	STA SpecialObj_YVel,Y

	LDX <CurrentObjectIndexZ

	LDA #SOBJ_BIGFIREBALL
	BNE Birdo_Shoot

Birdo_ShootEgg:
	LDA #SOBJ_EGG

Birdo_Shoot:
	STA SpecialObj_ID,Y

	LDA #$10
	STA SpecialObj_Timer,Y

	LDA #$00
	STA SpecialObj_HurtEnemies, Y
	
	STA Egg_HitWall, Y

	LDA <Objects_XZ,X
	STA SpecialObj_X,Y

	LDA <Objects_XHiZ,X
	STA SpecialObj_XHi,Y

	LDA <Objects_YZ,X
	ADD #$00
	STA SpecialObj_Y,Y

	LDA <Objects_YHiZ, X
	ADC #$00
	STA SpecialObj_YHi,Y

	LDA <Temp_Var16
	STA SpecialObj_XVel,Y

	LDA RandomN
	AND #$01
	BNE Birdo_Norm

	LDA #$28
	STA Objects_Timer, X

Birdo_Norm:
	JSR Object_Move
	JSR Object_CalcBoundBoxForced

	
	LDY Birdo_TickIndex, X
	LDA Birdo_Walk + 4,Y
	STA Objects_EffectiveXVel, X

	JSR Object_DetectTiles
	JSR Object_InteractWithTiles

	LDA <Objects_TilesDetectZ, X
	AND #(HIT_LEFTWALL | HIT_RIGHTWALL)
	BEQ Birdo_InteractPlayer

	LDA Birdo_WalkTicker, X
	ADD #$40
	AND #$C0
	STA Birdo_WalkTicker, X

Birdo_InteractPlayer:
	JSR Object_FacePlayer
	JSR Object_InteractWithPlayer

ObjNorm_BirdoDraw:
	LDA <Objects_XZ, X
	LSR A
	LSR A
	AND #$01
	ORA Birdo_Pause, X
	STA Objects_Frame, X

	LDA Birdo_HurtTimer, X
	BEQ Birdo_Draw

	EOR #$02
	AND #$02
	BEQ Birdo_Flash

	LDA Birdo_PalState, X

Birdo_Flash:
	STA Objects_SpriteAttributes, X

	LDA Objects_Frame, X
	AND #$01
	ORA #$04
	STA Objects_Frame, X
	JMP Object_Draw16x32

Birdo_Draw:
	JMP Object_Draw16x32

Birdo_HurtOrStand:
	LDA HitTest_Result
	AND #HITTEST_BOTTOM
	BEQ Birdo_Hurt

	LDA <Player_YVel
	BMI Birdo_StandRTS

	LDA Player_BoundBottom
	SUB Objects_BoundTop, X
	CMP #$04
	BCS Birdo_Hurt
	
	LDA <Objects_YZ,X	 
	SUB #$1D
	STA <Player_Y

	LDA <Objects_YHiZ,X
	SBC #$00
	STA <Player_YHi

	LDA #$00
	STA Player_InAir
	STA PlayerProj_YVelFrac
	STA <Player_YVel

	LDA <Objects_XVelZ, X
	STA Player_CarryXVel
	
Birdo_StandRTS:
	RTS

Birdo_Hurt:	
	JMP Player_GetHurt

ObjInit_Ninji:
	LDA #$04
	STA Objects_SpritesRequested, X

	LDA Objects_State, X

	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #(ATTR_STOMPKICKSOUND)
	STA Objects_BehaviorAttr, X

	LDA #$20
	STA Objects_Timer, X
	RTS

Ninji_Frame = Objects_Data1
Ninji_Action = Objects_Data2
Ninji_HoldStar = Objects_Data3

ObjNorm_Ninji:
	LDA <Player_HaltGameZ
	BEQ Ninji_Norm

	JMP Ninji_Draw

Ninji_Norm:
	JSR Object_DeleteOffScreen 
	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_DetectTiles
	JSR Object_InteractWithTiles
	JSR Object_AttackOrDefeat
	
	LDA <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ Ninji_Grounded

	JSR Object_FacePlayer

Ninji_Grounded:
	JSR Ninji_DoAction

Ninji_Animate:
	LDA Ninji_Action, X
	BNE Ninji_Draw

	INC Ninji_Frame, X
	LDA Ninji_Frame, X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame, X

Ninji_Draw:
	JSR Object_Draw

	LDA Ninji_HoldStar, X
	BEQ Ninji_DrawStar2

	LDA Objects_SpritesVerticallyOffScreen,X
	AND #SPRITE_0_VINVISIBLE
	BNE Ninji_DrawStar2

	LDA Objects_SpritesHorizontallyOffScreen,X
	AND #SPRITE_0_HINVISIBLE
	BNE Ninji_DrawStar1

	LDA Objects_SpriteX, X
	STA Sprite_RAMX + 8, Y

	LDA Objects_SpriteY, X
	SUB #$0C
	STA Sprite_RAMY  + 8, Y

	LDA #$B9
	STA Sprite_RAMTile + 8, Y

	LDA #SPR_PAL3
	STA Sprite_RAMAttr + 8, Y

Ninji_DrawStar1:
	LDA Objects_SpritesHorizontallyOffScreen,X
	AND #SPRITE_1_INVISIBLE
	BNE Ninji_DrawStar2
	
	LDA Objects_SpriteX, X
	ADD #$08
	STA Sprite_RAMX + 12, Y

	LDA Objects_SpriteY, X
	SUB #$0C
	STA Sprite_RAMY  + 12, Y

	LDA #$B9
	STA Sprite_RAMTile + 12, Y

	LDA #(SPR_PAL3 | SPR_HFLIP | SPR_VFLIP)
	STA Sprite_RAMAttr + 12, Y

Ninji_DrawStar2:
	RTS

Ninji_DoAction:
	LDA Ninji_Action, X
	JSR DynJump

	.word Ninji_Idle
	.word Ninji_Jump
	.word Ninji_Hover
	.word Ninji_ThrowStar
	.word Ninji_Fall

Ninji_Jumps: .byte $B0, $BC, $C8, $D4

Ninji_Idle:
	LDA Objects_Timer, X
	BNE Ninji_IdleDone

	INC Ninji_Action, X
	
	LDA RandomN, X
	AND #$03
	TAY

	LDA Ninji_Jumps, Y
	STA <Objects_YVelZ, X

	LDA #$01
	STA Objects_Frame, X
	STA Ninji_HoldStar, X

Ninji_IdleDone:
	RTS

Ninji_Jump:
	LDA <Objects_YVelZ, X
	BMI Ninji_JumpDone

	INC Ninji_Action, X

	LDA #$08
	STA Objects_Timer, X

Ninji_JumpDone:
	RTS

Ninji_Hover:
	LDA #$00
	STA <Objects_YVelZ, X

	LDA Objects_Timer, X
	BNE Ninji_HoverDone

	INC Ninji_Action, X

Ninji_HoverDone:
	RTS

Ninji_ThrowStar:
	LDA #$00
	STA Objects_Frame, X
	STA <Objects_YVelZ, X
	STA Ninji_HoldStar, X

	LDA Objects_SpritesHorizontallyOffScreen,X
	ORA Objects_SpritesVerticallyOffScreen,X
	BNE Ninji_ThrowDone

	JSR Object_PrepProjectile	

	LDA #SOBJ_NINJASTAR
	STA SpecialObj_ID,Y

	LDA <Objects_XZ, X
	STA SpecialObj_X, Y

	LDA <Objects_XHiZ, X
	STA SpecialObj_XHi, Y

	LDA <Objects_YZ, X
	SUB #$0C
	STA SpecialObj_Y, Y

	LDA <Objects_YHiZ, X
	SBC #$00
	STA SpecialObj_YHi, Y

	JSR Object_AimProjectile

	LDA SpecialObj_XVel, Y
	JSR Double_Value
	STA SpecialObj_XVel, Y

	LDA SpecialObj_YVel, Y
	JSR Double_Value
	STA SpecialObj_YVel, Y

Ninji_ThrowDone:
	INC Ninji_Action, X
	LDA #$00
	STA Objects_Frame, X
	RTS		 ; Return

Ninji_Fall:
	LDA <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ Ninji_FallDone

	LDA #$60
	STA Objects_Timer, X
	
	LDA #$00
	STA Ninji_Action, X
	STA Objects_Frame, X

Ninji_FallDone:
	RTS

NinjiIdleTimes:
	.byte $30, $40, $38, $48
	


JumpControl_Allowed:
	.byte $03, $02, $01

JumpControl_TilesProps:
	.byte $00, TILE_PROP_SOLID_ALL, TILE_PROP_SOLID_ALL, TILE_PROP_SOLID_ALL

JumpControl_SwitchProps:
	.byte (TILE_PROP_SOLID_TOP | TILE_PROP_ESWITCH), $00, $00, $00

JumpControl_PatternTables:
	.byte $66, $64, $62, $60

JumpControl_Remaining = Objects_Data1

ObjInit_JumpControl:
	LDY Objects_Property, X

	LDA JumpControl_Allowed, Y
	STA JumpControl_Remaining, X

	LDY JumpControl_Remaining, X
	
	LDA JumpControl_PatternTables, Y
	STA PatTable_BankSel

	LDA JumpControl_TilesProps, Y
	STA TileProperties + $70

	LDA #$00
	STA EventSwitch
	STA TileProperties + $E2
	STA TileProperties + $E3
	JMP Object_NoInteractions


ObjNorm_JumpControl:
	LDA JumpControl_Remaining, X
	BNE JumpControl_CheckJump
	
	LDA EventSwitch
	BEQ JumpControl_RTS

	LDY Objects_Property, X

	LDA JumpControl_Allowed, Y
	STA JumpControl_Remaining, X

	LDY JumpControl_Remaining, X
	
	LDA JumpControl_PatternTables, Y
	STA PatTable_BankSel

	LDA JumpControl_TilesProps, Y
	STA TileProperties + $70

	LDA #$00
	STA EventSwitch
	STA TileProperties + $E2
	STA TileProperties + $E3
	RTS

JumpControl_CheckJump:
	LDA <Player_Jumped
	BEQ JumpControl_RTS

	DEC JumpControl_Remaining, X
	
	LDY JumpControl_Remaining, X
	
	LDA JumpControl_PatternTables, Y
	STA PatTable_BankSel

	LDA JumpControl_TilesProps, Y
	STA TileProperties + $70

	LDA JumpControl_SwitchProps, Y
	STA TileProperties + $E2
	STA TileProperties + $E3

JumpControl_RTS:
	RTS		
	
    .org ObjectGroup_InitJumpTable
;****************************** OBJECT INITIALIZATION ******************************
    .word ObjInit_Explosion	; Object $50 - OBJ_EXPLOSION
	.word ObjInit_DoNothing	; Object $51 - OBJ_ROTODISCDUAL
	.word ObjInit_Spintula	; Object $52 - OBJ_SPINTULA
	.word ObjInit_PipePodobo	; Object $53 - OBJ_PIPEPODOBO
	.word ObjInit_DoNothing		; Object $54 - OBJ_DONUTLIFTSHAKEFALL
	.word ObjInit_BobOmb		; Object $55 - OBJ_BOBOMB
	.word ObjInit_DoNothing	; Object $56 - OBJ_PIRANHASIDEWAYSLEFT
	.word ObjInit_DoNothing	; Object $57 - OBJ_PIRANHASIDEWAYSRIGHT
	.word ObjInit_Pyrantula		; Object $58 - OBJ_PYRANTULA
	.word ObjInit_FireSnake		; Object $59 - OBJ_FIRESNAKE
	.word ObjInit_DoNothing	; Object $5A - OBJ_ROTODISCCLOCKWISE
	.word ObjInit_DoNothing	; Object $5B - OBJ_ROTODISCCCLOCKWISE
	.word ObjInit_IceBlock		; Object $5C - OBJ_ICEBLOCK
	.word ObjInit_DoNothing		; Object $5D - OBJ_STONEBLOCK
	.word ObjInit_DoNothing	; Object $5E - OBJ_ROTODISCDUALOPPOSE
	.word ObjInit_DoNothing	; Object $5F - OBJ_ROTODISCDUALOPPOSE2
	.word ObjInit_DoNothing	; Object $60 - OBJ_ROTODISCDUALCCLOCK
	.word ObjInit_PhantomBlooper	; Object $61 - OBJ_SKULLBLOOPER
	.word ObjInit_Blooper		; Object $62 - OBJ_BLOOPER
	.word ObjInit_FloatMine	; Object $63 - OBJ_FLOATMINE

    .org ObjectGroup_NormalJumpTable
;****************************** OBJECT GAME LOOP ******************************
	.word ObjNorm_Explosion		; Object $50 - OBJ_EXPLOSION
	.word ObjNorm_DoNothing	; Object $51 - OBJ_ROTODISCDUAL
	.word ObjNorm_Spintula	; Object $52 - OBJ_SPINTULA
	.word ObjNorm_PipePodobo	; Object $53 - OBJ_PIPEPODOBO
	.word ObjNorm_DoNothing		; Object $54 - OBJ_DONUTLIFTSHAKEFALL
	.word ObjNorm_BobOmb		; Object $55 - OBJ_BOBOMB
	.word ObjNorm_DoNothing	; Object $56 - OBJ_PIRANHASIDEWAYSLEFT
	.word ObjNorm_DoNothing	; Object $57 - OBJ_PIRANHASIDEWAYSRIGHT
	.word ObjNorm_Pyrantula		; Object $58 - OBJ_PYRANTULA
	.word ObjNorm_FireSnake		; Object $59 - OBJ_FIRESNAKE
	.word ObjNorm_DoNothing		; Object $5A - OBJ_ROTODISCCLOCKWISE
	.word ObjNorm_DoNothing		; Object $5B - OBJ_ROTODISCCCLOCKWISE
	.word ObjNorm_IceBlock		; Object $5C - OBJ_ICEBLOCK
	.word ObjNorm_IceBlock		; Object $5D - OBJ_STONEBLOCK
	.word ObjNorm_DoNothing	; Object $5E - OBJ_ROTODISCDUALOPPOSE
	.word ObjNorm_DoNothing	; Object $5F - OBJ_ROTODISCDUALOPPOSE2
	.word ObjNorm_DoNothing	; Object $60 - OBJ_ROTODISCDUALCCLOCK
	.word ObjNorm_PhantomBlooper		; Object $61 - OBJ_SKULLBLOOPER
	.word ObjNorm_Blooper		; Object $62 - OBJ_BLOOPER
	.word ObjNorm_FloatMine	; Object $63 - OBJ_FLOATMINE

    .org ObjectGroup_CollideJumpTable
;****************************** OBJECT PLAYER INTERACTION ******************************
	.word Object_HurtPlayer	; Object $50 - OBJ_EXPLOSION
	.word ObjHit_DoNothing	; Object $51 - OBJ_ROTODISCDUAL
	.word ObjHit_DoNothing	; Object $52 - OBJ_SPINTULA
	.word ObjHit_DoNothing	; Object $53 - OBJ_PIPEPODOBO
	.word ObjHit_DoNothing	; Object $54 - OBJ_DONUTLIFTSHAKEFALL
	.word Object_Hold	; Object $55 - OBJ_BOBOMB
	.word ObjHit_DoNothing	; Object $56 - OBJ_PIRANHASIDEWAYSLEFT
	.word ObjHit_DoNothing	; Object $57 - OBJ_PIRANHASIDEWAYSRIGHT
	.word ObjHit_DoNothing	; Object $58 - OBJ_PYRANTULA
	.word ObjHit_DoNothing	; Object $59 - OBJ_FIRESNAKE
	.word ObjHit_DoNothing	; Object $5A - OBJ_ROTODISCCLOCKWISE
	.word ObjHit_DoNothing	; Object $5B - OBJ_ROTODISCCCLOCKWISE
	.word Object_Hold	; Object $5C - OBJ_ICEBLOCK
	.word ObjHit_DoNothing	; Object $5D - OBJ_STONEBLOCK
	.word ObjHit_DoNothing	; Object $5E - OBJ_ROTODISCDUALOPPOSE
	.word ObjHit_DoNothing	; Object $5F - OBJ_ROTODISCDUALOPPOSE2
	.word ObjHit_DoNothing	; Object $60 - OBJ_ROTODISCDUALCCLOCK
	.word ObjHit_DoNothing	; Object $61 - OBJ_SKULLBLOOPER
	.word ObjHit_DoNothing	; Object $62 - OBJ_BLOOPER
	.word FloatMine_Expload	; Object $63 - OBJ_FLOATMINE

    .org ObjectGroup_PatTableSel
;****************************** OBJECT PALETTE/SIZE ******************************
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $50 - OBJ_EXPLOSION
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $51 - OBJ_ROTODISCDUAL
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $52 - OBJ_SPINTULA
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $53 - OBJ_PIPEPODOBO
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $54 - OBJ_DONUTLIFTSHAKEFALL
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $55 - OBJ_BOBOMB
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH24	; Object $56 - OBJ_PIRANHASIDEWAYSLEFT
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH24	; Object $57 - OBJ_PIRANHASIDEWAYSRIGHT
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $58 - OBJ_PYRANTULA
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $59 - OBJ_FIRESNAKE
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $5A - OBJ_ROTODISCCLOCKWISE
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $5B - OBJ_ROTODISCCCLOCKWISE
	.byte OA1_PAL2 | OA1_WIDTH16 | OA1_WIDTH16	; Object $5C - OBJ_ICEBLOCK
	.byte OA1_PAL1 | OA1_WIDTH16 | OA1_WIDTH16	; Object $5D - OBJ_STONEBLOCK
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $5E - OBJ_ROTODISCDUALOPPOSE
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $5F - OBJ_ROTODISCDUALOPPOSE2
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $60 - OBJ_ROTODISCDUALCCLOCK
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $61 - OBJ_SKULLBLOOPER
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $62 - OBJ_BLOOPER
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH48	; Object $63 - OBJ_FLOATMINE

    .org ObjectGroup_PatTableSel
;****************************** OBJECT PATTERN TABLE ******************************
	.byte OPTS_NOCHANGE	; Object $50 - OBJ_EXPLOSION
	.byte OPTS_SETPT5 | $12	; Object $51 - OBJ_ROTODISCDUAL
	.byte OPTS_SETPT5 | $0A	; Object $52 - OBJ_SPINTULA
	.byte OPTS_NOCHANGE	; Object $53 - OBJ_PIPEPODOBO
	.byte OPTS_SETPT5 | $0E	; Object $54 - OBJ_DONUTLIFTSHAKEFALL
	.byte OPTS_SETPT5 | $0A	; Object $55 - OBJ_BOBOMB
	.byte OPTS_SETPT5 | $5A	; Object $56 - OBJ_PIRANHASIDEWAYSLEFT
	.byte OPTS_SETPT5 | $5A	; Object $57 - OBJ_PIRANHASIDEWAYSRIGHT
	.byte OPTS_SETPT5 | $0A	; Object $58 - OBJ_PYRANTULA
	.byte OPTS_SETPT5 | $0A	; Object $59 - OBJ_FIRESNAKE
	.byte OPTS_SETPT5 | $12	; Object $5A - OBJ_ROTODISCCLOCKWISE
	.byte OPTS_SETPT5 | $12	; Object $5B - OBJ_ROTODISCCCLOCKWISE
	.byte OPTS_NOCHANGE	; Object $5C - OBJ_ICEBLOCK
	.byte OPTS_NOCHANGE	; Object $5D - OBJ_STONEBLOCK
	.byte OPTS_SETPT5 | $12	; Object $5E - OBJ_ROTODISCDUALOPPOSE
	.byte OPTS_SETPT5 | $12	; Object $5F - OBJ_ROTODISCDUALOPPOSE2
	.byte OPTS_SETPT5 | $12	; Object $60 - OBJ_ROTODISCDUALCCLOCK
	.byte OPTS_SETPT5 | $1A	; Object $61 - OBJ_SKULLBLOOPER
	.byte OPTS_SETPT5 | $1A	; Object $62 - OBJ_BLOOPER
	.byte OPTS_SETPT5 | $1A	; Object $63 - OBJ_FLOATMINE

	.org ObjectGroup_KillAction	
;****************************** OBJECT DEATH ROUTINE ******************************
	.byte KILLACT_JUSTDRAW16X16	; Object $50 - OBJ_EXPLOSION
	.byte KILLACT_STANDARD	; Object $51 - OBJ_ROTODISCDUAL
	.byte KILLACT_POOFDEATH	; Object $52 - OBJ_SPINTULA
	.byte KILLACT_POOFDEATH	; Object $53 - OBJ_PIPEPODOBO
	.byte KILLACT_STANDARD	; Object $54 - OBJ_DONUTLIFTSHAKEFALL
	.byte KILLACT_POOFDEATH	; Object $55 - OBJ_BOBOMB
	.byte KILLACT_POOFDEATH	; Object $56 - OBJ_PIRANHASIDEWAYSLEFT
	.byte KILLACT_POOFDEATH	; Object $57 - OBJ_PIRANHASIDEWAYSRIGHT
	.byte KILLACT_POOFDEATH	; Object $58 - OBJ_PYRANTULA
	.byte KILLACT_POOFDEATH	; Object $59 - OBJ_FIRESNAKE
	.byte KILLACT_STANDARD	; Object $5A - OBJ_ROTODISCCLOCKWISE
	.byte KILLACT_STANDARD	; Object $5B - OBJ_ROTODISCCCLOCKWISE
	.byte KILLACT_NORMALSTATE	; Object $5C - OBJ_ICEBLOCK
	.byte KILLACT_NORMALSTATE	; Object $5D - OBJ_STONEBLOCK
	.byte KILLACT_STANDARD	; Object $5E - OBJ_ROTODISCDUALOPPOSE
	.byte KILLACT_STANDARD	; Object $5F - OBJ_ROTODISCDUALOPPOSE2
	.byte KILLACT_STANDARD	; Object $60 - OBJ_ROTODISCDUALCCLOCK
	.byte KILLACT_JUSTDRAWMIRROR	; Object $61 - OBJ_SKULLBLOOPER
	.byte KILLACT_POOFDEATH	; Object $62 - OBJ_BLOOPER
	.byte KILLACT_NORMALSTATE	; Object $63 - OBJ_FLOATMINE


OG5_POff .func (\1 - ObjectGroup05_PatternSets)

	.org ObjectGroup_PatternStarts	; <-- help enforce this table *here*
;****************************** OBJECT FRAME TABLE ******************************
	.byte OG5_POff(ObjP50), OG5_POff(ObjP51), OG5_POff(ObjP52), OG5_POff(ObjP53)
	.byte OG5_POff(ObjP54), OG5_POff(ObjP55), OG5_POff(ObjP56), OG5_POff(ObjP57)
	.byte OG5_POff(ObjP58), OG5_POff(ObjP59), OG5_POff(ObjP5A), OG5_POff(ObjP5B)
	.byte OG5_POff(ObjP5C), OG5_POff(ObjP5D), OG5_POff(ObjP5E), OG5_POff(ObjP5F)
	.byte OG5_POff(ObjP60), OG5_POff(ObjP61), OG5_POff(ObjP62), OG5_POff(ObjP63)


	.org ObjectGroup_PatternSets	; <-- help enforce this table *here*
;****************************** OBJECT FRAMES DEFINITION ******************************    
ObjectGroup05_PatternSets:

ObjP50:
ObjP51:
ObjP52:
ObjP53:
	.byte $8D, $8D, $8F, $8F, $95, $95

ObjP54:
	.byte $91, $93, $91, $93    

ObjP55:
	.byte $A7, $A9, $AB, $AD, $97, $99, $97, $99

ObjP56:
ObjP57:
	.byte $81, $83, $87, $89    

ObjP58:
	.byte $A1, $A1, $A3, $A3, $A5, $A5

ObjP59:
	.byte $81, $83, $85, $87, $85, $87

ObjP5A:
ObjP5B:
	.byte $A1, $A1, $A3, $A3, $A5 ,$A5

ObjP5C:
	.byte $61, $61

ObjP5D:
	.byte $97, $99, $97, $99, $61, $63

ObjP5E:
ObjP5F:
ObjP60:
	.byte $99, $9B, $9D, $9F

ObjP61:
	.byte $B5, $B5, $B7, $B7, $B5, $B5

ObjP62:

	.byte $B1, $B1, $B3, $B3, $B1, $B1
ObjP63:
	.byte $81, $83, $A1, $A3    

	; X and Y offsets for the exploding Bob-omb stars
BombStars_XOff:	.byte -$04, $04, $08, $04, -$04, -$08, $00, $08, $08, $00, -$08, -$08
BombStars_YOff:	.byte -$08, -$08, $00, $08, $08, $00, $08, $04, -$04, -$08, -$04, $04

Explosion_Offset = Objects_Data1

ObjInit_Explosion:
	LDA #$06
	STA Objects_SpritesRequested, X

	LDA #BOUND48x48
	STA Objects_BoundBox, X

	JSR Object_NoInteractions

	LDA #$18
	STA Objects_Timer,X

	LDA Sound_QLevel1
	ORA #SND_LEVELBABOOM
	STA Sound_QLevel1

	LDA #$10
	STA RotatingColor_Cnt
	RTS		 ; Return

ObjNorm_Explosion:
	
	LDA <Player_HaltGameZ
	BNE DrawEx	 ; If gameplay is halted, jump to PRG003_A82E

	INC Explosion_Offset,X	 ; Otherwise, Var4++

DrawEx:
	LDA Objects_Timer,X
	BNE PRG003_A836	 ; If timer has not expired, jump to PRG003_A836

	JMP Object_SetDeadEmpty	 ; Otherwise, mark Bob-omb as Dead/Empty and don't come back!

PRG003_A836:

	JSR Explosion_CalcBoundBox
	JSR Explosion_KillOthers
	JSR Object_InteractWithPlayer

Explosion_NoKill:
	JSR Object_CalcSpriteXY_NoHi

	; Temp_Var16 = 5
	LDA #$05
	STA <Temp_Var16

PRG003_A83D:
	; Temp_Var1 = Bob-omb's sprite Y
	LDA <Objects_SpriteY,X
	STA <Temp_Var1	

	; Temp_Var2 = Bob-omb's sprite X + 4
	LDA <Objects_SpriteX,X
	ADD #$04
	STA <Temp_Var2

	LDA Objects_Data1,X
	LSR A		 ; Var4 / 2
	PHA		 ; Save value

	; Temp_Var3 = 0 to 3, depending on Var4 / 2
	AND #$03
	STA <Temp_Var3

	LDX <Temp_Var16	 ; X = Temp_Var16

	PLA		 ; Restore Var4 / 2

	AND #$04	 ; Mask 0-3
	BEQ PRG003_A85C	 ; If result is zero, jump to PRG003_A85C

	; Otherwise, X += 6
	TXA
	ADD #$06
	TAX

PRG003_A85C:
	LDA <Temp_Var1
	ADD BombStars_YOff,X
	STA <Temp_Var1

	LDA <Temp_Var2
	ADD BombStars_XOff,X
	STA <Temp_Var2

	DEC <Temp_Var3	 ; Temp_Var3--
	BPL PRG003_A85C	 ; While Temp_Var3 >= 0, loop!

	LDX <CurrentObjectIndexZ		 ; X = object slot index

	JSR Sprite_NoCarryIfVisible
	BCS PRG003_A89D	 ; If this star is not visible, jump to PRG003_A89D

	LDA <Temp_Var16
	ASL A
	ASL A		; A = Temp_Var16 * 4 (one sprite per star)
	ADC Object_SpriteRAMOffset,X	 ; Add the base Sprite_RAM offset
	TAY		 ; -> 'Y'

	; Star Y
	LDA <Temp_Var1
	STA Sprite_RAM+$00,Y

	; Star X
	LDA <Temp_Var2
	STA Sprite_RAM+$03,Y

	; Star pattern
	LDA #$17
	STA Sprite_RAM+$01,Y

	LDA <Counter_1
	LSR A	
	LSR A	
	ADD <CurrentObjectIndexZ
	AND #$03	 ; Palette select 0 to 3
	STA Sprite_RAM+$02,Y	 ; Set attributes

PRG003_A89D:
	DEC <Temp_Var16	 ; Temp_Var16--
	BPL PRG003_A83D	 ; While Temp_Var16 >= 0, loop!

Explosion_BumpBlocks:
	LDA Objects_Timer,X
	AND #$07
	TAY

	LDA <Objects_XZ, X
	ADD ExplodeXOffsets + 8, Y
	STA Tile_DetectionX

	LDA <Objects_XHiZ, X
	ADC ExplodeXOffsets, Y
	STA Tile_DetectionXHi

	LDA <Objects_YZ, X
	ADD ExplodeYOffsets + 8, Y
	STA Tile_DetectionY

	LDA <Objects_YHiZ, X
	ADC ExplodeYOffsets, Y
	STA Tile_DetectionYHi

	JSR Object_DetectTile

	LDA Tile_LastProp
	CMP #(TILE_PROP_SOLID_TOP | TILE_PROP_STONE)
	BEQ Explosion_Bust

	CMP #(TILE_PROP_SOLID_ALL | TILE_PROP_STONE)
	BEQ Explosion_Bust 

	CMP #(TILE_PROP_SOLID_TOP | TILE_PROP_ENEMYSOLID)
	BEQ Explosion_Bust

	CMP #(TILE_PROP_SOLID_ALL | TILE_PROP_ENEMYSOLID)
	BEQ Explosion_Bust

	CMP #(TILE_PROP_ITEM)
	BCS Explosion_Bump

Explosion_BumpRTS:
	RTS

Explosion_Bust:
	LDA #TILE_ITEM_BRICK
	STA Tile_LastProp

Explosion_Bump:
	JSR Object_DirectBumpBlocks
	RTS

Explosion_CalcBoundBox:
	LDA <Objects_XZ, X
	SUB #$18
	STA Objects_BoundLeft, X

	LDA <Objects_XHiZ, X
	SBC #$00
	STA Objects_BoundLeftHi, X

	LDA Objects_BoundLeft, X
	ADD #$30
	STA Objects_BoundRight, X

	LDA Objects_BoundLeftHi, X
	ADC #$00
	STA Objects_BoundRightHi, X
	
	LDA <Objects_YZ, X
	SUB #$18
	STA Objects_BoundTop, X

	LDA <Objects_YHiZ, X
	SBC #$00
	STA Objects_BoundTopHi, X

	LDA Objects_BoundTop, X
	ADD #$30
	STA Objects_BoundBottom, X

	LDA Objects_BoundTopHi, X
	ADC #$00
	STA Objects_BoundBottomHi, X
	RTS

ExplodeXOffsets:
	.byte $FF, $00, $00, $FF, $00, $FF, $00, $00
	.byte $F8, $08, $18, $F8, $18, $F8, $08, $18

ExplodeYOffsets
	.byte $FF, $FF, $FF, $00, $00, $00, $00, $00
	.byte $F8, $F8, $F8, $08, $08, $18, $18, $18

Sprite_NoCarryIfVisible:
	LDA Objects_SpritesVerticallyOffScreen,X	 
	BNE PRG003_B8E7	 ; If any of the sprites are vertically off-screen, jump to PRG003_B8E7

	LDA <Objects_SpriteY,X
	CMP #208
	BGE PRG003_B8E7	 ; If sprite Y >= 208, jump to PRG003_B8E7

	LDY #$40	 ; Y = $40

	LDA <Objects_SpriteX,X
	BMI PRG003_B8DA	 ; If sprite X >= $80, jump to PRG003_B8DA

	LDY #$C0	 ; Y = $C0

PRG003_B8DA:
	CPY <Temp_Var2	 ; Compare $40 or $C0 to input X value

	EOR Objects_SpritesVerticallyOffScreen,X

	BMI PRG003_B8E5	 ; If there are inappropriate horizontally off-screen sprites (??) jump to PRG003_B8E5

	BLT PRG003_B8E7	 ; If input X value < 'Y', jump to PRG003_B8E7 (carry clear, but will set carry)
	BGE PRG003_B8E9	 ; If input X value >= 'Y', jump to PRG003_B8E9 (carry set, but will be clear)

PRG003_B8E5:
	BLT PRG003_B8E9	 ; If input X value < 'Y', jump to PRG003_B8E9 (carry clear)

PRG003_B8E7:
	SEC		 ; Set carry
	RTS		 ; Return

PRG003_B8E9:
	CLC		 ; Clear carry
	RTS		 ; Return

ObjInit_Spintula:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #(ATTR_STOMPKICKSOUND)
	STA Objects_BehaviorAttr, X

	JSR Object_CalcBoundBox
	JSR Object_DetectTiles
	
	LDA Object_BodyTileValue, X
	STA Spintula_DetectTile, X

	EOR #$01
	STA Spintula_DetectTile2, X
	RTS		 ; Return

Spintula_DetectTile = Objects_Data3
Spintula_DetectTile2 = Objects_Data4
Spintula_Action = Objects_Data5
Spintula_Frame = Objects_Data6
Spintula_Pause = Objects_Data7

ObjNorm_Spintula:
	LDA <Player_HaltGameZ
	BEQ ObjNorm_Spintula1
	
	JMP Object_DrawMirrored	

ObjNorm_Spintula1:
	JSR Object_DeleteOffScreen
	LDA Spintula_Pause, X
	BNE ObjNorm_Spintula2

	JSR Object_ApplyYVel_NoGravity

ObjNorm_Spintula2:
	LDA #$00
	STA Spintula_Pause, X
	
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat
	JSR Object_DetectTiles

	LDA Spintula_Action, X
	JSR DynJump
	
	.word Spintula_Wait
	.word Spintula_SpinDown
	.word Spintula_Wait2
	.word Spintula_SpinUp

Spintula_Wait:
	LDA Objects_Timer,X
	BNE Spintula_WaitRTS
	
	JSR Object_XDistanceFromPlayer
	CMP #$28
	
	BCS Spintula_WaitRTS
	INC Spintula_Action, X
	
	LDA #$20
	STA <Objects_YVelZ, X
	STA Spintula_Pause, X

Spintula_WaitRTS:
	JMP Object_DrawMirrored

Spintula_SpinDown:
	LDA <Objects_YHiZ, X
	BEQ Spintula_GoDown

	LDA <Objects_YZ, X
	CMP #$A0
	BCS Spintula_SpinDownStop

Spintula_GoDown:
	LDA Object_VertTileValue, X
	CMP Spintula_DetectTile, X
	BEQ Spintula_DrawWeb

	CMP Spintula_DetectTile2, X
	BNE Spintula_SpinDownStop

Spintula_DrawWeb:
	LDA <Objects_YZ, X
	AND #$0F
	BNE Spintual_DownDraw

	LDA Block_NeedsUpdate
	BEQ Spintual_DoDrawWeb
	
	INC Spintula_Pause, X
	BNE Spintula_SpinDownRTS

Spintual_DoDrawWeb:
	LDA Object_BodyTileValue, X
	ORA #$01
	JSR Object_ChangeBlock
	
Spintual_DownDraw:
	INC Spintula_Frame, X
	LDA Spintula_Frame, X
	LSR A
	AND #$01
	STA Objects_Frame, X
	
Spintula_SpinDownRTS:
	JMP Object_DrawMirrored

Spintula_SpinDownStop:
	INC Spintula_Action, X

	LDA #$20
	STA Objects_Timer,X

	LDA #$00
	STA <Objects_YVelZ, X
	JMP Object_DrawMirrored

Spintula_Wait2:
	LDA Objects_Timer, X
	BNE Spintula_Wait2Draw

	INC Spintula_Action, X
	LDA #$F0
	STA <Objects_YVelZ, X

Spintula_Wait2Draw:
	JMP Object_DrawMirrored

Spintula_SpinUp:

	LDA Object_VertTileValue, X
	CMP Spintula_DetectTile, X
	BEQ Spintula_DeleteWeb

	CMP Spintula_DetectTile2, X
	BNE Spintula_SpinUpStop

Spintula_DeleteWeb:
	LDA <Objects_YZ, X
	AND #$0F
	BNE Spintual_UpDraw

	LDA Block_NeedsUpdate
	BEQ Spintula_DoDeleteWeb

	INC Spintula_Pause, X
	BNE Spintula_SpinUpRTS

Spintula_DoDeleteWeb:
	LDA Object_BodyTileValue, X
	AND #$FE

	JSR Object_ChangeBlock
	
Spintual_UpDraw:
	INC Spintula_Frame, X
	LDA Spintula_Frame, X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame, X
	
Spintula_SpinUpRTS:
	JMP Object_DrawMirrored

Spintula_SpinUpStop:
	LDA #$00
	STA Spintula_Action, X

	LDA #$20
	STA Objects_Timer,X

	LDA #$00
	STA <Objects_YVelZ, X
	JMP Object_DrawMirrored


PipePodobo_YVel:
	.byte $20, $E0

PipePodobo_Orientation:
	.byte SPR_VFLIP, $00

PipePodobo_StartY = Objects_Data3
PipePodobo_StartYHi = Objects_Data4
PipePodobo_Frame = Objects_Data5
PipePodobo_Hidden = Objects_Data6

ObjInit_PipePodobo:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #(ATTR_FIREPROOF | ATTR_HAMMERPROOF | ATTR_NINJAPROOF | ATTR_TAILPROOF | ATTR_DASHPROOF | ATTR_STOMPPROOF)
	STA Objects_WeaponAttr, X

	LDA #(ATTR_SHELLPROOF | ATTR_NOICE )
	STA Objects_BehaviorAttr, X

	LDA #$01
	STA Objects_Health, X

	LDA Objects_Property, X
	AND #$01
	BEQ ObjInit_PipePodobo1

	LDA #$0A
	STA PatTable_BankSel+4

ObjInit_PipePodobo1:
	LDA Objects_Property, X
	AND #$02
	LSR A
	TAY

	LDA PipePodobo_YVel, Y
	STA Objects_YVelZ, X

	LDA PipePodobo_Orientation, Y
	STA Objects_Orientation,X

	LDA #SPR_BEHINDBG
	ORA Objects_SpriteAttributes, X
	STA Objects_SpriteAttributes, X

	; Store original Y/Hi into Var5/Var4
	LDA <Objects_YZ,X
	STA PipePodobo_StartY,X

	LDA <Objects_YHiZ,X
	STA PipePodobo_StartYHi,X

	LDA <Objects_XZ, X
	ADD #$08
	STA <Objects_XZ, X

	RTS

ResetPipePodobo:
	LDA #$20
	STA Objects_Timer, X

	LDA PipePodobo_StartY, X
	STA <Objects_YZ, X

	LDA PipePodobo_StartYHi, X
	STA <Objects_YHiZ, X
	RTS		 ; Return

ObjNorm_PipePodobo:
	LDA <Player_HaltGameZ
	BEQ ObjNorm_PipePodobo1

	JMP Object_DrawMirrored

ObjNorm_PipePodobo1:
	JSR Object_DeleteOffScreen
	LDA Objects_Timer, X
	BEQ ObjNorm_PipePodobo2

	RTS

ObjNorm_PipePodobo2:
	JSR Object_ApplyYVel_NoGravity
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat	 ; Handle Player collision with Podoboo

	LDA <Objects_YZ, X
	AND #$0F
	BNE PipePodobo_Animate

	JSR Object_DetectTiles
	LDA Object_BodyTileProp, X
	CMP #TILE_PROP_SOLID_ALL
	BCC PipePodobo_Animate

	JSR ResetPipePodobo

PipePodobo_Animate:
	; Frame loop 0-2
	INC PipePodobo_Frame, X
	LDA PipePodobo_Frame, X
	LSR A
	LSR A
	LSR A
	AND #$03
	CMP #$03
	BCC PipePodobo_StoreFrame

	LDA #$00
	STA PipePodobo_Frame, X

PipePodobo_StoreFrame:
	STA Objects_Frame, X
	
PipePodobo_Draw:
	LDA Objects_Timer, X
	BEQ PipePodobo_DrawAnyway

	RTS

PipePodobo_DrawAnyway:
	JMP Object_DrawMirrored	    

ObjInit_BobOmb:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #(ATTR_FIREPROOF | ATTR_ICEPROOF | ATTR_NINJAPROOF)
	STA Objects_WeaponAttr, X

	LDA #(ATTR_STOMPKICKSOUND | ATTR_WINDAFFECTS | ATTR_BUMPNOKILL | ATTR_CARRYANDBUMP)
	STA Objects_BehaviorAttr, X

	JSR Object_MoveTowardsPlayer
	RTS		 ; Return

BobOmb_Action = Objects_Data1
BobOmb_BehindTimer = Objects_Data2
BobOmb_Frame = Objects_Data3
BobOmb_Activated = Objects_Data4
BobOmb_Unstable = Objects_Data5

ObjNorm_BobOmb:
	LDA <Player_HaltGameZ
	BEQ BobOmb_DoAction

	JMP Object_Draw

BobOmb_DoAction:
	
	LDA Objects_State, X
	CMP #OBJSTATE_KILLED

	BEQ BobOmb_Death

	LDA BobOmb_Action, X
	JSR DynJump

	.word BobOmb_Norm
	.word BobOmb_Left
	.word BobOmb_Right
	.word BobOmb_Raise
	.word BobOmb_Drop

BobOmb_Death:

	LDA Objects_PlayerProjHit, X
	CMP #HIT_FIREBALL
	BNE BobOmb_Death1

	LDA #$01
	STA Explosion_Timer, X

	LDA #OBJSTATE_NORMAL
	STA  Objects_State, X

BobOmb_Death1:
	JMP BobOmb_Draw

BobOmb_Raise:
	LDA Objects_Timer, X
	BEQ BobOmb_PopOut

	CMP #$20
	BCC BobOmb_RaiseDone

	LDA #$F0
	STA <Objects_YVelZ, X
	JSR Object_ApplyYVel_NoGravity
	JMP BobOmb_Draw

BobOmb_PopOut:
	JSR Object_CalcBoundBox
	JSR Object_MoveDirectionFacing
	
	LDA #$D0
	STA <Objects_YVelZ, X

	LDA #$00
	STA BobOmb_Action, X

	LDA #$08
	STA BobOmb_BehindTimer, X

BobOmb_RaiseDone:
	JMP BobOmb_Draw

BobOmb_Drop:
	LDA Objects_Timer, X
	BEQ BobOmb_DropDown

	CMP #$20
	BCC BobOmb_DropDone

	LDA #$10
	STA <Objects_YVelZ, X
	JSR Object_ApplyYVel_NoGravity
	JMP BobOmb_Draw

BobOmb_DropDown:
	JSR Object_CalcBoundBox
	
	LDA #$01
	STA <Objects_YVelZ, X

	LDA #$00
	STA BobOmb_Action, X

	LDA #$08
	STA BobOmb_BehindTimer, X

BobOmb_DropDone:
	JMP BobOmb_Draw

BobOmb_Left:
	LDA Objects_Timer, X
	CMP #$10
	BEQ BobOmb_Out

	LDA #$F8
	STA <Objects_XVelZ, X
	JSR Object_ApplyXVel

	LDA #$00
	STA Objects_Orientation, X

	JMP BobOmb_Animate

BobOmb_Right:
	LDA Objects_Timer, X
	BEQ BobOmb_Out

	LDA #$08
	STA <Objects_XVelZ, X
	JSR Object_ApplyXVel

	LDA #SPR_HFLIP
	STA Objects_Orientation, X

	JMP BobOmb_Animate

BobOmb_Out:
	LDA #$00
	STA BobOmb_Action, X

	LDA #$08
	STA BobOmb_BehindTimer, X
	JMP BobOmb_Animate

BobOmb_Norm:

	JSR Object_DeleteOffScreen	 
	JSR Object_Move
	JSR Object_FaceDirectionMoving
	JSR Object_CalcBoundBox

	LDA <Objects_XVelZ, X
	BNE BobOmb_Norm1

	JSR Object_FacePlayerOnLanding

BobOmb_Norm1:

	LDA Explosion_Timer, X
	ORA BobOmb_Unstable, X
	BEQ BobOmb_Attack

	JSR Object_DetectTiles
	
	LDA BobOmb_Unstable, X
	BNE BobOmb_UnstableCheck

	JSR Object_DampenVelocity
	JSR Object_InteractWithTiles
	JSR Object_InteractWithPlayer
	JSR Object_InteractWithObjects
	
	LDA #$02
	STA Objects_Frame, X
	JMP Object_Draw

BobOmb_UnstableCheck:
	JSR Object_InteractWithTiles
	JSR Object_InteractWithPlayer
	JSR Object_RespondToTailAttack

	LDA Objects_BeingHeld, X
	BEQ BobOmb_Normal
	
	JMP BobOmb_ShakeDraw

BobOmb_Normal:
	LDA Objects_PreviousTilesDetect,X
	BNE BobOmb_ShakeDraw

	LDA <Objects_TilesDetectZ,X
	BEQ BobOmb_ShakeDraw

	LDA #$01
	STA Explosion_Timer, X
	BNE BobOmb_ShakeDraw

BobOmb_Attack:
	JSR Object_DetectTiles
	JSR Object_InteractWithTiles
	JSR Object_AttackOrDefeat
	
	LDA Objects_PlayerProjHit, X
	AND #HIT_STOMPED
	BEQ BobOmb_InteractOthers

	LDA Objects_State, X
	CMP #OBJSTATE_KILLED
	BNE BobOmb_InteractOthers

	LDA #OBJSTATE_NORMAL
	STA Objects_State, X

	LDA Objects_Orientation, X
	AND #~SPR_VFLIP
	STA Objects_Orientation, X

	LDA Objects_Property, X
	BNE BobOmb_Unstabilize

	LDA #$A0
	STA Explosion_Timer, X
	BNE BobOmb_InteractOthers

BobOmb_Unstabilize:
	LDA #$02
	STA Objects_Frame,X
	INC BobOmb_Unstable, X
	BNE BobOmb_Draw

BobOmb_InteractOthers:
BobOmb_Animate:
	INC BobOmb_Frame, X
	LDA BobOmb_Frame, X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame,X

BobOmb_Draw:

	LDA BobOmb_Action, X
	ORA BobOmb_BehindTimer, X
	BEQ BobOmb_NotBehind

	LDA Objects_SpriteAttributes, X
	ORA #SPR_BEHINDBG
	STA Objects_SpriteAttributes, X

	LDA BobOmb_BehindTimer, X
	BEQ BobOmb_NotBehind

	DEC BobOmb_BehindTimer, X

BobOmb_NotBehind:
	JMP Object_Draw

BobOmb_ShakeDraw:
	INC BobOmb_Frame, X
	JSR Object_Draw

	LDA BobOmb_Frame, X
	AND #$02
	BEQ BobOmb_ShakeDraw1

	LDA Object_SpriteRAMOffset, X
	TAX
	DEC Sprite_RAMY, X
	DEC Sprite_RAMY + 4, X

BobOmb_ShakeDraw1:
	RTS    

ObjInit_Pyrantula:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #(ATTR_STOMPKICKSOUND)
	STA Objects_BehaviorAttr, X

	JSR InitPatrol_Chase
	LDA #$40
	STA Objects_Timer, X
	RTS		

Pyrantula_Frame = Objects_Data1
Pyrantula_FireTimer = Objects_Data2

ObjNorm_Pyrantula:
	LDA <Player_HaltGameZ
	BEQ Pyrantula_Normal
	JMP Pyrantula_Draw	 ; If gameplay is not halted, jump to PRG003_B9D4

Pyrantula_Normal:
	LDA Pyrantula_FireTimer, X
	BNE Pyrantula_Shoot

	LDA Objects_Timer, X
	BNE Pyrantula_Move

	LDA #$20
	STA Pyrantula_FireTimer, X

Pyrantula_Move:
	JSR Object_ChasePlayer
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat
	JSR Object_DetectTiles
	JSR Object_InteractWithTiles
	
	LDA Object_VertTileProp, X
	CMP #TILE_PROP_CLIMBABLE
	BEQ Pyrantula_VGo

	LDA #$00
	STA <Objects_YVelZ, X
	STA Objects_YVelFrac,X	

Pyrantula_VGo:

	LDA  Object_HorzTileProp, X
	CMP #TILE_PROP_CLIMBABLE
	BEQ Pyrantula_Animate

	JSR Object_WallStop
	JMP Pyrantula_Animate

Pyrantula_Shoot:
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat

	LDA Pyrantula_FireTimer, X
	CMP #$10
	BNE Pyrantula_ShootDraw

	LDA Objects_SpritesHorizontallyOffScreen, X
	ORA Objects_SpritesVerticallyOffScreen, X
	BNE Pyrantula_ShootDraw

	LDA #$06
	STA <Proj_XOff 

	LDA #$0C
	STA <Proj_YOff

	JSR Object_ShootFireBallStraight
	JSR Object_AimProjectile

	LDA SpecialObj_XVel, Y
	JSR Double_Value
	STA SpecialObj_XVel, Y

	LDA SpecialObj_YVel, Y
	JSR Double_Value
	STA SpecialObj_YVel, Y

Pyrantula_ShootDraw:
	DEC Pyrantula_FireTimer, X
	BEQ Pyrantual_Reset

	LDA #$02
	STA Objects_Frame, X
	BNE Pyrantula_Draw

Pyrantual_Reset:
	LDA #$40
	STA Objects_Timer, X
	BNE Pyrantula_Draw

Pyrantula_Animate:
	INC Pyrantula_Frame, X

	LDA Pyrantula_Frame, X
	LSR A
	LSR A
	AND #$01

	STA Objects_Frame, X

Pyrantula_Draw:
	JMP Object_DrawMirrored	 ; Jump (indirectly) to PRG003_BB17 (draws enemy) and don't come back!    


FireSnake_Frame = Objects_Data1
FireSnake_CanJump = Objects_Data3
FireSnake_BufferOffset = Objects_Data4
FireSnake_Ticker = Objects_Data5
FireSnake_MakeFire = Objects_Data6

FireSnakeFlips:
	.byte $00, SPR_HFLIP

FireSnake_Jumps:
	.byte $E0, $E0, $D8, $C8, $BA, $B2, $A8, $A0, $98, $90, $8A, $8A, $8A, $8A, $8A, $8A

FireSnake_BufferOffsets:
	.byte 00, 16

ObjInit_FireSnake:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #(ATTR_FIREPROOF | ATTR_DASHPROOF | ATTR_STOMPPROOF)
	STA Objects_WeaponAttr, X

	LDA #(ATTR_NOICE | ATTR_WINDAFFECTS)
	STA Objects_BehaviorAttr, X

	JSR Object_InitBuffer

	LDA FireSnake_BufferOffsets, Y
	STA FireSnake_BufferOffset, X
	TAY

	LDA #$0F
	STA <Temp_Var1
	
FireSnake_InitLoop:
	LDA <Objects_XZ, X
	STA Object_BufferX, Y

	LDA <Objects_YZ, X
	STA Object_BufferY, Y

	INY
	DEC <Temp_Var1
	BPL FireSnake_InitLoop

	JMP Object_CalcBoundBox

ObjNorm_FireSnake:
	LDA Objects_State, X
	CMP #OBJSTATE_KILLED
	BNE FireSnake_NotDead

	LDY FireSnake_BufferOffset, X
	
	LDA #$00
	STA Buffer_Occupied, Y

	LDY Objects_SpawnIdx, X

	LDA Level_ObjectsSpawned, Y
	AND #$7f
	STA Level_ObjectsSpawned, Y

	JMP Object_PoofDie

FireSnake_NotDead:
	LDA <Player_HaltGameZ
	BEQ FireSnake_Norm	 ; If gameplay is NOT halted, jump to PRG003_BD95

	JMP FireSnake_Draw

FireSnake_Norm:
	INC FireSnake_Ticker, X

	LDA #$40
	JSR Object_DeleteOffScreenRange
	
	LDA Objects_State, X
	CMP #OBJSTATE_NORMAL
	BEQ FireSnake_Move

	LDA #$00
	STA Buffer_Occupied, Y

FireSnake_Move:
	JSR Object_Move

	LDA <Objects_YVelZ, X
	CMP #$18
	BMI FireSnake_Move1
	BCC FireSnake_Move1

	LDA #$20
	STA <Objects_YVelZ, X

FireSnake_Move1:
	JSR FireSnake_MoveTail
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat
	JSR Object_DetectTiles

	LDA Objects_Timer3, X
	BEQ FireSnake_InteractTiles

	LDA <Objects_YVelZ, X
	BMI FireSnake_InteractTiles

	LDA Object_VertTileProp, X
	CMP #TILE_PROP_SOLID_TOP
	BNE FireSnake_InteractTiles

	LDA <Objects_TilesDetectZ, X
	AND #~HITTEST_BOTTOM
	STA <Objects_TilesDetectZ, X

FireSnake_InteractTiles:
	JSR Object_InteractWithTiles
	JSR FireSnake_MeltIce

	LDA <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ FireSnake_NoFire

	LDA <Objects_XVelZ, X
	BEQ FireSnake_NoFire

	LDA Object_BodyTileProp, X
	CMP #TILE_PROP_ENEMY
	BNE FireSnake_NoFire

	LDA <Objects_XZ, X
	ADD #$07
	STA Block_DetectX
	STA Tile_X

	LDA <Objects_XHiZ, X
	ADC #$00
	STA Block_DetectXHi
	STA Tile_XHi

	LDA <Objects_YZ, X
	ADD #$07
	STA Block_DetectY
	STA Tile_Y

	LDA <Objects_YHiZ, X
	ADC #$00
	STA Block_DetectYHi
	STA Tile_YHi

	LDA Object_BodyTileValue, X
	STA Tile_LastValue

	JSR Tile_WriteTempChange
	BCC FireSnake_NoFire

	LDX <CurrentObjectIndexZ

	LDA Tile_LastValue
	EOR #$01
	JSR Object_ChangeBlock

FireSnake_NoFire:
	LDA Object_VertTileProp
	LDA FireSnake_CanJump, X
	BEQ FireSnake_TryCanJump

	LDA Objects_Timer, X
	BNE FireSnake_Animate

	JSR Object_YDistanceFromPlayer
	LDA <YDiffAboveBelow
	BEQ FireSnake_DetermineJump

	LDA #$20
	STA Objects_Timer3, X

	LDY #$00

FireSnake_DetermineJump:
	LDA <YDiff
	LSR A
	LSR A
	LSR A
	LSR A
	TAY

	INY

FireSnake_DoJump:
	INC FireSnake_MakeFire, X

	LDA FireSnake_Jumps, Y
	STA <Objects_YVelZ, X

	CPY #$00
	BNE FireSnake_TowardsPlayer

	LDA #$20
	STA Objects_Timer3, X

FireSnake_TowardsPlayer:

	JSR Object_MoveTowardsPlayerFast

	LDA #$00
	STA FireSnake_CanJump, X

	JMP FireSnake_Animate

FireSnake_TryCanJump:

	LDA <Objects_TilesDetectZ, X
	AND #HITTEST_BOTTOM
	BEQ FireSnake_Animate

	INC FireSnake_CanJump, X
	LDA #$20
	STA Objects_Timer, X

	LDA #$00
	STA <Objects_XVelZ, X

FireSnake_Animate:
	INC FireSnake_Frame, X
	LDA FireSnake_Frame, X
	LSR A
	AND #$01
	STA Objects_Frame, X

	LDA FireSnake_Frame, X
	LSR A
	LSR A
	AND #$01
	TAY
	LDA Objects_Orientation, X
	AND #~SPR_HFLIP

	ORA FireSnakeFlips, Y
	STA Objects_Orientation, X
	JMP FireSnake_Draw

FireSnake_MoveTail:
	LDA FireSnake_Ticker, X
	AND #$01
	BNE MoveTail_RTS


	LDA #$0E
	STA <Temp_Var1

	LDA FireSnake_BufferOffset, X
	ADD #$0E
	TAY


MoveTail_Loop:

	LDA Object_BufferX, Y
	STA Object_BufferX + 1, Y

	LDA Object_BufferY, Y
	STA Object_BufferY + 1, Y
	DEY
	DEC <Temp_Var1
	BPL MoveTail_Loop

	INY
	LDA <Objects_XZ, X
	STA Object_BufferX, Y

	LDA <Objects_YZ, X
	STA Object_BufferY, Y

MoveTail_RTS:
	RTS

FireSnake_Draw:
	JSR Object_Draw

FireSnake_RAMOffset = Temp_Var15
FireSnake_TailPartX = Temp_Var2
FireSnake_TailPartY = Temp_Var1
FireSnake_TailOffset = Temp_Var16

FireSnake_DrawTail:

	LDY Object_SpriteRAMOffset, X
	STY <FireSnake_RAMOffset

	LDA FireSnake_BufferOffset, X
	STA <FireSnake_TailOffset
	TAX
	LDA Object_BufferX + 3, X
	SUB <Horz_Scroll
	ADD #$04
	STA <FireSnake_TailPartX
	

	LDA Object_BufferY + 3, X
	SUB <Vert_Scroll
	STA <FireSnake_TailPartY

	JSR Object_ParticleVisibleTest
	BCS FSDT1

	LDY <FireSnake_RAMOffset
	LDA <FireSnake_TailPartX
	STA Sprite_RAMX + 8, Y
	LDA <FireSnake_TailPartY
	STA Sprite_RAMY + 8, Y

	LDA Game_Counter
	AND #$03
	BNE FSDT1

	LDA Sprite_RAMX + 8, Y
	SUB Sprite_RAMX, Y
	STA <FireSnake_TailPartX

	LDA Sprite_RAMY + 8, Y
	SUB Sprite_RAMY, Y
	STA <FireSnake_TailPartY
	JSR FireSnake_TailHitTest

FSDT1:
	LDX <FireSnake_TailOffset

	LDA Object_BufferX + 7, X
	SUB <Horz_Scroll
	ADD #$04
	STA <FireSnake_TailPartX
	

	LDA Object_BufferY + 7, X
	SUB <Vert_Scroll
	STA <FireSnake_TailPartY

	JSR Object_ParticleVisibleTest
	BCS FSDT2

	LDY <FireSnake_RAMOffset
	LDA <FireSnake_TailPartX
	STA Sprite_RAMX + 12, Y
	LDA <FireSnake_TailPartY
	STA Sprite_RAMY + 12, Y

	LDA Game_Counter
	AND #$03
	CMP #$01
	BNE FSDT2

	LDA Sprite_RAMX + 12, Y
	SUB Sprite_RAMX, Y
	STA <FireSnake_TailPartX

	LDA Sprite_RAMY + 12, Y
	SUB Sprite_RAMY, Y
	STA <FireSnake_TailPartY
	JSR FireSnake_TailHitTest

FSDT2:
	LDX <FireSnake_TailOffset
	LDA Object_BufferX + 11, X
	SUB <Horz_Scroll
	ADD #$04
	STA <FireSnake_TailPartX
	

	LDA Object_BufferY + 11, X
	SUB <Vert_Scroll
	STA <FireSnake_TailPartY

	JSR Object_ParticleVisibleTest
	BCS FSDT3

	LDY <FireSnake_RAMOffset
	LDA <FireSnake_TailPartX
	STA Sprite_RAMX + 16, Y
	LDA <FireSnake_TailPartY
	STA Sprite_RAMY + 16, Y

	LDA Game_Counter
	AND #$03
	CMP #$02
	BNE FSDT3

	LDA Sprite_RAMX + 16, Y
	SUB Sprite_RAMX, Y
	STA <FireSnake_TailPartX

	LDA Sprite_RAMY + 16, Y
	SUB Sprite_RAMY, Y
	STA <FireSnake_TailPartY
	JSR FireSnake_TailHitTest

FSDT3:
	LDA Object_BufferX + 15, X
	SUB <Horz_Scroll
	ADD #$04
	STA <FireSnake_TailPartX
	

	LDA Object_BufferY + 15, X
	SUB <Vert_Scroll
	STA <FireSnake_TailPartY

	JSR Object_ParticleVisibleTest
	BCS FSDT4

	LDY <FireSnake_RAMOffset
	LDA <FireSnake_TailPartX
	STA Sprite_RAMX + 20, Y
	LDA <FireSnake_TailPartY
	STA Sprite_RAMY + 20, Y

	LDA Game_Counter
	AND #$03
	CMP #$03
	BNE FSDT4

	LDA Sprite_RAMX + 20, Y
	SUB Sprite_RAMX, Y
	STA <FireSnake_TailPartX

	LDA Sprite_RAMY + 20, Y
	SUB Sprite_RAMY, Y
	STA <FireSnake_TailPartY
	JSR FireSnake_TailHitTest

FSDT4:
	LDY <FireSnake_RAMOffset

	LDA #$89
	STA Sprite_RAMTile + 8, Y
	STA Sprite_RAMTile + 12, Y

	LDA #$8B
	STA Sprite_RAMTile + 16, Y
	STA Sprite_RAMTile + 20, Y

	LDX <CurrentObjectIndexZ
	LDA Objects_Frame, X
	AND #$01
	TAX

	LDA FireSnake_TailFlips, X
	STA Sprite_RAMAttr + 8, Y
	STA Sprite_RAMAttr + 16, Y

	TXA
	EOR #$01
	TAX

	LDA FireSnake_TailFlips, X
	STA Sprite_RAMAttr + 12, Y
	STA Sprite_RAMAttr + 20, Y
	RTS

FireSnake_TailHitTest:
	LDA <FireSnake_TailPartX
	STA <Temp_Var10

	LDA <FireSnake_TailPartY
	STA <Temp_Var11

	LDX <CurrentObjectIndexZ
	LDA Objects_BoundLeft, X
	STA <CalcParam1

	LDA Objects_BoundLeftHi, X
	STA <CalcParam1 + 1

	LDA #$00
	STA <CalcParam2 + 1

	LDA <Temp_Var10
	BPL TailHit_Add

	EOR #$FF
	ADD #$01
	STA <CalcParam2
	JSR Subtract2ByteValue
	JMP TailHit_Bound

TailHit_Add:
	STA CalcParam2
	JSR Add2ByteValue

TailHit_Bound:
	LDA <CalcResult
	STA SpecialObj_BoundLeft
	ADD #$08
	STA SpecialObj_BoundRight

	LDA <CalcResult + 1
	STA SpecialObj_BoundLeftHi
	ADC #$00
	STA SpecialObj_BoundRightHi

	LDA Objects_BoundTop, X
	STA <CalcParam1

	LDA Objects_BoundTopHi, X
	STA <CalcParam1 + 1

	LDA #$00
	STA <CalcParam2 + 1

	LDA <Temp_Var11
	BPL TailHit_Add2

	EOR #$FF
	ADD #$01
	STA CalcParam2
	JSR Subtract2ByteValue
	JMP TailHit_Bound2

TailHit_Add2:
	STA CalcParam2
	JSR Add2ByteValue

TailHit_Bound2:
	LDA <CalcResult
	STA SpecialObj_BoundTop
	ADD #$10
	STA SpecialObj_BoundBottom

	LDA <CalcResult + 1
	STA SpecialObj_BoundTopHi
	ADC #$00
	STA SpecialObj_BoundBottomHi
	JSR SpecialObj_DetectPlayer
	BCC TailHit_None

	JSR Player_GetHurt

TailHit_None:
	RTS

FireSnake_TailFlips:
	.byte SPR_PAL1, SPR_PAL1 | SPR_HFLIP

FireSnake_HitOffset:
	.byte $13, $FD
	.byte $00, $FF

FireSnake_MeltIce:
	LDA Objects_SpritesHorizontallyOffScreen,X
	ORA Objects_SpritesVerticallyOffScreen,X
	BNE FireSnake_NoMeltIce

	LDA Block_NeedsUpdate
	BEQ FireSnake_MeltIceGo

FireSnake_NoMeltIce:
	RTS

FireSnake_MeltIceGo:
	LDA Object_VertTileProp, X
	CMP #(TILE_PROP_SOLID_ALL | TILE_PROP_SLICK)
	BNE FireSnake_DetectIceHorz

	LDY #$00

	LDA <Objects_TilesDetectZ,X
	AND #HIT_GROUND
	BNE FireSnake_MeltIceVert

	INY

FireSnake_MeltIceVert:
	LDA <Objects_YZ, X
	ADD FireSnake_HitOffset, Y
	STA Block_DetectY
	
	AND #$F0
	STA <Poof_Y

	LDA <Objects_YHiZ, X
	ADC FireSnake_HitOffset + 2, Y
	STA Block_DetectYHi

	AND #$F0
	STA <Poof_YHi

	LDA <Objects_XZ, X
	ADD #$08
	STA Block_DetectX
	AND #$F0
	STA <Poof_X

	LDA <Objects_XHiZ, X
	ADC #$00
	STA Block_DetectXHi

	JSR Common_MakePoof

	LDA Object_VertTileValue, X
	EOR #$01
	JMP Object_ChangeBlock

FireSnake_DetectIceHorz:

	LDA Object_HorzTileProp, X
	CMP #(TILE_PROP_SOLID_ALL | TILE_PROP_SLICK)
	BNE FireSnake_MeltIceRTS

	LDY #$00

	LDA <Objects_TilesDetectZ,X
	AND #HIT_RIGHTWALL
	BNE FireSnake_MeltIceHorz

	INY

FireSnake_MeltIceHorz:
	LDA <Objects_XZ, X
	ADD FireSnake_HitOffset, Y
	STA Block_DetectX
	
	AND #$F0
	STA <Poof_X

	LDA <Objects_XHiZ, X
	ADC FireSnake_HitOffset + 2, Y
	STA Block_DetectXHi

	LDA <Objects_YZ, X
	ADD #$07
	STA Block_DetectY
	
	AND #$F0
	STA <Poof_Y

	LDA <Objects_YHiZ, X
	ADC #$00
	STA Block_DetectYHi

	AND #$F0
	STA <Poof_YHi

	JSR Common_MakePoof

	LDA Object_HorzTileValue, X
	EOR #$01
	JMP Object_ChangeBlock

FireSnake_MeltIceRTS:
	RTS    



PhantomBlooper_YDetectOverride:
	.byte $04, $08

PhantomBlooper_XDetectOverride:
	.byte $01, $02

PhantomBlooper_XVelPropel:
	.byte $EC, $14

ObjInit_PhantomBlooper:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	RTS		 ; Return

ObjNorm_PhantomBlooper:
	LDA <Player_HaltGameZ
	BEQ PhantomBlooper_Norm

	JMP Object_DrawMirrored

PhantomBlooper_Norm:
	JSR Object_DeleteOffScreen
	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_DetectTiles

	LDA #$01
	STA Objects_InWater, X

	LDA #$00
	STA <Objects_TilesDetectZ, X

	LDA Object_VertTileProp, X
	CMP #TILE_PROP_WATER
	BCS PhantomBlooper_InWater

	LDA <Objects_YVelZ, X
	AND #$80
	ROL A
	ROL A
	AND #$01
	TAY

	LDA <Objects_TilesDetectZ, X
	ORA PhantomBlooper_YDetectOverride, Y
	STA <Objects_TilesDetectZ, X

PhantomBlooper_InWater:
	LDA Object_HorzTileProp, X
	CMP #TILE_PROP_WATER
	BCS PhantomBlooper_InWater2

	LDA <Objects_XVelZ, X
	AND #$80
	ROL A
	ROL A
	AND #$01
	TAY

	LDA <Objects_TilesDetectZ, X
	ORA PhantomBlooper_XDetectOverride, Y
	STA <Objects_TilesDetectZ, X

PhantomBlooper_InWater2:
	
	INC Object_CeilingStops
	INC Object_WallStops
	JSR Object_InteractWithTiles
	JSR Object_AttackOrDefeat

	JSR Object_YDistanceFromPlayer
	LDA <YDiffAboveBelow
	BNE PhantomBlooper_SlowFall

	LDA Objects_Timer, X
	BNE PhantomBlooper_SlowFall

	LDA #$DC
	STA <Objects_YVelZ, X

	JSR Object_XDistanceFromPlayer
	LDY <XDiffLeftRight
	LDA PhantomBlooper_XVelPropel, Y
	STA <Objects_XVelZ, X
	
	LDA #$40
	STA Objects_Timer, X
	BNE PhantomBlooper_Animate

PhantomBlooper_SlowFall:
	LDA <Objects_YVelZ, X
	BMI PhantomBlooper_Animate

	CMP #$24
	BCC PhantomBlooper_Animate

	LDA #$24
	STA <Objects_YVelZ, X

PhantomBlooper_Animate:
	AND #$80
	ROL A
	ROL A
	AND #$01
	EOR #$01
	STA Objects_Frame, X

PhantomBlooper_Draw:
	LDA Objects_SpriteAttributes, X
	ORA #SPR_BEHINDBG
	STA Objects_SpriteAttributes, X
	JMP Object_DrawMirrored    


Blooper_YDetectOverride:
	.byte $04, $08

Blooper_XDetectOverride:
	.byte $01, $02

Blooper_XVelPropel:
	.byte $E4, $1C

ObjInit_Blooper:
	LDA #BOUND16x16
	STA Objects_BoundBox, X
	RTS		 ; Return


ObjNorm_Blooper:
	LDA <Player_HaltGameZ
	BEQ Blooper_Norm

	JMP Object_DrawMirrored

Blooper_Norm:
	JSR Object_DeleteOffScreen

	LDA <Objects_YVelZ, X
	BMI Blooper_NoStop

	LDA #$00
	STA <Objects_XVelZ, X

Blooper_NoStop:
	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_DetectTiles

	LDA Object_VertTileProp, X
	CMP #TILE_PROP_WATER
	BCS Blooper_InWater

	LDA <Objects_YVelZ, X
	AND #$80
	ROL A
	ROL A
	AND #$01
	TAY

	LDA <Objects_TilesDetectZ, X
	ORA Blooper_YDetectOverride, Y
	STA <Objects_TilesDetectZ, X

Blooper_InWater:
	LDA Object_HorzTileProp, X
	CMP #TILE_PROP_WATER
	BCS Blooper_InWater2

	LDA <Objects_XVelZ, X
	AND #$80
	ROL A
	ROL A
	AND #$01
	TAY

	LDA <Objects_TilesDetectZ, X
	ORA Blooper_XDetectOverride, Y
	STA <Objects_TilesDetectZ, X

Blooper_InWater2:
	INC Object_CeilingStops

	JSR Object_InteractWithTiles
	JSR Object_AttackOrDefeat

	JSR Object_YDistanceFromPlayer
	LDA <YDiffAboveBelow
	BNE Blooper_SlowFall

	LDA Objects_Timer, X
	BNE Blooper_SlowFall

	LDA #$DC
	STA <Objects_YVelZ, X

	JSR Object_XDistanceFromPlayer
	LDY <XDiffLeftRight
	LDA Blooper_XVelPropel, Y
	STA <Objects_XVelZ, X
	
	LDA #$40
	STA Objects_Timer, X
	BNE Blooper_Animate

Blooper_SlowFall:
	LDA <Objects_YVelZ, X
	BMI Blooper_Animate

	CMP #$24
	BCC Blooper_Animate

	LDA #$24
	STA <Objects_YVelZ, X

Blooper_Animate:
	AND #$80
	ROL A
	ROL A
	AND #$01
	EOR #$01
	STA Objects_Frame, X

Blooper_Draw:
	JMP Object_DrawMirrored
    


FloatMine_Action = Objects_Data1

ObjInit_FloatMine:
	LDA #$06
	STA Objects_SpritesRequested, X
	
	LDA #(ATTR_NOICE)
	STA Objects_BehaviorAttr, X

	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #$01
	STA ObjSplash_Disabled, X

	LDA <Objects_XZ, X
	SUB #$04
	STA <Objects_XZ, X

	LDA <Objects_XHiZ, X
	SBC #$00
	STA <Objects_XHiZ, X

	LDA Objects_Property, X
	STA FloatMine_Action, X

	CMP #$02
	BCS InitMineMove_Pattern
	RTS

InitMineMove_Pattern:
	LDA #$10
	STA Patrol_ResetTimer, X

	LDA <Objects_XZ, X
	SUB #$01
	STA <Objects_XZ, X

	LDA <Objects_XHiZ, X
	SBC #$00
	STA <Objects_XHiZ, X

	LDA <Objects_YZ, X
	SUB #$01
	STA <Objects_YZ, X

	LDA <Objects_YHiZ, X
	SBC #$00
	STA <Objects_YHiZ, X

	LDA Objects_Property, X
	SUB #$02
	JSR DynJump

	.word InitPatrolHorizontal
	.word InitPatrolVertical
	.word InitCircleCCW
	.word InitCircleCW

ObjNorm_FloatMine:
	LDA <Player_HaltGameZ
	BEQ FloatMine_Norm

	JMP FloatMine_Draw

FloatMine_Norm:
	LDA Objects_State, X
	CMP #OBJSTATE_KILLED
	BNE FloatMine_NotDead
	JSR FloatMine_Expload

FloatMine_NotDead:
	JSR Object_DeleteOffScreen

	JSR FloatMine_CalcBoundBox
	LDA FloatMine_Action, X
	JSR DynJump
	
	.word FloatMine_Chained
	.word FloatMine_Unchained
	.word FloatMine_PatternMove
	.word FloatMine_PatternMove
	.word FloatMine_PatternMove
	.word FloatMine_PatternMove
	.word FloatMine_PatternMoveOnce

FloatMine_PatternMove:
	JSR FloatMine_DoPatternMove
	JSR FloatMine_DoPatternMove
	JSR FloatMine_DoPatternMove

FloatMine_PatternMoveOnce:
	JSR FloatMine_DoPatternMove
	JMP FloatMine_Chained

FloatMine_DoPatternMove:
	LDA FloatMine_Action, X
	SUB #$02
	JSR DynJump

	.word PatrolBackForth
	.word PatrolUpDown
	.word PatrolDiagonal
	.word PatrolDiagonal
	.word PatrolUpDown

FloatMine_Unchained:

    INC Reverse_Gravity
    JMP FloatMine_Move

FloatMine_Bob:
    LDA <Objects_YVelZ, X
    BPL FloatMine_Move

    LDA #$04
    STA <Objects_YVelZ, X

FloatMine_Move:
	JSR Object_Move

FloatMine_Chained:
	JSR Object_InteractWithPlayer
	JSR Object_DetectTiles
	JSR Object_InteractWithTiles

	LDA FloatMine_Action, X
	CMP #$02
	BCS FloatMine_NormMove

	LDA Objects_InWater, X
	BNE FloatMine_NormMove
	
	LDA #$01
	STA Patrol_YVelocityChange, X

	LDA <Objects_YZ, X
	AND #$F0
	ORA #$04
	STA <Objects_YZ, X

	LDA #$00
	STA <Objects_YVelZ, X

	LDA #$04
	STA Patrol_ResetTimer, X
	STA Patrol_YAccelLimit, X

	LDA #$06
	STA FloatMine_Action, X

FloatMine_NormMove:
	LDA TrapSet
	BNE FloatMine_Explode

	LDA <Objects_TilesDetectZ, X
	BEQ FloatMine_NoExplodeYet

FloatMine_Explode:
	JSR FloatMine_Expload

FloatMine_NoExplodeYet:
	LDA FloatMine_Action, X
	BNE FloatMine_Draw

	JSR Object_XDistanceFromPlayer
	LDA <XDiff
	CMP #$30
	BCS FloatMine_Draw

	JSR Object_YDistanceFromPlayer

	LDA <YDiff
	CMP #$30
	BCS FloatMine_Draw

	INC FloatMine_Action, X

FloatMine_Draw:
	LDA #SPR_BEHINDBG
	STA Objects_Orientation, X

	JSR Object_Draw16x32

	LDY Object_SpriteRAMOffset,X

	LDA Objects_SpritesHorizontallyOffScreen, X
	AND #SPRITE_2_HINVISIBLE
	BNE Mine_BottomTile

	LDA Objects_SpritesVerticallyOffScreen, X
	AND #SPRITE_0_VINVISIBLE
	BNE Mine_BottomTile

	LDA Objects_SpriteX, X
	ADD #$10
	STA Sprite_RAMX + 16, Y

	LDA Sprite_RAMTile, Y
	STA Sprite_RAMTile + 16, Y

	LDA Objects_SpriteY, X
	STA Sprite_RAMY + 16, Y

	LDA Sprite_RAMAttr, Y
	ORA #SPR_HFLIP
	STA Sprite_RAMAttr + 16, Y

Mine_BottomTile:
	LDA Objects_SpritesHorizontallyOffScreen, X
	AND #SPRITE_2_HINVISIBLE
	BNE Mine_DrawRTS

	LDA Objects_SpritesVerticallyOffScreen, X
	AND #SPRITE_1_VINVISIBLE
	BNE Mine_DrawRTS

	LDA Objects_SpriteX, X
	ADD #$10
	STA Sprite_RAMX + 20, Y

	LDA Sprite_RAMTile + 8, Y
	STA Sprite_RAMTile + 20, Y

	LDA Objects_SpriteY, X
	ADD #$10
	STA Sprite_RAMY + 20, Y

	LDA Sprite_RAMAttr + 8, Y
	ORA #SPR_HFLIP
	STA Sprite_RAMAttr + 20, Y

Mine_DrawRTS:
	RTS

FloatMine_CalcBoundBox:
	LDA <Objects_XZ,X
	ADD #$04	
	STA Objects_BoundLeft, X

	LDA <Objects_XHiZ, X
	ADC #$00
	STA Objects_BoundLeftHi, X

	LDA <Objects_XZ, X
	ADD #$14
	STA Objects_BoundRight, X
	
	LDA <Objects_XHiZ, X
	ADC #$00
	STA Objects_BoundRightHi, X

	LDA <Objects_YZ,X
	ADD #$04
	STA Objects_BoundTop, X

	LDA <Objects_YHiZ, X
	ADC #$00
	STA Objects_BoundTopHi, X

	LDA <Objects_YZ,X
	ADD #$14
	STA Objects_BoundBottom, X

	LDA <Objects_YHiZ, X
	ADC #$00
	STA Objects_BoundBottomHi, X
	RTS

FloatMine_Expload:
	LDA #OBJSTATE_NORMAL
	STA Objects_State, X
	INC Explosion_Timer, X
	RTS    	
	
    .org ObjectGroup_InitJumpTable
;****************************** OBJECT INITIALIZATION ******************************
    .word ObjInit_DoNothing	; Object $64 - OBJ_CHEEPCHEEPHOPPER
	.word ObjInit_DoNothing	; Object $65 - OBJ_WATERCURRENTUPWARD
	.word ObjInit_DoNothing	; Object $66 - OBJ_WATERCURRENTDOWNARD
	.word ObjInit_ShyGuy		; Object $67 - OBJ_SNOWGUY
	.word ObjInit_DoNothing		; Object $68 - OBJ_TWIRLINGBUZZY
	.word ObjInit_DoNothing		; Object $69 - OBJ_TWIRLINGSPINY
	.word ObjInit_VeggieGuy	; Object $6A - OBJ_VEGGIEGUY
	.word ObjInit_SnowGuy	; Object $6B - OBJ_SHYGUY
	.word ObjInit_Troopa	; Object $6C - OBJ_GREENTROOPA
	.word ObjInit_Troopa	; Object $6D - OBJ_REDTROOPA
	.word ObjInit_BouncyTroopa	; Object $6E - OBJ_PARATROOPAGREENHOP
	.word ObjInit_ParaTroopa	; Object $6F - OBJ_FLYINGREDPARATROOPA
	.word ObjInit_BuzzyBeetle	; Object $70 - OBJ_BUZZYBEATLE
	.word ObjInit_Spiny	; Object $71 - OBJ_SPINY
	.word ObjInit_Goomba	; Object $72 - OBJ_GOOMBA
	.word ObjInit_ParaGoomba	; Object $73 - OBJ_PARAGOOMBA
	.word ObjInit_ZombieGoomba	; Object $74 - OBJ_ZOMBIEGOOMBA
	.word ObjInit_DoNothing	; Object $75 - OBJ_WATERFILLER
	.word ObjInit_PoisonMushroom	; Object $76 - OBJ_POISONMUSHROOM
	.word ObjInit_SwimmingCheep	; Object $77 - OBJ_GREENCHEEP

    .org ObjectGroup_NormalJumpTable
;****************************** OBJECT GAME LOOP ******************************
	.word ObjNorm_DoNothing	; Object $64 - OBJ_CHEEPCHEEPHOPPER
	.word ObjNorm_DoNothing	; Object $65 - OBJ_WATERCURRENTUPWARD
	.word ObjNorm_DoNothing	; Object $66 - OBJ_WATERCURRENTDOWNARD
	.word ObjNorm_SnowGuy	; Object $67 - OBJ_SNOWGUY
	.word ObjNorm_DoNothing	; Object $68 - OBJ_TWIRLINGBUZZY
	.word ObjNorm_DoNothing	; Object $69 - OBJ_TWIRLINGSPINY
	.word ObjNorm_VeggieGuy		; Object $6A - OBJ_VEGGIEGUY
	.word ObjNorm_ShyGuy	; Object $6B - OBJ_SHYGUY
	.word ObjNorm_Troopa	; Object $6C - OBJ_GREENTROOPA
	.word ObjNorm_RedTroopa		; Object $6D - OBJ_REDTROOPA
	.word ObjNorm_BouncyTroopa	; Object $6E - OBJ_PARATROOPAGREENHOP
	.word ObjNorm_ParaTroopa	; Object $6F - OBJ_FLYINGREDPARATROOPA
	.word ObjNorm_BuzzyBeetle	; Object $70 - OBJ_BUZZYBEATLE
	.word ObjNorm_Spiny	; Object $71 - OBJ_SPINY
	.word ObjNorm_Goomba	; Object $72 - OBJ_GOOMBA
	.word ObjNorm_ParaGoomba	; Object $73 - OBJ_PARAGOOMBA
	.word ObjNorm_ZombieGoomba	; Object $74 - OBJ_ZOMBIEGOOMBA
	.word ObjNorm_DoNothing	; Object $75 - OBJ_WATERFILLER
	.word ObjNorm_PoisonMushroom	; Object $76 - OBJ_POISONMUSHROOM
	.word ObjNorm_SwimmingCheep	; Object $77 - OBJ_GREENCHEEP

    .org ObjectGroup_CollideJumpTable
;****************************** OBJECT PLAYER INTERACTION ******************************
	.word ObjHit_DoNothing	; Object $64 - OBJ_CHEEPCHEEPHOPPER
	.word ObjHit_DoNothing	; Object $65 - OBJ_WATERCURRENTUPWARD
	.word ObjHit_DoNothing	; Object $66 - OBJ_WATERCURRENTDOWNARD
	.word ObjHit_DoNothing	; Object $67 - OBJ_SNOWGUY
	.word OCSPECIAL_KILLCHANGETO | OBJ_BUZZYBEATLE	; Object $68 - OBJ_TWIRLINGBUZZY
	.word OCSPECIAL_KILLCHANGETO | OBJ_SPINY	; Object $69 - OBJ_TWIRLINGSPINY
	.word ObjHit_DoNothing	; Object $6A - OBJ_VEGGIEGUY
	.word ObjHit_DoNothing	; Object $6B - OBJ_SHYGUY
	.word Object_Hold					; Object $6C - OBJ_GREENTROOPA
	.word Object_Hold					; Object $6D - OBJ_REDTROOPA
	.word OCSPECIAL_KILLCHANGETO |OBJ_GREENTROOPA	; Object $6E - OBJ_PARATROOPAGREENHOP
	.word OCSPECIAL_KILLCHANGETO |OBJ_REDTROOPA	; Object $6F - OBJ_FLYINGREDPARATROOPA
	.word Object_Hold					; Object $70 - OBJ_BUZZYBEATLE
	.word Object_Hold					; Object $71 - OBJ_SPINY
	.word $0000					; Object $72 - OBJ_GOOMBA
	.word OCSPECIAL_KILLCHANGETO | OBJ_GOOMBA	; Object $73 - OBJ_PARAGOOMBA
	.word ZombieGoomba_Infect	; Object $74 - OBJ_ZOMBIEGOOMBA
	.word $0000	; Object $75 -  (OCSPECIAL_KILLCHANGETO must be a mistake, but interesting!)
	.word $0000					; Object $76 - OBJ_POISONMUSHROOM
	.word $0000					; Object $77 - OBJ_GREENCHEEP

    .org ObjectGroup_PatTableSel
;****************************** OBJECT PALETTE/SIZE ******************************
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $64 - OBJ_CHEEPCHEEPHOPPER
	.byte OA1_PAL0 | OA1_HEIGHT16 | OA1_WIDTH32	; Object $65 - OBJ_WATERCURRENTUPWARD
	.byte OA1_PAL0 | OA1_HEIGHT16 | OA1_WIDTH32	; Object $66 - OBJ_WATERCURRENTDOWNARD
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $67 - OBJ_SNOWGUY
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $68 - OBJ_TWIRLINGBUZZY
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $69 - OBJ_TWIRLINGSPINY
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $6A - OBJ_VEGGIEGUY
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $6B - OBJ_SHYGUY
	.byte OA1_PAL2 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $6C - OBJ_GREENTROOPA
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $6D - OBJ_REDTROOPA
	.byte OA1_PAL2 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $6E - OBJ_PARATROOPAGREENHOP
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $6F - OBJ_FLYINGREDPARATROOPA
	.byte OA1_PAL3 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $70 - OBJ_BUZZYBEATLE
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $71 - OBJ_SPINY
	.byte OA1_PAL3 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $72 - OBJ_GOOMBA
	.byte OA1_PAL3 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $73 - OBJ_PARAGOOMBA
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $74 - OBJ_ZOMBIEGOOMBA
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $75 - 
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $76 - OBJ_POISONMUSHROOM
	.byte OA1_PAL2  | OA1_HEIGHT32 | OA1_WIDTH16	; Object $77 - OBJ_GREENCHEEP

    .org ObjectGroup_PatTableSel
;****************************** OBJECT PATTERN TABLE ******************************
	.byte OPTS_SETPT6 | $4F	; Object $64 - OBJ_CHEEPCHEEPHOPPER
	.byte OPTS_NOCHANGE	; Object $65 - OBJ_WATERCURRENTUPWARD
	.byte OPTS_NOCHANGE	; Object $66 - OBJ_WATERCURRENTDOWNARD
	.byte OPTS_SETPT5 | $0F	; Object $67 - OBJ_SNOWGUY
	.byte OPTS_SETPT5 | $0B	; Object $68 - OBJ_TWIRLINGBUZZY
	.byte OPTS_SETPT5 | $0B	; Object $69 - OBJ_TWIRLINGSPINY
	.byte OPTS_SETPT5 | $0F	; Object $6A - OBJ_VEGGIEGUY
	.byte OPTS_SETPT5 | $0F	; Object $6B - OBJ_SHYGUY
	.byte OPTS_SETPT6 | $4F	; Object $6C - OBJ_GREENTROOPA
	.byte OPTS_SETPT6 | $4F	; Object $6D - OBJ_REDTROOPA
	.byte OPTS_SETPT6 | $4F	; Object $6E - OBJ_PARATROOPAGREENHOP
	.byte OPTS_SETPT6 | $4F	; Object $6F - OBJ_FLYINGREDPARATROOPA
	.byte OPTS_SETPT5 | $0B	; Object $70 - OBJ_BUZZYBEATLE
	.byte OPTS_SETPT5 | $0B	; Object $71 - OBJ_SPINY
	.byte OPTS_SETPT6 | $4F	; Object $72 - OBJ_GOOMBA
	.byte OPTS_SETPT6 | $4F	; Object $73 - OBJ_PARAGOOMBA
	.byte OPTS_SETPT6 | $13	; Object $74 - OBJ_ZOMBIEGOOMBA
	.byte OPTS_SETPT5 | $12	; Object $75 - 
	.byte OPTS_NOCHANGE; Object $76 - OBJ_POISONMUSHROOM
	.byte OPTS_SETPT6 | $4F	; Object $77 - OBJ_GREENCHEEP

	.org ObjectGroup_KillAction	
;****************************** OBJECT DEATH ROUTINE ******************************
	.byte KILLACT_POOFDEATH	; Object $64 - OBJ_CHEEPCHEEPHOPPER
	.byte KILLACT_STANDARD	; Object $65 - OBJ_WATERCURRENTUPWARD
	.byte KILLACT_STANDARD	; Object $66 - OBJ_WATERCURRENTDOWNARD
	.byte KILLACT_POOFDEATH	; Object $67 - OBJ_SNOWGUY
	.byte KILLACT_POOFDEATH	; Object $68 - OBJ_TWIRLINGBUZZY
	.byte KILLACT_POOFDEATH	; Object $69 - OBJ_TWIRLINGSPINY
	.byte KILLACT_POOFDEATH	; Object $6A - OBJ_VEGGIEGUY
	.byte KILLACT_POOFDEATH	; Object $6B - OBJ_SHYGUY
	.byte KILLACT_POOFDEATH	; Object $6C - OBJ_GREENTROOPA
	.byte KILLACT_POOFDEATH	; Object $6D - OBJ_REDTROOPA
	.byte KILLACT_POOFDEATH	; Object $6E - OBJ_PARATROOPAGREENHOP
	.byte KILLACT_POOFDEATH	; Object $6F - OBJ_FLYINGREDPARATROOPA
	.byte KILLACT_POOFDEATH	; Object $70 - OBJ_BUZZYBEATLE
	.byte KILLACT_POOFDEATH	; Object $71 - OBJ_SPINY
	.byte KILLACT_POOFDEATH	; Object $72 - OBJ_GOOMBA
	.byte KILLACT_POOFDEATH	; Object $73 - OBJ_PARAGOOMBA
	.byte KILLACT_POOFDEATH	; Object $74 - OBJ_ZOMBIEGOOMBA
	.byte KILLACT_JUSTDRAW16X16	; Object $75 - OBJ_WATERFILLER
	.byte KILLACT_NORMALANDKILLED	; Object $76 - OBJ_POISONMUSHROOM
	.byte KILLACT_POOFDEATH	; Object $77 - OBJ_GREENCHEEP


OG6_POff .func (\1 - ObjectGroup06_PatternSets)

	.org ObjectGroup_PatternStarts	; <-- help enforce this table *here*
;****************************** OBJECT FRAME TABLE ******************************
	.byte OG6_POff(ObjP64), OG6_POff(ObjP65), OG6_POff(ObjP66), OG6_POff(ObjP67)
	.byte OG6_POff(ObjP68), OG6_POff(ObjP69), OG6_POff(ObjP6A), OG6_POff(ObjP6B)
	.byte OG6_POff(ObjP6C), OG6_POff(ObjP6D), OG6_POff(ObjP6E), OG6_POff(ObjP6F)
	.byte OG6_POff(ObjP70), OG6_POff(ObjP71), OG6_POff(ObjP72), OG6_POff(ObjP73)
	.byte OG6_POff(ObjP74), OG6_POff(ObjP75), OG6_POff(ObjP76), OG6_POff(ObjP77)



	.org ObjectGroup_PatternSets	; <-- help enforce this table *here*
;****************************** OBJECT FRAMES DEFINITION ******************************    
ObjectGroup06_PatternSets:

ObjP64:
ObjP65:
	.byte $E7, $E9, $E7, $EF, $E7, $EF

ObjP66:
	.byte $91, $93, $9D, $9F, $9D, $9F

ObjP67:
	.byte $85, $87
	.byte $81, $83
	.byte $85, $B7
	.byte $81, $B5
	.byte $BB, $BB
	.byte $B1, $B1
	.byte $91, $93    

ObjP68:
	.byte $95, $97, $91, $93, $A1, $A1
ObjP69:
	.byte $81, $83, $85, $87, $89, $89

ObjP6A:
	.byte $85, $87
	.byte $81, $83
	.byte $85, $B7
	.byte $81, $B5
	.byte $BB, $BB
	.byte $B1, $B1

ObjP6B:
	.byte $85, $87
	.byte $81, $83
	.byte $85, $B7
	.byte $81, $B5
	.byte $B1, $B1

ObjP6C:
ObjP6D:
ObjP6E:
ObjP6F:
	.byte $C3, $C5, $C7, $C9
	.byte $FD, $FD, $FD, $FD
	.byte $FD, $FD, $D1, $D1
	.byte $D3, $D5, $D5, $D3
	.byte $CB, $C5, $F9, $FB
	

ObjP70:
	.byte $95, $97, $91, $93, $9B, $9B, $9B, $9B, $A1, $A1, $9B, $9B, $A3, $A5
ObjP71:
	.byte $81, $83, $85, $87, $89, $89, $89, $89, $89, $89, $8F, $8F, $8B, $8D
ObjP72:
ObjP73:
	.byte $D9, $DB, $DB, $D9, $D9, $DB, $EB, $EB

ObjP74:

ObjP75:
	.byte $81, $83

ObjP76:
	.byte $79, $79, $79, $79, $79, $79
ObjP77:
	.byte $E7, $E9, $E7, $EF, $E7, $EF, $AD, $AF, $B9, $BB, $B9, $BB


ShyGuy_Frame = Objects_Data1
ShyGuy_Holding = Objects_Data2

ObjInit_ShyGuy:
	LDA #$04
	STA Objects_SpritesRequested, X

	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #(ATTR_STOMPKICKSOUND | ATTR_WINDAFFECTS | ATTR_CARRYANDBUMP)
	STA Objects_BehaviorAttr, X

	JSR Object_CalcBoundBox
	JSR Object_MoveTowardsPlayer

	LDA #$01
	STA Objects_Health, X
	RTS		 ; Return

ObjNorm_ShyGuy:
	LDA <Player_HaltGameZ
	BEQ ShyGuy_Norm
	
	JMP ShyGuy_Draw

ShyGuy_Norm:
	LDA Objects_State, X
	CMP #OBJSTATE_KILLED
	BNE ShGuy_Alive

	LDA ShyGuy_Holding, X
	BEQ ShyGuy_DeadRTS

	JSR ShyGuy_ThrowBlockForced
	LDA #$00
	STA Objects_XVelZ, Y

ShyGuy_DeadRTS:
	JMP Object_Draw

ShGuy_Alive:
	JSR Object_DeleteOffScreen
	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_DetectTiles
	JSR Object_InteractWithTiles
	JSR Object_FacePlayerOnLanding
	JSR ShyGuy_FindBlock
	JSR ShyGuy_GrabBlock
	JSR ShyGuy_ThrowBlock
	JSR Object_AttackOrDefeat

ShyGuy_Animate:
	INC ShyGuy_Frame, X
	LDY #$00

	LDA ShyGuy_Holding, X
	BEQ ShyGuy_NoArms

	INY

ShyGuy_NoArms:
	TYA
	ASL A
	STA <Temp_Var1

	LDA ShyGuy_Frame, X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA <Temp_Var16
	ORA <Temp_Var1
	STA Objects_Frame, X

ShyGuy_Draw:
	LDA <Objects_YVelZ, X
	BPL ShyGuy_GroundAnim

	LDA #$04
	STA Objects_Frame, X
	JMP Object_DrawMirrored

ShyGuy_GroundAnim:
	JSR Object_Draw
	LDA ShyGuy_Holding, X
	BEQ ShyGuy_DrawDone

	
	LDA #$0E
	ADD <Temp_Var16
	STA <Temp_Var16

	LDA Objects_SpritesVerticallyOffScreen, X
	AND #SPRITE_0_VINVISIBLE
	BNE ShyGuy_DrawDone

	LDA Objects_SpritesHorizontallyOffScreen, X
	AND #SPRITE_0_HINVISIBLE
	BNE ShyGuy_DrawRight


	LDA #$67
	STA Sprite_RAMTile + 8, Y

	LDA Objects_SpriteX, X
	STA Sprite_RAMX + 8, Y

	LDA Objects_SpriteY, X
	SUB <Temp_Var16
	STA Sprite_RAMY + 8, Y

	LDA #SPR_PAL3
	STA Sprite_RAMAttr + 8, Y

ShyGuy_DrawRight:
	LDA Objects_SpritesHorizontallyOffScreen, X
	AND #SPRITE_1_INVISIBLE
	BNE ShyGuy_DrawDone

	LDA #$67
	STA Sprite_RAMTile + 12, Y

	LDA Objects_SpriteX, X
	ADD #$08
	STA Sprite_RAMX + 12, Y

	LDA Objects_SpriteY, X
	SUB <Temp_Var16
	STA Sprite_RAMY + 12, Y

	LDA #(SPR_PAL3 | SPR_HFLIP)
	STA Sprite_RAMAttr + 12, Y

ShyGuy_DrawDone:
	RTS

ShyGuy_ScanAbove:
	.byte $48, $38, $28, $18, $08

ShyGuy_FindBlock:
	LDA ShyGuy_Holding, X
	BNE ShyGuy_FindBlockDone

	LDA <Objects_XZ, X
	AND #$0F
	BNE ShyGuy_FindBlockDone

	LDA <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ ShyGuy_FindBlockDone

	LDY #$04
	LDA <Objects_XZ, X
	ADD #$08
	STA Tile_DetectionX

	LDA <Objects_XHiZ, X
	STA Tile_DetectionXHi

ShyGuy_FindLoop:
	STY TempY
	LDA <Objects_YZ, X
	SUB ShyGuy_ScanAbove, Y
	STA Tile_DetectionY

	LDA <Objects_YHiZ, X
	SBC #$00
	STA Tile_DetectionYHi

	JSR Object_DetectTile

	LDA Tile_LastProp
	CMP #TILE_PROP_ITEM
	BCS ShyGuy_JumpForBlock

	LDY TempY
	DEY
	BPL ShyGuy_FindLoop

ShyGuy_FindBlockDone:
	RTS

ShyGuy_JumpForBlock:
	LDA #$B8
	STA <Objects_YVelZ, X

	LDA #$00
	STA <Objects_XVelZ, X
	RTS

ShyGuy_GrabBlock:
	LDA <Objects_TilesDetectZ, X
	AND #HIT_CEILING
	BEQ ShyGuy_GrabBlockDone 

	LDA Object_VertTileProp, X
	CMP #TILE_PROP_ITEM
	BCC ShyGuy_GrabBlockDone

	LDY Block_NeedsUpdate
	BNE ShyGuy_GrabBlockDone

	AND #$0F
	ADD #$01
	STA ShyGuy_Holding, X

	LDA <Objects_XZ, X
	ADD #$08
	STA Tile_DetectionX

	LDA <Objects_XHiZ, X
	ADC #$00
	STA Tile_DetectionXHi

	LDA <Objects_YZ, X
	SUB #$08
	STA Tile_DetectionY

	LDA <Objects_YHiZ, X
	SBC #$00
	STA Tile_DetectionYHi

	LDA Tile_LastValue
	AND #$C0
	ORA #$01

	JSR Object_ChangeBlock

ShyGuy_GrabBlockDone:
	RTS

ShyGuy_ThrowBlock:
	LDA <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ ShyGuy_ThrowBlockDone

	LDA ShyGuy_Holding, X
	BEQ ShyGuy_ThrowBlockDone

	JSR Object_XDistanceFromPlayer
	LDA <XDiff
	CMP #$40
	BCS ShyGuy_ThrowBlockDone

ShyGuy_ThrowBlockForced:
	JSR Object_FindEmptyY
	BCC ShyGuy_ThrowBlockDone

	LDA #OBJ_BRICK
	STA Objects_ID, Y

	LDA #SPR_PAL3
	STA Objects_SpriteAttributes, Y

	LDA ShyGuy_Holding, X
	STA Brick_PowerUp, Y

	LDA <Objects_XZ, X
	STA Objects_XZ, Y

	LDA <Objects_XHiZ, X
	STA Objects_XHiZ, Y

	LDA <Objects_YZ, X
	SUB #$10
	STA Objects_YZ, Y

	LDA <Objects_YHiZ, X
	SBC #$00
	STA Objects_YHiZ, Y

	LDA #$D8
	STA Objects_YVelZ, Y

	LDA #$E0
	STA Objects_XVelZ, Y

	LDA Objects_Orientation, X
	AND #SPR_HFLIP
	BEQ ShyGuy_ClearHolding

	LDA Objects_XVelZ, Y
	EOR #$FF
	ADD #$01
	STA Objects_XVelZ, Y

ShyGuy_ClearHolding:
	LDA #$00
	STA ShyGuy_Holding, X

ShyGuy_ThrowBlockDone:
	RTS



VeggieGuy_Frame = Objects_Data1
VeggieGuy_Holding = Objects_Data2
VeggieGuy_PullingVeggie = Objects_Data3

ObjInit_VeggieGuy:
	LDA #$04
	STA Objects_SpritesRequested, X
	
	JSR Object_CalcBoundBox
	JSR Object_MoveTowardsPlayer

	LDA #$01
	STA Objects_Health, X
	RTS		 ; Return

ObjNorm_VeggieGuy:
	LDA <Player_HaltGameZ
	BEQ VeggieGuy_Norm
	
	JMP VeggieGuy_Draw

VeggieGuy_Norm:
	JSR Object_DeleteOffScreen
	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_DetectTiles
	JSR Object_InteractWithTiles
	JSR Object_FacePlayerOnLanding
	JSR VeggieGuy_FindVeggie
	JSR VeggieGuy_GrabVeggie
	JSR VeggieGuy_ThrowVeggie
	JSR Object_AttackOrDefeat

VeggieGuy_Animate:
	INC VeggieGuy_Frame, X

VeggieGuy_Draw:
	LDY #$00

	LDA VeggieGuy_PullingVeggie, X
	BNE VeggieGuy_DoDraw
	
	LDA VeggieGuy_Holding, X
	BEQ VeggieGuy_NoArms

	INY

VeggieGuy_NoArms:
	TYA
	ASL A
	STA <Temp_Var1

	LDA VeggieGuy_Frame, X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA <Temp_Var16
	ORA <Temp_Var1
	STA Objects_Frame, X

VeggieGuy_DoDraw:
	LDA <Objects_YVelZ, X
	BPL VeggieGuy_GroundAnim

	LDA #$05
	STA Objects_Frame, X
	JSR Object_DrawMirrored
	JMP VeggieGuy_DrawVeggie

VeggieGuy_GroundAnim:
	LDA Objects_Frame, X
	SUB #$04
	CMP #$02
	BCS VeggieGuy_DrawNorm

	JSR Object_DrawMirrored
	JMP VeggieGuy_DrawVeggie

VeggieGuy_DrawNorm:
	JSR Object_Draw

VeggieGuy_DrawVeggie:

	LDA VeggieGuy_Holding, X
	BEQ VeggieGuy_DrawDone

VeggieGuy_VeggieSprites:
	LDA #$0E
	ADD <Temp_Var16
	STA <Temp_Var16

	LDA Objects_SpritesVerticallyOffScreen, X
	AND #SPRITE_0_VINVISIBLE
	BNE VeggieGuy_DrawDone

	LDA Objects_SpritesHorizontallyOffScreen, X
	AND #SPRITE_0_HINVISIBLE
	BNE VeggieGuy_DrawRight

	LDA #$B3
	STA Sprite_RAMTile + 8, Y

	LDA Objects_SpriteX, X
	STA Sprite_RAMX + 8, Y

	LDA Objects_SpriteY, X
	SUB <Temp_Var16
	STA Sprite_RAMY + 8, Y

	LDA #SPR_PAL2
	STA Sprite_RAMAttr + 8, Y

VeggieGuy_DrawRight:
	LDA Objects_SpritesHorizontallyOffScreen, X
	AND #SPRITE_1_INVISIBLE
	BNE VeggieGuy_DrawDone

	LDA #$B3
	STA Sprite_RAMTile + 12, Y

	LDA Objects_SpriteX, X
	ADD #$08
	STA Sprite_RAMX + 12, Y

	LDA Objects_SpriteY, X
	SUB <Temp_Var16
	STA Sprite_RAMY + 12, Y

	LDA #(SPR_PAL2 | SPR_HFLIP)
	STA Sprite_RAMAttr + 12, Y

VeggieGuy_DrawDone:
	RTS

VeggieGuy_FindVeggie:
	LDA VeggieGuy_Holding, X
	BNE VeggieGuy_FindVeggieDone

	LDA VeggieGuy_PullingVeggie, X
	BNE VeggieGuy_FindVeggieDone

	LDA <Objects_XZ, X
	AND #$0F
	BNE VeggieGuy_FindVeggieDone

	LDA <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ VeggieGuy_FindVeggieDone

	LDA Object_BodyTileProp, X
	CMP #TILE_PROP_SOLID_TOP
	BCS VeggieGuy_FindVeggieDone

	AND #$0F
	CMP #TILE_PROP_ENEMY
	BNE VeggieGuy_FindVeggieDone

	LDA #$20
	STA VeggieGuy_PullingVeggie, X
	
VeggieGuy_FindVeggieDone:
	RTS

VeggieGuy_GrabVeggie:
	LDA VeggieGuy_PullingVeggie, X
	BEQ VeggieGuy_GrabVeggieDone
	
	LDA #$00
	STA <Objects_XVelZ, X
	
	DEC VeggieGuy_PullingVeggie, X
	BNE VeggieGuy_KeepPulling

	LDA Block_NeedsUpdate
	BEQ VeggieGuy_Pluck

	INC VeggieGuy_PullingVeggie, X
	RTS

VeggieGuy_Pluck:
	
	LDA #$01
	STA VeggieGuy_Holding, X
	
	LDA #$E0
	STA <Objects_YVelZ, X

	LDA <Objects_XZ, X
	ADD #$08
	STA Block_DetectX

	LDA <Objects_XHiZ, X
	STA Block_DetectXHi

	LDA <Objects_YZ, X
	ADD #$08
	STA Block_DetectY

	LDA <Objects_YHiZ, X
	STA Block_DetectYHi

	LDA Object_BodyTileValue, X
	AND #$C0
	ORA #$01
	JSR Object_ChangeBlock
	RTS
	
VeggieGuy_KeepPulling:
	LDA #$04
	STA Objects_Frame, X
	RTS

VeggieGuy_GrabVeggieDone:
	RTS

VeggieGuy_ThrowVeggie:
	LDA <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ VeggieGuy_ThrowVeggieDone

	LDA <Objects_YVelZ, X
	BNE VeggieGuy_ThrowVeggieDone

	LDA VeggieGuy_Holding, X
	BEQ VeggieGuy_ThrowVeggieDone

	JSR Object_XDistanceFromPlayer
	LDA <XDiff
	CMP #$30
	BCS VeggieGuy_ThrowVeggieDone

	JSR Object_YDistanceFromPlayer

	LDA <YDiff
	CMP #$20
	BCS VeggieGuy_ThrowVeggieDone

	JSR Object_PrepProjectile
	BCC VeggieGuy_ThrowVeggieDone
	
	
	LDA #SOBJ_VEGGIE
	STA SpecialObj_ID,Y

	LDA <Objects_XZ, X
	STA SpecialObj_X, Y

	LDA <Objects_XHiZ, X
	STA SpecialObj_XHi, Y

	LDA <Objects_YZ, X
	SUB #$10
	STA SpecialObj_Y, Y

	LDA <Objects_YHiZ, X
	SBC #$00
	STA SpecialObj_YHi, Y

	LDA #$E8
	STA SpecialObj_YVel, Y

	LDA #$E0
	STA SpecialObj_XVel, Y

	LDA <Objects_XVelZ, X
	BMI VeggieGuy_ClearHolding
	
	LDA #$20
	STA SpecialObj_XVel, Y

VeggieGuy_ClearHolding:
	LDA #$00
	STA VeggieGuy_Holding, X

VeggieGuy_ThrowVeggieDone:
	RTS



SnowGuy_Frame = Objects_Data1
SnowGuy_Holding = Objects_Data2
SnowGuy_DiggingSnow = Objects_Data3
SnowGuy_ForceDrawSnow =  Objects_Data4

ObjInit_SnowGuy:
	LDA #$04
	STA Objects_SpritesRequested, X

	JSR Object_CalcBoundBox
	JSR Object_MoveTowardsPlayer

	LDA Objects_Property, X
	STA SnowGuy_Holding, X

	LDA #$01
	STA Objects_Health, X
	RTS		 ; Return

ObjNorm_SnowGuy:
	LDA <Player_HaltGameZ
	BEQ SnowGuy_Norm
	
	JMP SnowGuy_Draw

SnowGuy_Norm:
	JSR Object_DeleteOffScreen
	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_DetectTiles
	JSR Object_InteractWithTiles
	JSR Object_FacePlayerOnLanding
	JSR SnowGuy_FindSnow
	JSR SnowGuy_GrabSnow
	JSR SnowGuy_ThrowSnow
	JSR Object_AttackOrDefeat

SnowGuy_Animate:
	INC SnowGuy_Frame, X
	LDY #$00

	LDA SnowGuy_DiggingSnow, X
	BNE SnowGuy_Draw
	
	LDA SnowGuy_Holding, X
	BEQ SnowGuy_NoArms

	INY

SnowGuy_NoArms:
	TYA
	ASL A
	STA <Temp_Var1

	LDA SnowGuy_Frame, X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA <Temp_Var16
	ORA <Temp_Var1
	STA Objects_Frame, X

SnowGuy_Draw:
	LDA <Objects_YVelZ, X
	BPL SnowGuy_GroundAnim

	LDA #$05
	STA Objects_Frame, X
	JSR Object_DrawMirrored
	JMP SnowGuy_DrawSnow

SnowGuy_GroundAnim:
	LDA Objects_Frame, X
	SUB #$04
	CMP #$02
	BCS SnowGuy_DrawNorm

	JSR Object_DrawMirrored
	JMP SnowGuy_DrawSnow

SnowGuy_DrawNorm:
	JSR Object_Draw

SnowGuy_DrawSnow:
	LDA SnowGuy_ForceDrawSnow, X
	BEQ SnowGuy_SnowNotForced 

	LDA #$00
	STA SnowGuy_ForceDrawSnow, X
	BEQ SnowGuy_SnowSprites

SnowGuy_SnowNotForced:
	LDA SnowGuy_Holding, X
	BEQ SnowGuy_DrawDone

SnowGuy_SnowSprites:
	LDA #$0E
	ADD <Temp_Var16
	STA <Temp_Var16

	LDA Objects_SpritesHorizontallyOffScreen, X
	AND #SPRITE_0_HINVISIBLE
	BNE SnowGuy_DrawRight


	LDA #$8D
	STA Sprite_RAMTile + 8, Y

	LDA Objects_SpriteX, X
	STA Sprite_RAMX + 8, Y

	LDA Sprite_RAMY, Y
	SUB <Temp_Var16
	STA Sprite_RAMY + 8, Y

	LDA Sprite_RAMAttr, Y
	AND #SPR_BEHINDBG
	ORA #SPR_PAL2
	STA Sprite_RAMAttr + 8, Y

SnowGuy_DrawRight:
	LDA Objects_SpritesHorizontallyOffScreen, X
	AND #SPRITE_1_INVISIBLE
	BNE SnowGuy_DrawDone

	LDA #$8F
	STA Sprite_RAMTile + 12, Y

	LDA Objects_SpriteX, X
	ADD #$08
	STA Sprite_RAMX + 12, Y

	LDA Sprite_RAMY, Y
	SUB <Temp_Var16
	STA Sprite_RAMY + 12, Y

	LDA Sprite_RAMAttr, Y
	AND #SPR_BEHINDBG
	ORA #SPR_PAL2
	STA Sprite_RAMAttr + 12, Y

SnowGuy_DrawDone:
	RTS

SnowGuy_FindSnow:
	LDA SnowGuy_Holding, X
	BNE SnowGuy_FindSnowDone

	LDA SnowGuy_DiggingSnow, X
	BNE SnowGuy_FindSnowDone

	LDA <Objects_XZ, X
	AND #$0F
	BNE SnowGuy_FindSnowDone

	LDA <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ SnowGuy_FindSnowDone

	LDA Object_VertTileProp, X
	CMP #(TILE_PROP_SOLID_ALL | TILE_PROP_ENEMYSOLID)
	BNE SnowGuy_FindSnowDone

	LDA #$40
	STA SnowGuy_DiggingSnow, X
	
SnowGuy_FindSnowDone:
	RTS

SnowGuy_GrabSnow:
	LDA SnowGuy_DiggingSnow, X
	BEQ SnowGuy_GrabSnowDone
	
	LDA #$00
	STA <Objects_XVelZ, X
	DEC SnowGuy_DiggingSnow, X
	BNE SnowGuy_KeepDigging
	
	LDA #$01
	STA SnowGuy_Holding, X
	
	LDA #$E0
	STA <Objects_YVelZ, X
	RTS
	
SnowGuy_KeepDigging:
	LDA SnowGuy_DiggingSnow, X
	CMP #$20
	BCS ShyGuy_DigAnimate
	
	LDA #$06
	STA Objects_Frame, X
	RTS
	
ShyGuy_DigAnimate:
	LSR A
	LSR A
	LSR A
	AND #$01
	ADD #$04
	STA Objects_Frame, X
	
SnowGuy_GrabSnowDone:
	RTS

SnowGuy_ThrowSnow:
	LDA <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ SnowGuy_ThrowSnowDone

	LDA <Objects_YVelZ, X
	BNE SnowGuy_ThrowSnowDone

	LDA SnowGuy_Holding, X
	BEQ SnowGuy_ThrowSnowDone

	JSR Object_XDistanceFromPlayer
	LDA <XDiff
	CMP #$50
	BCS SnowGuy_ThrowSnowDone

	JSR Object_FindEmptyY
	BCC SnowGuy_ThrowSnowDone
	
	LDA <Objects_XZ, X
	STA Objects_XZ, Y

	LDA <Objects_XHiZ, X
	STA Objects_XHiZ, Y

	LDA <Objects_YZ, X
	SUB #$10
	STA Objects_YZ, Y

	LDA <Objects_YHiZ, X
	SBC #$00
	STA Objects_YHiZ, Y

	LDA #$E8
	STA Objects_YVelZ, Y

	LDA #OBJ_SNOWBALL
	STA Objects_ID, Y

	LDA #SPR_PAL2
	STA Objects_SpriteAttributes, Y
	
	LDA #$E8
	STA Objects_XVelZ, Y

	LDA Objects_Orientation, X
	AND #SPR_HFLIP
	BEQ SnowGuy_ClearHolding

	LDA Objects_XVelZ, Y
	EOR #$FF
	ADD #$01
	STA Objects_XVelZ, Y

SnowGuy_ClearHolding:
	LDA #$00
	STA SnowGuy_Holding, X

	INC SnowGuy_ForceDrawSnow, X

SnowGuy_ThrowSnowDone:
	RTS    

ObjInit_Troopa:
	LDA #$05
	STA Objects_SpritesRequested, X

	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #(ATTR_WINDAFFECTS | ATTR_HASSHELL | ATTR_CARRYANDBUMP)
	STA Objects_BehaviorAttr, X

	JSR Object_CalcBoundBox
	JSR Object_MoveTowardsPlayer
	LDA <Objects_YZ, X
	ADD #$10
	STA <Objects_YZ, X

	LDA <Objects_YHiZ, X
	ADC #$00
	STA <Objects_YHiZ, X

	LDA #$01
	STA Objects_Health, X

	LDA #$02
	STA Objects_ExpPoints, X
	RTS


Troopa_CurrentFrame = Objects_Data1
Troopa_FrameOffset = Objects_Data2
ParaTroopa_WingFrame = Objects_Data3


ObjNorm_Troopa:
	LDA <Player_HaltGameZ
	BEQ Troopa_Norm
	JMP Troopa_Draw

Troopa_Norm:
	JSR Object_DeleteOffScreen
	JSR Object_Move
	JSR Object_FaceDirectionMoving
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat
	JSR Object_InteractWithObjects
	BCS Troopa_Animate

	JSR Object_DetectTiles
	JSR Object_InteractWithTiles
	JSR Object_EdgeMarch
	JMP Troopa_Animate

Troopa_Frames:
	.byte $00, $04

Troopa_WingFrames:
	.byte $CD, $CF

Troopa_YOffset:
	.byte $06, $05		

Troopa_Animate:
	INC Troopa_CurrentFrame, X
	
	LDA Troopa_CurrentFrame, X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA ParaTroopa_WingFrame, X
	TAY	

	LDA Troopa_Frames, Y
	STA Objects_Frame,X

	LDA Troopa_YOffset, Y
	STA Troopa_FrameOffset, X
	

Troopa_Draw:
	LDA <Objects_YZ, X
	SUB Troopa_FrameOffset, X	
	STA <Objects_YZ, X

	JSR Object_Draw16x32

	LDA <Objects_YZ, X
	ADD Troopa_FrameOffset, X	
	STA <Objects_YZ, X

	LDY Object_SpriteRAMOffset, X

	LDA #$C1
	STA Sprite_RAMTile + 16, Y

	LDA Objects_Orientation, X
	AND #SPR_HFLIP
	BNE Troopa_ColorFixFlip

	LDA Sprite_RAMX, Y
	STA Sprite_RAMX + 16, Y

	LDA Sprite_RAMY, Y
	SUB #$10
	STA Sprite_RAMY + 16, Y

	LDA Sprite_RAMAttr, Y
	ORA #SPR_PAL3
	STA Sprite_RAMAttr, Y
	STA Sprite_RAMAttr+8, Y
	STA Sprite_RAMAttr+12, Y
	STA Sprite_RAMAttr+16, Y
	RTS
	
Troopa_ColorFixFlip:	
	LDA Sprite_RAMY + 4, Y
	SUB #$10
	STA Sprite_RAMY + 16, Y

	LDA Sprite_RAMX + 4, Y
	STA Sprite_RAMX + 16, Y

	LDA Sprite_RAMAttr + 4, Y
	ORA #SPR_PAL3
	STA Sprite_RAMAttr + 4, Y
	STA Sprite_RAMAttr+8, Y
	STA Sprite_RAMAttr+12, Y
	STA Sprite_RAMAttr+16, Y
	RTS


ObjNorm_RedTroopa:
	LDA <Player_HaltGameZ
	BEQ RedTroopa_Norm
	JMP Troopa_Draw

RedTroopa_Norm:
	JSR Object_DeleteOffScreen
	JSR Object_Move
	JSR Object_FaceDirectionMoving
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat
	JSR Object_InteractWithObjects
	BCS RedTroopa_Animate

	JSR Object_DetectTiles
	JSR Object_InteractWithTiles
	JSR Object_EdgeMarch

RedTroopa_Animate:
	JMP Troopa_Animate

ObjInit_BouncyTroopa:
	JSR ObjInit_Troopa
	
	LDA #$06
	STA Objects_SpritesRequested, X
	RTS

Bouncey_FlutterTime: = Objects_Data9

ObjNorm_BouncyTroopa:
	LDA <Player_HaltGameZ
	BEQ ObjNorm_BouncyTroopa0

	JMP ParaTroopa_Draw

ObjNorm_BouncyTroopa0:
	LDA Objects_InWater, X
	BEQ Bouncy_NotWater

	LDA #$00
	STA <Objects_YVelZ, X

Bouncy_NotWater:
	LDA  <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ ObjNorm_BouncyTroopa1

	LDA Objects_PreviousTilesDetect, X
	AND #HIT_GROUND
	BNE ObjNorm_BouncyTroopa1

	LDA #$00
	STA Bouncey_FlutterTime, X

	LDA #$C0
	STA Objects_YVelZ, X
	BNE ObjNorm_BouncyTroopa2

ObjNorm_BouncyTroopa1:
	LDA DayNight
	BPL ObjNorm_BouncyTroopa2

	LDA <Objects_YVelZ, X
	BMI ObjNorm_BouncyTroopa2

	LDA Bouncey_FlutterTime, X
	CMP #$10
	BCS ObjNorm_BouncyTroopa2

	INC Bouncey_FlutterTime, X
	LDA #$00
	STA Objects_YVelZ, X

ObjNorm_BouncyTroopa2:
	
	JSR Object_DeleteOffScreen
	JSR Object_Move
	JSR Object_FaceDirectionMoving
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat
	JSR Object_InteractWithObjects
	BCS ObjNorm_BouncyTroopa3

	JSR Object_DetectTiles
	JSR Object_InteractWithTiles
	
ObjNorm_BouncyTroopa3:
	JMP ParaTroopa_Animate

ParaTroopa_StartX = Objects_Data6

ObjInit_ParaTroopa:
	LDA #$06
	STA Objects_SpritesRequested, X

	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #$01
	STA Objects_Health, X

	LDA #$02
	STA Objects_ExpPoints, X

	LDA #(ATTR_WINDAFFECTS | ATTR_HASSHELL | ATTR_CARRYANDBUMP)
	STA Objects_BehaviorAttr, X

	LDA <Objects_YZ, X
	ADD #$10
	STA <Objects_YZ, X

	LDA <Objects_YHiZ, X
	ADC #$00
	STA <Objects_YHiZ, X

	LDA Objects_Property, X
	AND #$FE
	CMP #$04
	BNE ObjInit_ParaTroopa1

	LDA <Objects_YZ, X
	SUB #$40
	STA <Objects_YZ, X

	LDA <Objects_YHiZ, X
	SBC #$00
	STA <Objects_YHiZ, X

ObjInit_ParaTroopa1:
	LDA <Objects_XZ, X
	STA ParaTroopa_StartX, X

	JMP InitPatrol

ObjNorm_ParaTroopa:
	LDA <Player_HaltGameZ
	BEQ ParaTroopa_Norm
	
	JMP ParaTroopa_Draw

ParaTroopa_Norm:
	LDA Objects_Property, X
	CMP #$06
	BEQ ParaTroopa_CheckDelete

	LDA <Objects_XZ, X
	CMP ParaTroopa_StartX, X
	BNE ObjNorm_ParaTroopa0

ParaTroopa_CheckDelete:
	JSR Object_DeleteOffScreen

ObjNorm_ParaTroopa0:
	JSR DoPatrol
	JSR Object_FaceDirectionMoving
	JSR Object_CalcBoundBox
	JSR Object_DetectTiles
	JSR Object_InteractWithTiles
	JSR Object_AttackOrDefeat

ObjNorm_ParaTroopa2:
	JMP ParaTroopa_Animate

Troopa_WingYOffset:
	.byte $07, $06

ParaTroopa_WingFrames:
	.byte $CD, $CF    

ParaTroopa_Animate:
	LDA Object_SpriteRAMOffset, X
	ADD #$04
	STA Object_SpriteRAMOffset, X
	
	JMP ParaTroopa_DrawWing

ParaTroopa_Draw:
	LDA Object_SpriteRAMOffset, X
	ADD #$04
	STA Object_SpriteRAMOffset, X
	JSR Troopa_Animate
	JMP ParaTroopa_DrawWing

ParaTroopa_DrawWing:	
	LDA ParaTroopa_WingFrame, X
	TAX

	LDA ParaTroopa_WingFrames, X
	STA Sprite_RAMTile-4, Y

	LDA Sprite_RAMAttr, Y
	AND #~SPR_PAL3
	ORA #SPR_PAL1
	STA Sprite_RAMAttr - 4, Y

	CMP #SPR_HFLIP
	BCS ParaTroopa_WingFlipped

	LDA Sprite_RAMY + 4, Y
	SUB Troopa_WingYOffset, X
	STA Sprite_RAMY - 4, Y

	LDA Sprite_RAMX , Y
	ADD #$08
	STA Sprite_RAMX - 4, Y
	RTS

ParaTroopa_WingFlipped:
	LDA Sprite_RAMY, Y
	SUB Troopa_WingYOffset, X
	STA Sprite_RAMY - 4, Y

	LDA Sprite_RAMX, Y
	STA Sprite_RAMX - 4, Y
	RTS


ObjInit_BuzzyBeetle:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #(ATTR_FIREPROOF)
	STA Objects_WeaponAttr, X
	
	LDA #(ATTR_WINDAFFECTS | ATTR_HASSHELL | ATTR_CARRYANDBUMP)
	STA Objects_BehaviorAttr, X

	JSR Object_CalcBoundBox
	JSR Object_MoveTowardsPlayer
	RTS
	
ObjNorm_BuzzyBeetle:
	JMP ObjNorm_Spiny

Spiny_Frame = Objects_Data1

ObjInit_Spiny:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #(ATTR_STOMPPROOF)
	STA Objects_WeaponAttr, X
	
	LDA #(ATTR_WINDAFFECTS | ATTR_HASSHELL | ATTR_CARRYANDBUMP)
	STA Objects_BehaviorAttr, X

	JSR Object_CalcBoundBox
	JSR Object_MoveTowardsPlayer

	LDA Objects_Property, X
	CMP #$02
	BNE ObjInit_SpinyRTS

	LDA #SPR_PAL2
	STA Objects_SpriteAttributes, X

ObjInit_SpinyRTS:
	RTS
	
ObjNorm_Spiny:
	LDA <Player_HaltGameZ
	BEQ Spiny_Norm

	JMP Spiny_Draw

Spiny_Norm:
	JSR Object_DeleteOffScreen

	LDA Objects_Property, X
	AND #$01
	BEQ Spiny_NormGravity

	INC Reverse_Gravity
	LDA Objects_Orientation, X
	ORA #SPR_VFLIP
	STA Objects_Orientation, X

Spiny_NormGravity:
	JSR Object_MoveDirectionFacing
	JSR Object_Move
	JSR Object_CalcBoundBox

	LDA Objects_Property, X
	AND #$01
	BEQ Spiny_NoDrop

	JSR Object_XDistanceFromPlayer
	
	LDA <XDiff
	CMP #$30
	BCS Spiny_NoDrop

	LDA #OBJSTATE_KICKED
	STA Objects_State, X

	JSR Object_MoveTowardsPlayer

	LDA <Objects_XVelZ, X
	JSR Double_Value
	STA <Objects_XVelZ, X

	LDA #$00
	STA Objects_Property, X

Spiny_NoDrop:
	JSR Object_DetectTiles
	JSR Object_InteractWithTiles

	LDA Objects_Property, X
	CMP #$02
	BNE Spiny_NoEdgeMarch

	JSR Object_EdgeMarch
	
Spiny_NoEdgeMarch:
	JSR Object_InteractWithObjects
	JSR Object_AttackOrDefeat
	JSR Object_FaceDirectionMoving

	INC Spiny_Frame, X
	LDA Spiny_Frame, X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame, X

Spiny_Draw:
	JMP Object_Draw


ObjInit_Goomba:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #(ATTR_WINDAFFECTS | ATTR_CARRYANDBUMP)
	STA Objects_BehaviorAttr, X

	JSR Object_CalcBoundBox

	LDA <Objects_XVelZ, X
	BNE GoombaInit_NoMove

	JSR Object_MoveTowardsPlayer

GoombaInit_NoMove:
	LDA Objects_Property, X
	BEQ ObjInit_Goomba1

	LDA #SPR_VFLIP
	STA Objects_Orientation, X

ObjInit_Goomba1:
	RTS

Goomba_Action = Objects_Data1
Goomba_CurrentFrame = Objects_Data2
Goomba_DeathTimer = Objects_Data3
Goomba_BehindTimer = Objects_Data4

Goomba_CappedMovement:
	.byte $08, $F8

ObjNorm_Goomba:
	LDA <Player_HaltGameZ
	BEQ Goomba_DoAction
	JMP Goomba_Draw

Goomba_DoAction:

	LDA Goomba_Action, X
	JSR DynJump

	.word Goomba_Norm
	.word Goomba_Left
	.word Goomba_Right
	.word Goomba_Raise
	.word Goomba_Drop

Goomba_Raise:
	LDA Objects_Timer, X
	BEQ Goomba_PopOut

	CMP #$20
	BCC Goomba_RaiseDone

	LDA #$F0
	STA <Objects_YVelZ, X

	JSR Object_ApplyYVel_NoGravity
	JMP Goomba_Animate

Goomba_PopOut:
	JSR Object_CalcBoundBox
	JSR Object_MoveTowardsPlayer
	
	LDA #$D0
	STA <Objects_YVelZ, X

	LDA #$00
	STA Goomba_Action, X

	LDA #$08
	STA Goomba_BehindTimer, X

Goomba_RaiseDone:
	JMP Goomba_Animate

Goomba_Drop:
	LDA Objects_Timer, X
	BEQ Goomba_DropDown

	CMP #$20
	BCC Goomba_DropDone

	LDA #$10
	STA <Objects_YVelZ, X
	JSR Object_ApplyYVel_NoGravity
	JMP Goomba_Animate

Goomba_DropDown:
	JSR Object_CalcBoundBox
	
	LDA #$01
	STA <Objects_YVelZ, X

	LDA #$00
	STA Goomba_Action, X

	LDA #$08
	STA Goomba_BehindTimer, X

Goomba_DropDone:
	JMP Goomba_Animate

Goomba_Left:
	LDA Objects_Timer, X
	CMP #$10
	BEQ Goomba_Out

	LDA #$F8
	STA <Objects_XVelZ, X
	JSR Object_ApplyXVel

	LDA #$00
	STA Objects_Orientation, X

	JMP Goomba_Animate

Goomba_Right:
	LDA Objects_Timer, X
	CMP #$0A
	BEQ Goomba_Out

	LDA #$08
	STA <Objects_XVelZ, X
	JSR Object_ApplyXVel

	LDA #SPR_HFLIP
	STA Objects_Orientation, X

	JMP Goomba_Animate

Goomba_Out:
	LDA #$00
	STA Goomba_Action, X

	LDA #$08
	STA Goomba_BehindTimer, X
	JMP Goomba_Animate

Goomba_Norm:
	LDA Objects_State, X
	CMP #OBJSTATE_KILLED

	BNE ObjNorm_Goomba0
	JMP Goomba_Death
	
ObjNorm_Goomba0:
	JSR Object_DeleteOffScreen

	LDA <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ Goomba_MovementCapped

	LDY #$00
	
	LDA <Objects_XVelZ, X
	BPL Goomba_CheckSpeed

	INY

Goomba_CheckSpeed:	
	CMP #$08
	BCC Goomba_MovementCapped

	CMP #$F8
	BCS Goomba_MovementCapped

	LDA Goomba_CappedMovement, Y
	STA <Objects_YVelZ, X

Goomba_MovementCapped:
	LDA DayNight
	BNE ObjNorm_Goomba1

	JSR Object_FacePlayerOnLanding

ObjNorm_Goomba1:
	LDA Objects_Property, X
	BEQ ObjNorm_Goomba02

	STA Reverse_Gravity

ObjNorm_Goomba02:

	JSR Object_Move
	JSR Object_CalcBoundBox	
	JSR Object_AttackOrDefeat
	JSR Object_InteractWithObjects
	BCS Goomba_Draw

	JSR Object_DetectTiles
	JSR Object_InteractWithTiles

Goomba_Animate:
	INC Goomba_CurrentFrame, X
	LDA Goomba_CurrentFrame, X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame,X

Goomba_Draw:
	LDA Goomba_Action, X
	ORA Goomba_BehindTimer, X
	BEQ Goomba_NotBehind

	LDA Objects_SpriteAttributes, X
	ORA #SPR_BEHINDBG
	STA Objects_SpriteAttributes, X

	LDA Goomba_BehindTimer, X
	BEQ Goomba_NotBehind

	DEC Goomba_BehindTimer, X

Goomba_NotBehind:
	LDA Objects_Orientation, X
	ORA #SPR_HFLIP
	EOR #SPR_HFLIP
	STA Objects_Orientation, X

	JSR Object_Draw
	LDA Sprite_RAM + 2, Y
	EOR #SPR_HFLIP
	STA Sprite_RAM + 6, Y

	RTS

Goomba_Death:
	LDA Objects_Health, X
	BPL Goomba_Death1
	JMP Goomba_Draw
	 
Goomba_Death1:
	INC Goomba_DeathTimer, X
	LDA Goomba_DeathTimer, X
	CMP #20
	BNE Goomba_Death2

	JMP Object_SetDeadEmpty

Goomba_Death2:
	LDA #$03
	STA Objects_Frame, X
	
	LDA #$00
	STA <Objects_YVelZ, X

	LDA #$00
	STA Objects_Orientation, X
	JMP Object_DrawMirrored

ObjInit_ParaGoomba:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #$02
	STA Objects_ExpPoints, X

	LDA #(ATTR_WINDAFFECTS | ATTR_CARRYANDBUMP)
	STA Objects_BehaviorAttr, X

	LDA #$04
	STA Objects_SpritesRequested, X

	JSR Object_CalcBoundBox
	JSR Object_MoveTowardsPlayer
	LDA #$80
	STA Objects_Timer, X
	RTS

ObjNorm_ParaGoomba:
	JSR ObjNorm_Goomba

	LDA Objects_State, X
	CMP #OBJSTATE_NORMAL
	BEQ ObjNorm_ParaGoomba1
	RTS

ObjNorm_ParaGoomba1:
	LDA <Player_HaltGameZ
	BNE ObjNorm_ParaGoomba2

	LDA Objects_Data5, X
	BNE ObjNorm_ParaGoomba4

	LDA Objects_Timer, X
	BNE ObjNorm_ParaGoomba2

	LDA  <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ ObjNorm_ParaGoomba3

	LDA #$00
	STA Objects_Data3, X
	INC Objects_Data5, X
	BNE ObjNorm_ParaGoomba2

ObjNorm_ParaGoomba2:
	CMP #$10
	BCS ObjNorm_ParaGoomba3

	LDA #$04
	STA Objects_Data3, X
	JMP ParaGoomba_Animate

ObjNorm_ParaGoomba3:
	LDA #$00
	STA Objects_Data3, X

	LDA  <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BNE ObjNorm_ParaGoomba31

	LDA #$04
	STA Objects_Data3, X

ObjNorm_ParaGoomba31:
	JMP ParaGoomba_Animate

ObjNorm_ParaGoomba4:
	INC Objects_Data3, X
	LDA Objects_Data3, X
	CMP #$30
	BCS ObjNorm_ParaGoomba5

ObjNorm_ParaGoomba41:

	LDA #$F0
	STA <Objects_YVelZ, X

	JMP ParaGoomba_Animate

ObjNorm_ParaGoomba5:
	LDY DayNight
	BPL ObjNorm_ParaGoomba51

	CMP #$40
	BCS ObjNorm_ParaGoomba51

	LDA #$00
	STA <Objects_YVelZ, X
	JMP ParaGoomba_Animate

ObjNorm_ParaGoomba51:
	LDA #$00
	STA Objects_Data5, X
	STA Objects_Data3, X
	LDA #$80
	STA Objects_Timer, X

ObjNorm_ParaGoomba6:
	JMP ParaGoomba_Animate

ObjNorm_ParaGoomba7:
	JMP ParaGoomba_Animate

ParaGoomba_Animate:
	LDY Object_SpriteRAMOffset,X	 ; Y = Sprite_RAM offset

	; Left wing
	LDA Sprite_RAM+$00,Y
	CMP #$f8
	BEQ PRG004_AF31	 ; If this sprite is vertically off-screen, jump to PRG004_AF31

	SUB #10
	STA Sprite_RAM+$08,Y

PRG004_AF31:

	; Right wing
	LDA Sprite_RAM+$04,Y
	CMP #$f8
	BEQ PRG004_AF3E	 ; If this sprite is vertically off-screen, jump to PRG004_AF3E

	SUB #10
	STA Sprite_RAM+$0C,Y

PRG004_AF3E:

	; Left wing sprite X
	LDA Sprite_RAM+$03,Y
	SUB #$02
	STA Sprite_RAM+$0B,Y

	; Right wing sprite X
	LDA Sprite_RAM+$07,Y
	ADD #$02
	STA Sprite_RAM+$0F,Y

	; Left wing attribute
	LDA Objects_SpriteAttributes, X
	AND #SPR_BEHINDBG
	ORA #SPR_PAL1
	STA Sprite_RAM+$0E,Y

	ORA #SPR_HFLIP
	STA Sprite_RAM+$0A,Y

	; Right wing attribute
	
	

	LDA Objects_Data3,X

	LDX #$cd	 ; X = $CD (Wing up pattern)
	AND #$04	 
	BNE PRG004_AF65	 ; 8 ticks on, 8 ticks off; jump to PRG004_AF65

	LDX #$cf	 ; X = $CF (Wing down pattern)

PRG004_AF65:
	TXA		 
	STA Sprite_RAM+$09,Y	 ; Store left wing pattern
	STA Sprite_RAM+$0D,Y	 ; Store right wing pattern

	LDX <CurrentObjectIndexZ		 ; X = object slot index

	RTS		 ; Return


ZombieGoomba_CurrentFrame  = Objects_Data1

ObjInit_ZombieGoomba:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #(ATTR_BUMPNOKILL | ATTR_WINDAFFECTS | ATTR_CARRYANDBUMP)
	STA Objects_BehaviorAttr, X

	LDA #$02
	STA Objects_Health, X


	LDA #$F0
	STA ChaseVel_LimitLo, X

	LDA #$10
	STA ChaseVel_LimitHi, X

ObjInit_ZombieGoombaRTS:
	RTS

ObjNorm_ZombieGoomba:
	LDA Objects_Property, X
	JSR DynJump

	.word ZombieGoomba_Norm
	.word ZombieGoomba_Hide

ZombieGoomba_Norm:
	LDA <Player_HaltGameZ
	BEQ ZombieGoomba_DoNorm

	JMP Object_DrawMirrored

ZombieGoomba_DoNorm:
	JSR Object_DeleteOffScreen
	JSR Object_ChasePlayerX
	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_InteractWithPlayer
	JSR Object_InteractWithObjects

	LDA Objects_Timer, X
	BNE ZombieGoomba_Chase

	JSR Object_DetectTiles
	JSR Object_InteractWithTilesWallStops

ZombieGoomba_Chase:	
	JSR Object_YDistanceFromPlayer
	
	LDA <YDiffAboveBelow
	ORA <Objects_YVelZ, X
	BNE ZombieGoomba_CheckWater

	LDA <Objects_TilesDetectZ, X
	AND #(HIT_LEFTWALL | HIT_RIGHTWALL)
	BEQ ZombieGoomba_CheckLanding

	LDA #$DE
	STA <Objects_YVelZ, X
	BNE ZombieGoomba_CheckWater

ZombieGoomba_CheckLanding:
	LDA <Objects_TilesDetectZ, X
	AND #(HIT_GROUND)
	BEQ ZombieGoomba_CheckWater

	JSR Object_MoveTowardsPlayerFast

ZombieGoomba_CheckWater:
	LDA Objects_InWater,X
	BEQ ZombieGoomba_Animate

	JMP Object_PoofDie

ZombieGoomba_Animate:
	INC ZombieGoomba_CurrentFrame, X
	LDA ZombieGoomba_CurrentFrame, X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame,X

ZombieGoomba_Draw:
	JMP Object_DrawMirrored

ZombieGoomba_JumpBlocks:
	LDA <Objects_TilesDetectZ, X
	AND Objects_PreviousTilesDetect, X
	AND #$04
	BNE ZombieGoomba_JumpBlocksRTS

ZombieGoomba_JumpBlocksRTS:
	RTS	

ZombieGoomba_Infect:
	LDA Player_FlashInv
	ORA Player_StarInv
	BNE ZombieGoomba_HurtRTS

	LDA LeftRightInfection
	BNE ZombieGoomba_Hurt

	LDA #$17
	STA Player_SuitLost

	LDA #$80
	STA Player_QueueSuit

	LDA #$01
	STA LeftRightInfection
	
	LDA #$71
	STA Player_FlashInv
	RTS

ZombieGoomba_Hurt:
	JSR Player_GetHurt

ZombieGoomba_HurtRTS:
	RTS

ZombieGoomba_Hide:
	JSR Object_DeleteOffScreen
	JSR Object_CalcBoundBox
	JSR Object_DetectTileCenter
	AND #$F0
	BEQ ZombieGoomba_PopOut
	
	JSR Object_XDistanceFromPlayer
	CMP #$30
	BCS ZombieGoomba_HideRTS

	LDA Block_NeedsUpdate
	BNE ZombieGoomba_HideRTS

	LDA <Objects_XZ, X
	STA <Debris_X

	LDA <Objects_YZ, X
	STA <Debris_Y
	
	JSR Common_MakeBricks

	
	LDA Tile_LastValue
	ADD #$01
	
	JSR Object_ChangeBlock

ZombieGoomba_PopOut:
	LDA #$00
	STA Objects_Property, X

	LDA #$C0
	STA <Objects_YVelZ, X

	LDA #$20
	STA Objects_Timer, X

ZombieGoomba_HideRTS:
	RTS

SwimCheep_CurrentFrame = Objects_Data1
SwimCheep_StartX = Objects_Data2
SwimCheep_StartXHi = Objects_Data3
SwimCheep_StartY = Objects_Data4
SwimCheep_StartYHi = Objects_Data5

ObjInit_SwimmingCheep:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #$02
	STA Objects_ExpPoints, X

	LDA #(ATTR_STOMPPROOF)
	STA Objects_WeaponAttr, X

	JSR InitPatrol

	LDA <Objects_XZ, X
	STA SwimCheep_StartX, X


	LDA Objects_Property, X
	CMP #$06
	BNE ObjInit_SwimmingCheepRTS

	LDA #$F8
	STA ChaseVel_LimitLo, X

	LDA #$08
	STA ChaseVel_LimitHi, X

ObjInit_SwimmingCheepRTS:
	RTS

ObjNorm_SwimmingCheep:
	LDA <Player_HaltGameZ
	BNE Cheep_Draw

	LDA Objects_Property, X
	CMP #$06
	BEQ SwimmingCheep_CheckDelete

	LDA <Objects_XZ, X
	CMP SwimCheep_StartX, X
	BNE SwimmingCheep_NoDelete

SwimmingCheep_CheckDelete:
	JSR Object_DeleteOffScreen

SwimmingCheep_NoDelete:
	JSR DoPatrol
	JSR Object_FaceDirectionMoving
	JSR Object_CalcBoundBox
	JSR Object_DetectTiles
	JSR Object_InteractWithTilesWallStops
	JSR Object_AttackOrDefeat

	LDA Objects_Property, X
	CMP #$06
	BNE ObjNorm_SwimmingCheep2

ObjNorm_SwimmingCheep1:
	LDA Object_VertTileProp, X
	BNE ObjNorm_SwimmingCheep2

	JSR Object_HitCeiling

ObjNorm_SwimmingCheep2:
	LDA Object_HorzTileProp, X
	BNE ObjNorm_SwimmingCheep3

	JSR Object_HitWall

ObjNorm_SwimmingCheep3:
	INC SwimCheep_CurrentFrame,X	 ; Var5++

	; Toggle frame 0/1
	LDA SwimCheep_CurrentFrame,X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame,X

Cheep_Draw:
	JMP Object_Draw	
	
    .org ObjectGroup_InitJumpTable
;****************************** OBJECT INITIALIZATION ******************************
	.word ObjInit_BulletBill	; Object $78 - OBJ_BULLETBILL
	.word ObjInit_MissileMark	; Object $79 - OBJ_BULLETBILLHOMING
	.word ObjInit_PurpleTroopa	; Object $7A - OBJ_PURPLETROOPA
	.word ObjInit_DoNothing	; Object $7B - OBJ_BLUESHELL
	.word ObjInit_Larry	; Object $7C - OBJ_HELPER
	.word ObjInit_ParaZombieGoomba	; Object $7D - OBJ_PARAZOMBIEGOOMBA
	.word ObjInit_DoNothing	; Object $7E - OBJ_BIGGREENHOPPER
	.word ObjInit_DoNothing	; Object $7F - OBJ_BIGPurplePIRANHA
	.word ObjInit_DoNothing	; Object $80 - OBJ_FLYINGGREENPARATROOPA
	.word ObjInit_HammerBro		; Object $81 - OBJ_HAMMERBRO
	.word ObjInit_NinjaBro	; Object $82 - OBJ_NINJABRO
	.word ObjInit_Lakitu		; Object $83 - OBJ_LAKITU
	.word ObjInit_SpinyEgg	; Object $84 - OBJ_SPINYEGG
	.word ObjInit_DoNothing	; Object $85 - OBJ_BLUESPINY
	.word ObjInit_IceBro		; Object $86 - OBJ_ICEBRO
	.word ObjInit_FireBro		; Object $87 - OBJ_FIREBRO
	.word ObjInit_PirateBro	; Object $88 - OBJ_PIRATEBRO
	.word ObjInit_ChainChomp	; Object $89 - OBJ_CHAINCHOMP
	.word ObjInit_Thwomp		; Object $8A - OBJ_THWOMP
	.word ObjInit_AngryThwomp	; Object $8B - OBJ_AngryTHWOMP


    .org ObjectGroup_NormalJumpTable
;****************************** OBJECT GAME LOOP ******************************
	.word ObjNorm_BulletBill	; Object $78 - OBJ_BULLETBILL
	.word ObjNorm_MissileMark	; Object $79 - OBJ_BULLETBILLHOMING
	.word ObjNorm_PurpleTroopa	; Object $7A - OBJ_PURPLETROOPA
	.word ObjNorm_DoNothing		; Object $7B - OBJ_BLUESHELL
	.word ObjNorm_Larry	; Object $7C - OBJ_HELPER
	.word ObjNorm_ParaZombieGoomba	; Object $7D - OBJ_PARAZOMBIEGOOMBA
	.word ObjNorm_DoNothing	; Object $7E - OBJ_BIGGREENHOPPER
	.word ObjNorm_DoNothing	; Object $7F - OBJ_BIGPurplePIRANHA
	.word ObjNorm_DoNothing	; Object $80 - OBJ_FLYINGGREENPARATROOPA
	.word ObjNorm_HammerBro		; Object $81 - OBJ_HAMMERBRO
	.word ObjNorm_NinjaBro	; Object $82 - OBJ_NINJABRO
	.word ObjNorm_Lakitu		; Object $83 - OBJ_LAKITU
	.word ObjNorm_SpinyEgg		; Object $84 - OBJ_SPINYEGG
	.word ObjNorm_DoNothing	; Object $85 - OBJ_BLUESPINY
	.word ObjNorm_FireIcePirateBro		; Object $86 - OBJ_ICEBRO
	.word ObjNorm_FireIcePirateBro		; Object $87 - OBJ_FIREBRO
	.word ObjNorm_FireIcePirateBro	; Object $88 - OBJ_PIRATEBRO
	.word ObjNorm_ChainChomp	; Object $89 - OBJ_CHAINCHOMP
	.word ObjNorm_Thwomp		; Object $8A - OBJ_THWOMP
	.word ObjNorm_AngryThwomp	; Object $8B - OBJ_AngryTHWOMP

    .org ObjectGroup_CollideJumpTable
;****************************** OBJECT PLAYER INTERACTION ******************************
	.word $0000					; Object $78 - OBJ_BULLETBILL
	.word Object_Explode					; Object $79 - OBJ_BULLETBILLHOMING
	.word Object_Hold					; Object $7A - OBJ_PURPLETROOPA
	.word $0000					; Object $7B - OBJ_BLUESHELL
	.word Larry_InteractWithPlayer		; Object $7C - OBJ_HELPER
	.word $0000					; Object $7D - OBJ_PARAZOMBIEGOOMBA
	.word $0000 | OBJ_PURPLETROOPA	; Object $7E - OBJ_BIGGREENHOPPER
	.word $0000					; Object $7F - OBJ_BIGPurplePIRANHA
	.word $0000 | OBJ_PURPLETROOPA	; Object $80 - OBJ_FLYINGGREENPARATROOPA
	.word $0000			; Object $81 - OBJ_HAMMERBRO
	.word $0000			; Object $82 - OBJ_NINJABRO
	.word $0000			; Object $83 - OBJ_LAKITU
	.word $0000					; Object $84 - OBJ_SPINYEGG
	.word $0000					; Object $85 - OBJ_BLUESPINY
	.word $0000			; Object $86 - OBJ_ICEBRO
	.word $0000			; Object $87 - OBJ_FIREBRO
	.word $0000					; Object $88 - OBJ_PIRATEBRO
	.word $0000					; Object $89 - OBJ_CHAINCHOMP
	.word $0000					; Object $8A - OBJ_THWOMP
	.word $0000					; Object $8B - OBJ_AngryTHWOMP

    .org ObjectGroup_PatTableSel
;****************************** OBJECT PALETTE/SIZE ******************************
	.byte OA1_PAL2 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $78 - OBJ_BULLETBILL
	.byte OA1_PAL2 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $79 - OBJ_BULLETBILLHOMING
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $7A - OBJ_PURPLETROOPA
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $7B - OBJ_BLUESHELL
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $7C - OBJ_HELPER
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $7D - OBJ_PARAZOMBIEGOOMBA
	.byte OA1_PAL2 | OA1_HEIGHT48 | OA1_WIDTH24	; Object $7E - OBJ_BIGGREENHOPPER
	.byte OA1_PAL1 | OA1_HEIGHT48 | OA1_WIDTH24	; Object $7F - OBJ_BIGPurplePIRANHA
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $80 - OBJ_FLYINGGREENPARATROOPA
	.byte OA1_PAL3 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $81 - OBJ_HAMMERBRO
	.byte OA1_PAL3 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $82 - OBJ_NINJABRO
	.byte OA1_PAL3 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $83 - OBJ_LAKITU
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $84 - OBJ_SPINYEGG
	.byte OA1_PAL2 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $85 - OBJ_BLUESPINY
	.byte OA1_PAL2 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $86 - OBJ_ICEBRO
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $87 - OBJ_FIREBRO
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $88 - OBJ_PIRATEBRO
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $89 - OBJ_CHAINCHOMP
	.byte OA1_PAL3 | OA1_HEIGHT32 | OA1_WIDTH48	; Object $8A - OBJ_THWOMP
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH48	; Object $8B - OBJ_AngryTHWOMP



    .org ObjectGroup_PatTableSel
;****************************** OBJECT PATTERN TABLE ******************************
	.byte OPTS_SETPT6 | $4F	; Object $78 - OBJ_BULLETBILL
	.byte OPTS_SETPT6 | $4F	; Object $79 - OBJ_BULLETBILLHOMING
	.byte OPTS_SETPT6 | $4F	; Object $7A - OBJ_PURPLETROOPA
	.byte OPTS_SETPT5 | $0B	; Object $7B - OBJ_BLUESHELL
	.byte OPTS_NOCHANGE	; Object $7C - OBJ_HELPER
	.byte OPTS_SETPT6 | $13	; Object $7D - OBJ_PARAZOMBIEGOOMBA
	.byte OPTS_SETPT5 | $3D	; Object $7E - OBJ_BIGGREENHOPPER
	.byte OPTS_SETPT5 | $3D	; Object $7F - OBJ_BIGPurplePIRANHA
	.byte OPTS_SETPT6 | $4F	; Object $80 - OBJ_FLYINGGREENPARATROOPA
	.byte OPTS_SETPT5 | $4E	; Object $81 - OBJ_HAMMERBRO
	.byte OPTS_SETPT5 | $4E	; Object $82 - OBJ_NINJABRO
	.byte OPTS_NOCHANGE	; Object $83 - OBJ_LAKITU
	.byte OPTS_SETPT5 | $0B	; Object $84 - OBJ_SPINYEGG
	.byte OPTS_SETPT5 | $0B	; Object $85 - OBJ_BLUESPINY
	.byte OPTS_SETPT5 | $4E	; Object $86 - OBJ_ICEBRO
	.byte OPTS_SETPT5 | $4E	; Object $87 - OBJ_FIREBRO
	.byte OPTS_SETPT5 | $4E	; Object $88 - OBJ_PIRATEBRO
	.byte OPTS_SETPT5 | $0E	; Object $89 - OBJ_CHAINCHOMP
	.byte OPTS_SETPT5 | $12	; Object $8A - OBJ_THWOMP
	.byte OPTS_SETPT5 | $12	; Object $8B - OBJ_AngryTHWOMP


	.org ObjectGroup_KillAction	
;****************************** OBJECT DEATH ROUTINE ******************************
	.byte KILLACT_POOFDEATH	; Object $78 - OBJ_BULLETBILL
	.byte KILLACT_POOFDEATH	; Object $79 - OBJ_BULLETBILLHOMING
	.byte KILLACT_POOFDEATH	; Object $7A - OBJ_PURPLETROOPA
	.byte KILLACT_JUSTDRAWMIRROR	; Object $7B - OBJ_BLUESHELL
	.byte KILLACT_JUSTDRAW16X16	; Object $7C - OBJ_HELPER
	.byte KILLACT_POOFDEATH		; Object $7D - OBJ_PARAZOMBIEGOOMBA
	.byte KILLACT_GIANTKILLED	; Object $7E - OBJ_BIGGREENHOPPER
	.byte KILLACT_POOFDEATH		; Object $7F - OBJ_BIGPurplePIRANHA
	.byte KILLACT_POOFDEATH	; Object $80 - OBJ_FLYINGGREENPARATROOPA
	.byte KILLACT_POOFDEATH	; Object $81 - OBJ_HAMMERBRO
	.byte KILLACT_POOFDEATH	; Object $82 - OBJ_NINJABRO
	.byte KILLACT_NORMALSTATE	; Object $83 - OBJ_LAKITU
	.byte KILLACT_POOFDEATH	; Object $84 - OBJ_SPINYEGG
	.byte KILLACT_JUSTDRAWMIRROR	; Object $85 - OBJ_BLUESPINY
	.byte KILLACT_POOFDEATH	; Object $86 - OBJ_ICEBRO
	.byte KILLACT_POOFDEATH	; Object $87 - OBJ_FIREBRO
	.byte KILLACT_POOFDEATH	; Object $88 - OBJ_PIRATEBRO
	.byte KILLACT_POOFDEATH	; Object $89 - OBJ_CHAINCHOMP
	.byte KILLACT_NORMALANDKILLED	; Object $8A - OBJ_THWOMP
	.byte KILLACT_NORMALANDKILLED	; Object $8B - OBJ_AngryTHWOMP



OG7_POff .func (\1 - ObjectGroup07_PatternSets)

	.org ObjectGroup_PatternStarts	; <-- help enforce this table *here*
;****************************** OBJECT FRAME TABLE ******************************
	.byte OG7_POff(ObjP78), OG7_POff(ObjP79), OG7_POff(ObjP7A), OG7_POff(ObjP7B)
	.byte OG7_POff(ObjP7C), OG7_POff(ObjP7D), OG7_POff(ObjP7E), OG7_POff(ObjP7F)
	.byte OG7_POff(ObjP80), OG7_POff(ObjP81), OG7_POff(ObjP82), OG7_POff(ObjP83)
	.byte OG7_POff(ObjP84), OG7_POff(ObjP85), OG7_POff(ObjP86), OG7_POff(ObjP87)
	.byte OG7_POff(ObjP88), OG7_POff(ObjP89), OG7_POff(ObjP8A), OG7_POff(ObjP8B)


	.org ObjectGroup_PatternSets	; <-- help enforce this table *here*
;****************************** OBJECT FRAMES DEFINITION ******************************    
ObjectGroup07_PatternSets:


ObjP78:
ObjP79:
	.byte $DD, $DF
	.byte $00, $00
	.byte $DD, $DF
	.byte $BD, $BF
	.byte $B9, $BB
	.byte $B5, $B7

ObjP7A:
	.byte $C3, $C5, $C7, $C9
	.byte $FD, $FD, $FD, $FD
	.byte $FD, $FD, $D1, $D1
	.byte $D3, $D5, $D5, $D3
	.byte $CB, $C5, $F9, $FB    


ObjP7B:
ObjP7C:
ObjP7E:
	.byte $A9, $A9
	.byte $AB, $AB
	.byte $BD, $BD, $9F, $41 
	.byte $9D, $9D, $9F, $41

ObjP7D:
	.byte $D9, $DB, $DB, $D9, $DB, $DB

ObjP7F:
	.byte $A1, $A3, $A5, $A7, $A9, $AB, $AD, $AF

ObjP80:
	.byte $C3, $C5, $C7, $C9
	.byte $FD, $FD, $FD, $FD
	.byte $FD, $FD, $D1, $D1
	.byte $D3, $D5, $D5, $D3
	.byte $CB, $C5, $F9, $FB

ObjP81:
	.byte $B1, $B3, $B5, $B7, $B1, $B3, $A5, $A7
	.byte $AD, $AF, $B5, $B7, $AD, $AF, $A5, $A7

ObjP82:
	.byte $95, $97, $A1, $A3, $95, $97, $B9, $BB
	.byte $99, $9B, $A1, $A3, $99, $9B, $B9, $BB


ObjP83:
	.byte $9F, $41, $BD, $BD
	.byte $9F, $41, $9D, $9D

ObjP84:
ObjP85:
	.byte $99, $99, $BB, $BB, $81, $83

ObjP86:
ObjP87:
	.byte $81, $83, $B5, $B7, $81, $83, $A5, $A7
	.byte $85, $87, $B5, $B7, $85, $87, $A5, $A7

ObjP88:
	.byte $8D, $8F, $B5, $B7, $8D, $8F, $A5, $A7
	.byte $91, $93, $B5, $B7, $91, $93, $A5, $A7

ObjP89:
	.byte $91, $93, $9D, $9F, $9D, $9F

ObjP8A:
ObjP8B:
	.byte $9D, $9F, $BD, $BF, $91, $93, $B1, $B3,  $91, $93, $B1, $B3


BulletBill_Frame:
	.byte $00, $00, $03, $04, $04, $03, $05, $05

BulletBill_Orientation:
	.byte $00, SPR_HFLIP, $00, $00, SPR_HFLIP, SPR_VFLIP, $00, SPR_HFLIP

ObjInit_BulletBill:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #(ATTR_FIREPROOF | ATTR_ICEPROOF)
	STA Objects_WeaponAttr, X

	LDA #(ATTR_STOMPKICKSOUND)
	STA Objects_BehaviorAttr, X

	LDA #$02
	STA Objects_Frame, X

	RTS

ObjNorm_BulletBill:
	LDA <Player_HaltGameZ
	BEQ BulletBill_Norm
	JMP Bullet_Draw	 ; If gameplay is halted, jump to PRG004_B1C2

BulletBill_Norm:
	JSR Object_DeleteOffScreen	; Delete object if it falls off-screen
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat	 	; Player to Bullet Bill collision
	JSR Object_DetectTiles
	JSR Object_CheckForeground
	JSR Object_ApplyXVel	 	
	JSR Object_ApplyYVel_NoGravity

	JMP Bullet_Animate    


ObjInit_MissileMark:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #(ATTR_FIREPROOF | ATTR_ICEPROOF)
	STA Objects_WeaponAttr, X

	LDA Sound_QLevel1
	ORA #SND_LEVELBABOOM
	STA Sound_QLevel1

	LDA #$03
	STA Objects_ExpPoints, X
	RTS

Missile_Flash = Objects_Data5
Missile_HomingDisabled = Objects_Data3

ObjNorm_MissileMark:
	LDA <Player_HaltGameZ
	BEQ MissileMark_Norm
	JMP Bullet_Draw	 ; If gameplay is halted, jump to PRG004_B1C2

MissileMark_Norm:
	JSR Object_DeleteOffScreen	; Delete object if it falls off-screen

	LDA Objects_PlayerProjHit, X
	AND #HIT_ICEBALL
	STA Missile_HomingDisabled, X

	LDA Objects_PlayerProjHit, X
	AND #HIT_FIREBALL
	BEQ MissieMark_NotHit

	JSR Object_Explode

MissieMark_NotHit:

	LDA Objects_Timer, X
	BEQ ObjNorm_MissileMarkA
	
	LDA Objects_Timer, X
	
	LDA #$18
	STA ChaseVel_LimitHi, X

	LDA #$E8
	STA ChaseVel_LimitLo, X

	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat
	JSR Object_DetectTiles
	JSR Object_CheckForeground
	JSR Object_ApplyXVel
	JSR Object_ApplyYVel_NoGravity
	JMP Bullet_Animate
	 
ObjNorm_MissileMarkA:
	LDA Missile_HomingDisabled, X
	BEQ ObjNorm_MissileMarkC

	JSR Object_ApplyXVel
	JSR Object_ApplyYVel_NoGravity
	JMP ObjNorm_MissileMarkA1

ObjNorm_MissileMarkC:
	INC Missile_Flash, X

	LDA Missile_Flash, X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_SpriteAttributes,X

	JSR Object_ChasePlayer

ObjNorm_MissileMarkA1:
	JSR Object_CalcBoundBox
	JSR Object_InteractWithPlayer
	JSR Object_DetectTiles
	
	LDA <Objects_TilesDetectZ, X
	BEQ Bullet_Animate

	LDA #$01
	STA Explosion_Timer, X

Bullet_Animate:
	LDY #$00
	
	LDA <Objects_YVelZ, X
	BNE Bullet_AnimateVertical

	LDA <Objects_XVelZ, X
	BMI Bullet_FrameOrientation
	
	INY
	BNE Bullet_FrameOrientation

Bullet_AnimateVertical:
	LDA #$4C
	STA PatTable_BankSel + 4

	LDY #$02
	
	LDA <Objects_YVelZ, X
	BMI Bullet_AnimateVerticalAngle
	
	LDY #$05

Bullet_AnimateVerticalAngle:
	LDA <Objects_XVelZ, X
	BEQ Bullet_FrameOrientation

	INY
	LDA <Objects_XVelZ, X
	BMI Bullet_FrameOrientation

	INY

Bullet_FrameOrientation:
	LDA BulletBill_Frame, Y
	STA Objects_Frame, X

	LDA BulletBill_Orientation, Y
	STA Objects_Orientation, X

Bullet_Draw:
	JMP Object_Draw    


ObjInit_PurpleTroopa:
	LDA #$05
	STA Objects_SpritesRequested, X

	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #(ATTR_WINDAFFECTS | ATTR_HASSHELL | ATTR_CARRYANDBUMP)
	STA Objects_BehaviorAttr, X

	JSR Object_CalcBoundBox
	JSR Object_MoveTowardsPlayer
	LDA <Objects_YZ, X
	ADD #$10
	STA <Objects_YZ, X

	LDA <Objects_YHiZ, X
	ADC #$00
	STA <Objects_YHiZ, X

	LDA #$01
	STA Objects_Health, X

	LDA #$02
	STA Objects_ExpPoints, X
	RTS


PurpleKoopa_CurrentFrame = Objects_Data1
PurpleTroopa_FrameOffset = Objects_Data2

ObjNorm_PurpleTroopa:
	LDA <Player_HaltGameZ
	BEQ PurpleTroopa_Norm
	JMP PurpleTroopa_Draw

PurpleTroopa_Norm:
	JSR Object_DeleteOffScreen
	JSR Object_Move
	JSR Object_FaceDirectionMoving
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat
	JSR Object_InteractWithObjects
	BCS PurpleTroopa_Animate

	JSR Object_DetectTiles
	JSR Object_InteractWithTiles
	JSR Object_EdgeMarch

PurpleTroopa_Animate:
	INC PurpleKoopa_CurrentFrame, X
	
	LDA PurpleKoopa_CurrentFrame, X
	LSR A
	LSR A
	LSR A
	AND #$01
	TAY	

	LDA Troopa_Frames, Y
	STA Objects_Frame,X

	LDA Troopa_YOffset, Y
	STA PurpleTroopa_FrameOffset, X
	

PurpleTroopa_Draw:
	LDA <Objects_YZ, X
	SUB PurpleTroopa_FrameOffset, X	
	STA <Objects_YZ, X

	JSR Object_Draw16x32

	LDA <Objects_YZ, X
	ADD PurpleTroopa_FrameOffset, X	
	STA <Objects_YZ, X

	LDY Object_SpriteRAMOffset, X

	LDA #$C1
	STA Sprite_RAMTile + 16, Y

	LDA Objects_Orientation, X
	AND #SPR_HFLIP
	BNE PurpleTroopa_ColorFixFlip

	LDA Sprite_RAMX, Y
	STA Sprite_RAMX + 16, Y

	LDA Sprite_RAMY, Y
	SUB #$10
	STA Sprite_RAMY + 16, Y

	LDA Sprite_RAMAttr, Y
	ORA #SPR_PAL3
	STA Sprite_RAMAttr, Y
	STA Sprite_RAMAttr+8, Y
	STA Sprite_RAMAttr+12, Y
	STA Sprite_RAMAttr+16, Y
	RTS
	
PurpleTroopa_ColorFixFlip:	
	LDA Sprite_RAMY + 4, Y
	SUB #$10
	STA Sprite_RAMY + 16, Y

	LDA Sprite_RAMX + 4, Y
	STA Sprite_RAMX + 16, Y

	LDA Sprite_RAMAttr + 4, Y
	ORA #SPR_PAL3
	STA Sprite_RAMAttr + 4, Y
	STA Sprite_RAMAttr+8, Y
	STA Sprite_RAMAttr+12, Y
	STA Sprite_RAMAttr+16, Y
	RTS

ObjInit_Larry:
	LDA #$07
	STA Objects_SpritesRequested, X

	LDA #BOUND16x32
	STA Objects_BoundBox, X

	JSR Object_NoInteractions

	LDA #$20
	STA ChaseVel_LimitHi, X

	LDA #$E0
	STA ChaseVel_LimitLo, X

	JSR Object_CalcBoundBox

	LDA #$FF
	STA Larry_ItemSlot, X 

	LDA #$01
	STA Objects_Global, X

	LDA #$0B
	STA PatTable_BankSel + 4
	RTS		 ; Return

Larry_Frame = Objects_Data1
Larry_Action = Objects_Data2
Larry_BodyOffset = Objects_Data3
Larry_ItemSlot = Objects_Data4
Larry_ItemOffset = Objects_Data5

ObjNorm_Larry:
	LDA <Player_HaltGameZ
	BEQ Larry_DoAction

	JMP Larry_Draw

Larry_DoAction:
	LDA Larry_Action, X
	JSR DynJump

	.word Larry_InBag
	.word Larry_WaitOffScreen
	.word Larry_FindPlayer
	.word Larry_ThrowItem
	.word Larry_FleePlayer

Larry_ItemToss:
	.byte POWERUP_FIREFLOWER, POWERUP_NINJASHROOM, POWERUP_SHELL, POWERUP_FROGSUIT, POWERUP_PWING

Larry_SuitHelp:
	.byte $02, $0B, $05, $04, $03

Larry_InBag:
	JSR Object_CalcBoundBox
	JSR Object_InteractWithPlayer

	INC Larry_Frame, X

	LDA Larry_Frame, X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame, X
	
	JMP Larry_Draw

Larry_RemoveBag:
	LDA <Objects_XZ, X
	STA <Poof_X

	LDA <Objects_YZ, X
	STA <Poof_Y

	LDA <Objects_YHiZ, X
	STA <Poof_YHi
	
	JSR Common_MakePoof

	LDA #$01
	STA Objects_Frame, X

	LDA #SPR_PAL1
	STA Objects_SpriteAttributes, X

	LDA <Objects_YZ, X
	SUB #$10
	STA <Objects_YZ, X

	LDA <Objects_YHiZ, X
	SBC #$00
	STA <Objects_YHiZ, X

	LDA #$00
	STA Objects_SlowTimer, X

	
	LDA #$02
	STA Larry_Action, X


	JSR Larry_Prepare
	RTS

Larry_WaitOffScreen:
	LDY Objects_Property, X

	LDA Player_EffectiveSuit
	CMP Larry_SuitHelp, Y
	BNE Larry_Prepare

	LDA <Player_X
	STA <Objects_XZ, X

	LDA <Player_XHi
	STA <Objects_XHiZ, X

	LDA <Vert_Scroll
	SUB #$20
	STA <Objects_YZ, X

	LDA <Vert_Scroll_Hi
	SBC #$00
	STA <Objects_YHiZ, X

	RTS

Larry_Prepare:
	LDA Objects_Property, X
	TAY

	LDA Larry_ItemToss, Y
	STA <Temp_Var1

	JSR Check_ExistingPowerUps
	BCS Larry_WaitOffScreenRTS

	LDY #$05

Larry_FindSlot:
	
	LDA Objects_State,Y
	BEQ Larry_ItemSlotFound

	INY
	CPY #$08
	BNE Larry_FindSlot
	RTS

Larry_ItemSlotFound:
	TYA
	STA Larry_ItemSlot, X

	LDA #OBJ_POWERUP
	STA Objects_ID, Y	

	LDA <Temp_Var1
	STA PowerUp_Type, Y

	LDA #OBJSTATE_NONE
	STA Objects_State, Y

	LDA #$02
	STA Larry_Action, X

	LDA #$02
	STA Objects_Frame, X
	JMP Larry_Draw

Larry_WaitOffScreenRTS:
	RTS

Larry_FindPlayer:
	JSR Object_ChasePlayer
	JSR Object_CalcBoundBox
	JSR Object_InteractWithPlayer
	
	JMP Larry_Draw

Larry_InteractWithPlayer:
	LDA Larry_Action, X
	BNE Larry_ThrowItem

	JMP Larry_RemoveBag

Larry_ThrowItem:
	LDA <Objects_XZ, X
	ADD #$08
	STA Tile_DetectionX

	LDA <Objects_XHiZ, X
	STA Tile_DetectionXHi

	LDA <Objects_YZ, X
	SUB #$08
	STA Tile_DetectionY

	LDA <Objects_YHiZ, X
	SBC #$00
	STA Tile_DetectionYHi

	JSR Object_DetectTile

	LDA Tile_LastProp
	CMP #TILE_PROP_SOLID_ALL
	BCS Larry_ThrowItemDone

	LDY Larry_ItemSlot, X
	LDA #OBJSTATE_FRESH
	STA Objects_State, Y

	LDA <Objects_XZ, X
	STA Objects_XZ, Y

	LDA <Objects_XHiZ, X
	STA Objects_XHiZ, Y

	LDA <Objects_YZ, X
	SUB #$10
	STA Objects_YZ, Y

	LDA <Objects_YHiZ, X
	SBC #$00
	STA Objects_YHiZ, Y

	LDA #$00
	STA Objects_YVelZ, Y

	LDA <Objects_XVelZ, X
	STA Objects_XVelZ, Y

	INC Larry_Action, X

	LDA #$FF
	STA Larry_ItemSlot, X

	LDA #$01
	STA Objects_Frame, X

Larry_ThrowItemDone:
	JMP Larry_Draw

Larry_FleePlayer:
	JSR Object_FleePlayer
	JSR Object_CalcBoundBox
	JSR Object_XDistanceFromPlayer
	
	LDA <XDiff
	CMP #$C0
	BCC Larry_FleeDraw

	LDA #$01
	STA Larry_Action, X

Larry_FleeDraw:
	JMP Larry_Draw

Larry_Draw:
	LDA Larry_Action, X
	BNE Larry_DrawFull

	JMP Object_DrawMirrored

Larry_DrawFull:
	JSR Object_Draw16x32Mirrored

	LDY Object_SpriteRAMOffset, X

	LDA Sprite_RAMX + 8, Y
	ADD #$04
	STA Sprite_RAMX + 8, Y

	LDA Sprite_RAMX + 12, Y
	ADD #$04
	STA Sprite_RAMX + 12, Y
	
	LDA Sprite_RAMX, Y
	SUB #$04
	STA Sprite_RAMX + 16, Y
	
	LDA Sprite_RAMAttr, Y
	STA Sprite_RAMAttr + 16, Y

	LDA #$41
	STA Sprite_RAMTile + 16, Y

	LDA Sprite_RAMY + 8, Y
	STA Sprite_RAMY + 16, Y
	
	LDA Larry_ItemSlot, X
	BMI Larry_DrawDone

	JSR Larry_DrawItem

Larry_DrawDone:
	RTS

Larry_ItemFrameLeftAttr:
	.byte SPR_PAL2, SPR_PAL1, SPR_PAL2, SPR_PAL2, SPR_PAL3

Larry_ItemFrameRightAttr:
	.byte SPR_PAL2, SPR_PAL1, SPR_PAL2, SPR_PAL2, SPR_PAL3

Larry_ItemPattern:
	.byte $04, $20, $10, $0C, $2C

Larry_DrawItem:
	
	LDA #$0E
	STA <Temp_Var1

	LDA Objects_Property, X
	TAX
	
	LDA Larry_ItemPattern,X
	STA SprAnimOffset

	LDA Sprite_RAMY, Y
	CMP #$F8
	BEQ Larry_Item1

	SUB <Temp_Var1
	STA Sprite_RAMY + 20, Y

Larry_Item1:
	STA <Temp_Var3

	LDA #$51
	STA Sprite_RAMTile + 20, Y

	LDA Larry_ItemFrameLeftAttr, X
	STA Sprite_RAMAttr + 20, Y

	LDA Sprite_RAMX, Y
	STA Sprite_RAMX + 20, Y
	ADD #$08
	STA <Temp_Var2

	LDX <CurrentObjectIndexZ
	LDA Objects_Property, X
	TAX

	LDA <Temp_Var3
	CMP #$F8
	BEQ Larry_DrawItemDone

	STA Sprite_RAMY + 24, Y

	LDA #$53
	STA Sprite_RAMTile + 24, Y

	LDA Larry_ItemFrameRightAttr, X
	STA Sprite_RAMAttr + 24, Y

	LDA <Temp_Var2
	STA Sprite_RAMX + 24, Y

Larry_DrawItemDone:
	RTS


ObjInit_ParaZombieGoomba:
	
	RTS

ObjNorm_ParaZombieGoomba:
	RTS		 ; Return


HammerBro_JumpYVel:	.byte -$60, -$30
HammerBro_JumpWait: .byte $C0, $FF
HammerBro_WaitTimers: .byte $18, $18, $60, $18
HammerBro_CanFallThrough: .byte $00, $30

HammerBro_Frame = Objects_Data1
HammerBro_Action = Objects_Data2
HammerBro_RangeLeft = Objects_Data3
HammerBro_RangeRight = Objects_Data4
HammerBro_ThrowHammerTimer = Objects_Data5
HammerBro_HoldHammerTimer = Objects_Data6
HammerBro_WalkDirection = Objects_Data7
HammerBro_FallThrough = Objects_Data8


HammerBro_ThrowTimes:
	.byte $18, $18, $18, $30

ObjInit_HammerBro:
	LDA #$06
	STA Objects_SpritesRequested, X

	LDA #BOUND16x24
	STA Objects_BoundBox, X

	JSR Object_CalcBoundBox
	JSR Object_MoveTowardsPlayer

	LDA <Objects_XVelZ, X
	STA HammerBro_WalkDirection, X

	LDA <Objects_XZ, X
	SUB #$10
	STA HammerBro_RangeLeft, X

	LDA <Objects_XZ, X
	ADD #$10
	STA HammerBro_RangeRight, X

	LDA #$02
	STA Objects_Health, X
	RTS		 ; Return
	
ObjNorm_HammerBro:
	LDA <Player_HaltGameZ
	BEQ HammerBro_Norm

	JMP HammerBros_Draw

HammerBro_Norm:

	JSR Object_DeleteOffScreen	 ; Delete object if it falls off-screen

	LDA HammerBro_WalkDirection, X
	STA <Objects_XVelZ, X

	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_DetectTiles
	
	LDA HammerBro_FallThrough, X
	BEQ HammerBro_DetectTiles

	DEC HammerBro_FallThrough, X
	JMP HammerBro_SkipTiles

HammerBro_DetectTiles:
	LDA <Objects_TilesDetectZ, X
	AND #~HIT_CEILING
	STA <Objects_TilesDetectZ, X

	JSR Object_InteractWithTiles

HammerBro_SkipTiles:
	JSR Object_FacePlayer
	JSR Object_AttackOrDefeat

	LDA HammerBro_HoldHammerTimer, X
	BEQ HammerBro_HotHolding

	DEC HammerBro_HoldHammerTimer, X
	BNE HammerBro_CheckJump

	LDA RandomN + 1, X
	AND #$03
	TAY 
	LDA HammerBro_WaitTimers, Y
	STA HammerBro_ThrowHammerTimer, X
	JSR HammerBro_ThrowHammer
	
HammerBro_HotHolding:
	LDA HammerBro_ThrowHammerTimer, X
	BNE HammerBro_DecHamTimer

	LDA #$18
	STA HammerBro_HoldHammerTimer, X
	BNE HammerBro_CheckJump

HammerBro_DecHamTimer:
	DEC HammerBro_ThrowHammerTimer, X

HammerBro_CheckJump:
	LDA Objects_Timer, X
	BNE HammerBro_NoJump

	JSR Bro_CheckTop

HammerBro_DoJump:
	LDA HammerBro_JumpYVel, Y
	STA <Objects_YVelZ, X

	LDA HammerBro_CanFallThrough, Y
	STA HammerBro_FallThrough, X

	LDA RandomN, X
	AND #$10
	LSR A
	LSR A
	LSR A
	LSR A
	TAY

	LDA HammerBro_JumpWait, Y
	STA Objects_Timer, X


HammerBro_NoJump:

	LDA <Objects_XZ, X
	CMP HammerBro_RangeLeft, X
	BEQ HammerBro_TurnAround

	CMP HammerBro_RangeRight, X
	BNE HammerBro_Animate

HammerBro_TurnAround:
	LDA HammerBro_WalkDirection, X
	EOR #$FF
	ADD #$01
	STA HammerBro_WalkDirection, X

HammerBro_Animate:
	LDA <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ HammerBros_NoAnimate

	INC HammerBro_Frame, X

HammerBros_NoAnimate:
	LDA #$00
	STA <Temp_Var2

	LDA HammerBro_Frame, X
	LSR A
	LSR A
	LSR A
	LSR A
	AND #$01
	STA <Temp_Var1

	LDA HammerBro_HoldHammerTimer, X
	BEQ HammerBros_FinishAnimate

	LDA #$02
	STA <Temp_Var2

HammerBros_FinishAnimate:

	LDA <Temp_Var1
	ORA <Temp_Var2
	STA Objects_Frame, X

HammerBros_Draw:
	LDA Object_SpriteRAMOffset, X
	ADD #$08
	STA Object_SpriteRAMOffset, X

	JSR Object_Draw16x32

	LDA HammerBro_HoldHammerTimer, X
	BEQ HammerBros_Done

	JSR HammerBro_DrawHammer

	LDA Object_SpriteRAMOffset, X
	SUB #$08
	STA Object_SpriteRAMOffset, X

HammerBros_Done:
	RTS

Hammer_XVel:	.byte -$12, $12

HammerXOffset:
	.byte $08, $F8
	.byte $00, $FF

HammerTiles:
	.byte $89, $8B, $8B, $89

HammerFlip:
	.byte SPR_PAL3 | $00, SPR_PAL3 | SPR_HFLIP

HammerBro_DrawHammer:

	LDY #$00
	LDA Objects_Orientation, X
	AND #SPR_HFLIP
	BEQ HammerBro_LeftSide

	INY

HammerBro_LeftSide:
	LDA HammerXOffset, Y
	STA <Temp_Var1

	LDA HammerTiles, Y
	STA <Temp_Var2

	LDA HammerTiles + 2, Y
	STA <Temp_Var3

	LDA HammerFlip, Y
	STA <Temp_Var4

	LDY Object_SpriteRAMOffset, X

	LDA Sprite_RAMX, Y
	ADD <Temp_Var1
	STA Sprite_RAMX - 8, Y
	ADD #$08
	STA Sprite_RAMX - 4, Y

	LDA Sprite_RAMY, Y
	SUB #$06
	STA Sprite_RAMY - 8, Y
	STA Sprite_RAMY - 4, Y

	LDA <Temp_Var2
	STA Sprite_RAMTile - 8, Y

	LDA <Temp_Var3
	STA Sprite_RAMTile - 4, Y

	LDA <Temp_Var4
	STA Sprite_RAMAttr - 8, Y
	STA Sprite_RAMAttr - 4, Y

	RTS		 ; Return

HammerBro_ThrowHammer:
	LDA Objects_SpritesHorizontallyOffScreen,X
	ORA Objects_SpritesVerticallyOffScreen,X
	BNE HammerBro_ThrowDone

	LDY #$00
	LDA Objects_Orientation, X
	AND #SPR_HFLIP
	BEQ HammerBro_ThrowToRight

	INY

HammerBro_ThrowToRight:
	
	LDA HammerXOffset, Y
	ADD <Objects_XZ, X
	STA <Temp_Var14

	LDA <Objects_XHiZ, X
	ADC HammerXOffset + 2, Y
	STA <Temp_Var15
	
	LDA Hammer_XVel, Y
	STA <Temp_Var16

	JSR Object_PrepProjectile
	BCC HammerBro_ThrowDone

	LDA #SOBJ_HAMMER
	STA SpecialObj_ID, Y

	LDA <Temp_Var16
	STA SpecialObj_XVel, Y

	LDA #$C0
	STA SpecialObj_YVel, Y

	LDA <Temp_Var14
	STA SpecialObj_X, Y

	LDA <Temp_Var15
	STA SpecialObj_XHi, Y

	LDA <Objects_YZ, X
	SUB #$06
	STA SpecialObj_Y, Y

	LDA <Objects_YHiZ, X
	SBC #$00
	STA SpecialObj_YHi, Y

HammerBro_ThrowDone:
	RTS    


NinjaBro_JumpYVel:	.byte -$60, -$30
NinjaBro_JumpWait: .byte $C0, $FF
NinjaBro_WaitTimers: .byte $30, $48, $18, $60
NinjaBro_CanFallThrough: .byte $00, $30

NinjaBro_Frame = Objects_Data1
NinjaBro_Action = Objects_Data2
NinjaBro_RangeLeft = Objects_Data3
NinjaBro_RangeRight = Objects_Data4
NinjaBro_ThrowStarTimer = Objects_Data5
NinjaBro_HoldStarTimer = Objects_Data6
NinjaBro_WalkDirection = Objects_Data7
NinjaBro_FallThrough = Objects_Data8
NinjaBro_WalkDirectionBackup = Objects_Data9

ObjInit_NinjaBro:
	LDA #$06
	STA Objects_SpritesRequested, X

	LDA #$02
	STA Objects_Health, X

	LDA #BOUND16x24
	STA Objects_BoundBox, X

	JSR Object_CalcBoundBox
	JSR Object_MoveTowardsPlayer

	LDA <Objects_XVelZ, X
	STA NinjaBro_WalkDirection, X

	LDA <Objects_XZ, X
	SUB #$10
	STA NinjaBro_RangeLeft, X

	LDA <Objects_XZ, X
	ADD #$10 
	STA NinjaBro_RangeRight, X

	LDA #$20
	STA NinjaBro_ThrowStarTimer, X

	LDA #$40
	STA Objects_Timer, X
	RTS		 ; Return
	
ObjNorm_NinjaBro:
	LDA <Player_HaltGameZ
	BEQ NinjaBro_Norm

	LDA Objects_State, X
	CMP #OBJSTATE_FROZEN
	BEQ NinjaBros_HaltDraw

	LDA <Objects_TilesDetectZ,X
	AND #HIT_GROUND
	BEQ NinjaBro_HaltNoDraw

NinjaBros_HaltDraw:
	JMP NinjaBros_Draw

NinjaBro_HaltNoDraw:
	RTS

NinjaBro_Norm:

	JSR Object_DeleteOffScreen	 ; Delete object if it falls off-screen

	LDA NinjaBro_WalkDirection, X
	STA <Objects_XVelZ, X

	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_DetectTiles
	
	LDA NinjaBro_FallThrough, X
	BEQ NinjaBro_DetectTiles

	DEC NinjaBro_FallThrough, X
	JMP NinjaBro_Done

NinjaBro_DetectTiles:
	LDA <Objects_TilesDetectZ, X
	AND #~HIT_CEILING
	STA <Objects_TilesDetectZ, X

	JSR Object_InteractWithTiles

NinjaBro_SkipTiles:
	LDA <Objects_TilesDetectZ,X
	AND #HIT_GROUND
	BNE NinjaBro_OnGround

NinjaBro_Done:
	RTS

NinjaBro_OnGround:
	LDA Objects_PreviousTilesDetect, X
	AND #HIT_GROUND
	BNE NinjaBro_BeenOnGround

	LDA <Objects_YVelZ, X
	BNE NinjaBro_BeenOnGround

	JSR NinjaBro_MakePoof

	LDA NinjaBro_WalkDirectionBackup, X
	BEQ NinjaBro_BeenOnGround

	STA NinjaBro_WalkDirection, X

NinjaBro_BeenOnGround:
	JSR Object_FacePlayer
	JSR Object_AttackOrDefeat

	LDA NinjaBro_HoldStarTimer, X
	BEQ NinjaBro_HotHolding

	DEC NinjaBro_HoldStarTimer, X
	BNE NinjaBro_CheckJump

	LDA RandomN + 1, X
	AND #$03
	TAY 
	
	LDA Objects_Property, X
	BEQ NinjaBrow_StarWait

	LDA #$10
	BEQ NinjaBrow_StarWait1

NinjaBrow_StarWait:
	LDA NinjaBro_WaitTimers, Y

NinjaBrow_StarWait1:
	STA NinjaBro_ThrowStarTimer, X
	JSR NinjaBro_ThrowStar
	
NinjaBro_HotHolding:
	LDA NinjaBro_ThrowStarTimer, X
	BNE NinjaBro_DecHamTimer

	LDA #$18
	STA NinjaBro_HoldStarTimer, X
	BNE NinjaBro_CheckJump

NinjaBro_DecHamTimer:
	DEC NinjaBro_ThrowStarTimer, X

NinjaBro_CheckJump:
	LDA Objects_Timer, X
	BNE NinjaBro_NoJump
	LDA Objects_Property, X
	BNE NinjaBro_NoJump

	JSR Bro_CheckTop

NinjaBro_DoJump:
	LDA NinjaBro_JumpYVel, Y
	STA <Objects_YVelZ, X

	LDA NinjaBro_CanFallThrough, Y
	STA NinjaBro_FallThrough, X

	LDA RandomN, X
	AND #$10
	LSR A
	LSR A
	LSR A
	LSR A
	TAY

	LDA NinjaBro_JumpWait, Y
	STA Objects_Timer, X

	JSR NinjaBro_MakePoof

	LDA NinjaBro_WalkDirection, X
	STA NinjaBro_WalkDirectionBackup, X

	LDA #$00
	STA NinjaBro_WalkDirection, X

NinjaBro_NoJump:
	LDA <Objects_XZ, X
	CMP NinjaBro_RangeLeft, X
	BEQ NinjaBro_TurnAround

	CMP NinjaBro_RangeRight, X
	BNE NinjaBro_Animate

NinjaBro_TurnAround:
	LDA NinjaBro_WalkDirection, X
	EOR #$FF
	ADD #$01
	STA NinjaBro_WalkDirection, X

NinjaBro_Animate:
	LDA <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ NinjaBros_NoAnimate

	INC NinjaBro_Frame, X

NinjaBros_NoAnimate:
	LDA #$00
	STA <Temp_Var2

	LDA NinjaBro_Frame, X
	LSR A
	LSR A
	LSR A
	LSR A
	AND #$01
	STA <Temp_Var1

	LDA NinjaBro_HoldStarTimer, X
	BEQ NinjaBros_FinishAnimate

	LDA #$02
	STA <Temp_Var2

NinjaBros_FinishAnimate:

	LDA <Temp_Var1
	ORA <Temp_Var2
	STA Objects_Frame, X

NinjaBros_Draw:
	LDA Object_SpriteRAMOffset, X
	ADD #$08
	STA Object_SpriteRAMOffset, X

	JSR Object_Draw16x32

	LDA NinjaBro_HoldStarTimer, X
	BEQ NinjaBros_DrawDone

	JSR NinjaBro_DrawStar

NinjaBros_DrawDone:
	LDA Object_SpriteRAMOffset, X
	SUB #$08
	STA Object_SpriteRAMOffset, X

NinjaBros_Done:
	RTS

NinjaBro_MakePoof:
	LDA Objects_SpritesHorizontallyOffScreen,X
	ORA Objects_SpritesVerticallyOffScreen,X
	BNE NinjaBro_PoofDone

	LDA <Objects_XZ, X
	STA <Poof_X

	LDA <Objects_YZ, X
	ADD #$08
	STA <Poof_Y

	LDA <Objects_YHiZ, X
	STA <Poof_YHi

	JSR Common_MakePoof

NinjaBro_PoofDone:
	RTS
Ninja_XVel:	.byte -$12, $12

NinjaXOffset:
	.byte $08, $F8
	.byte $00, $FF

NinjaTiles:
	.byte $89, $8B, $8B, $89

NinjaFlip:
	.byte SPR_PAL3 | $00, SPR_PAL3 | SPR_HFLIP

NinjaBro_DrawStar:

	LDY #$00
	LDA Objects_Orientation, X
	AND #(SPR_HFLIP)
	BEQ NinjaBro_LeftSide

	INY

NinjaBro_LeftSide:
	LDA NinjaXOffset, Y
	STA <Temp_Var1

	LDY Object_SpriteRAMOffset, X

	LDA Sprite_RAMX, Y
	ADD <Temp_Var1
	STA Sprite_RAMX - 8, Y

	ADD #$08
	STA Sprite_RAMX - 4, Y

	LDA Sprite_RAMY, Y
	SUB #$06
	STA Sprite_RAMY - 8, Y

	LDA Sprite_RAMY + 4, Y
	SUB #$06
	STA Sprite_RAMY - 4, Y

	LDA #$A9
	STA Sprite_RAMTile - 8, Y
	STA Sprite_RAMTile - 4, Y

	LDA Sprite_RAMAttr, Y
	AND #SPR_BEHINDBG
	ORA #SPR_PAL3
	STA Sprite_RAMAttr - 8, Y

	EOR #(SPR_VFLIP | SPR_HFLIP)
	STA Sprite_RAMAttr - 4, Y

	RTS		 ; Return

NinjaBro_ThrowStar:
	LDA Objects_SpritesHorizontallyOffScreen,X
	ORA Objects_SpritesVerticallyOffScreen,X
	BEQ NinjaBro_ThrowStarDo
	RTS

NinjaBro_ThrowStarDo:
	LDY #$00
	LDA Objects_Orientation, X
	AND #SPR_HFLIP
	BEQ NinjaBro_ThrowLeft

	INY

NinjaBro_ThrowLeft:
	LDA NinjaXOffset, Y
	STA <Temp_Var1

	LDA NinjaXOffset + 2, Y
	STA <Temp_Var2

	JSR Object_PrepProjectile	

	LDA #SOBJ_NINJASTAR
	STA SpecialObj_ID,Y

	LDA <Objects_XZ, X
	ADD <Temp_Var1
	STA SpecialObj_X, Y

	LDA <Objects_XHiZ, X
	ADC <Temp_Var2
	STA SpecialObj_XHi, Y

	LDA <Objects_YZ, X
	SUB #$06
	STA SpecialObj_Y, Y

	LDA <Objects_YHiZ, X
	SBC #$00
	STA SpecialObj_YHi, Y

	JSR Object_AimProjectile

	LDA SpecialObj_XVel, Y
	JSR Double_Value
	STA SpecialObj_XVel, Y

	LDA SpecialObj_YVel, Y
	JSR Double_Value
	STA SpecialObj_YVel, Y
	
NinjaBro_ThrowDone:
	RTS

Bro_CheckTop:
	LDA Objects_BoundBottom, X
	ADD #$14
	STA Tile_DetectionY

	LDA Objects_BoundBottomHi, X
	ADC #$00
	STA Tile_DetectionYHi

	LDA <Objects_XZ, X
	ADD #$07
	STA Tile_DetectionX

	LDA <Objects_XHiZ, X
	ADC #$00
	STA Tile_DetectionXHi

	JSR Object_DetectTile
	
	LDY #$00
	CMP #TILE_PROP_SOLID_ALL
	BCS Bro_NotTop

	LDA Objects_SpriteY, X

	CMP #$30
	BCS Bro_NotTop
 
	INY
	BNE Bro_RTS

Bro_NotTop:
	CMP #$70
	BCS Bro_RTS

	LDA RandomN, X
	AND #$08
	LSR A
	LSR A
	LSR A
	TAY
Bro_RTS:
	RTS    

Lakitu_GraphicsTables:
	.byte $0B, $0B, $0B, $1A

ObjInit_Lakitu:
	LDA #$07
	STA Objects_SpritesRequested, X
	
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	STX <Temp_Var1

	LDY #$04

Lakitu_CheckSame:
	CPY <Temp_Var1
	BEQ Lakitu_CheckNextSlot

	LDA Objects_ID, Y
	CMP #OBJ_LAKITU
	BNE Lakitu_CheckNextSlot

	JMP Object_Delete

Lakitu_CheckNextSlot:
	DEY
	BPL Lakitu_CheckSame
	
	LDY Objects_Property, X
	LDA Lakitu_GraphicsTables, Y
	STA PatTable_BankSel + 4

	LDA #$20
	STA ChaseVel_LimitHi, X

	LDA #$E0
	STA ChaseVel_LimitLo, X

	LDA #(ATTR_NOICE)
	STA Objects_BehaviorAttr, X

	JSR Object_CalcBoundBox

	LDA #$FF
	STA Lakitu_EnemySlot, X 
	RTS		 ; Return


Lakitu_Frame = Objects_Data1
Lakitu_Action = Objects_Data2
Lakitu_BodyOffset = Objects_Data3
Lakitu_EnemySlot = Objects_Data4
Lakitu_EnemyOffset = Objects_Data5
Lakitu_MadePoof = Objects_Data6
Lakitu_SleepTime = Objects_Data7

ObjNorm_Lakitu:
	LDA Objects_State, X
	CMP #OBJSTATE_KILLED
	BNE Lakitu_Alive

	JMP Lakitu_Die

Lakitu_Alive:
	LDA Objects_SlowTimer, X
	BEQ Lakitu_Do

	
	LDA <Horz_Scroll
	ADD #$40
	STA <Objects_XZ, X

	LDA <Horz_Scroll_Hi
	ADC #$01
	STA <Objects_XHiZ, X
	RTS

Lakitu_Do:
	LDA <Player_HaltGameZ
	BEQ Lakitu_Norm

	JMP Lakitu_Draw

Lakitu_Norm:
	LDA Game_Counter
	AND #$03
	BNE Lakitu_Chase

	JSR Object_Move
	JMP Lakitu_CalcBoundBox

Lakitu_Chase:
	JSR Object_ChasePlayer

Lakitu_CalcBoundBox:
	JSR Object_CalcBoundBox

	LDA <Vert_Scroll
	ADD #$14
	STA <Objects_YZ, X

	LDA #$00
	ADC #$00
	STA <Objects_YHiZ, X

	JSR Object_CalcBoundBox
	JSR Object_DetectTiles
	JSR Object_CheckForeground
	JSR Object_AttackOrDefeat
	JSR Lakitu_DoAction
	JMP Lakitu_Draw

Lakitu_DoAction:
	LDA Lakitu_Action, X
	JSR DynJump

	.word Lakitu_Wait
	.word Lakitu_Lower
	.word Lakitu_GetEnemy
	.word Lakitu_RaiseEnemy
	.word Lakitu_Raise
	.word Lakitu_Aim

Lakitu_Die:
	LDA <Player_HaltGameZ
	BNE Lakitu_DieDone

	LDA Lakitu_MadePoof, X
	BNE Lakitu_NoPoof

	LDA <Objects_XZ, X
	STA Poof_X

	LDA <Objects_YZ, X 
	ADD #$10
	STA Poof_Y

	LDA <Objects_YHiZ, X
	ADC #$00
	STA Poof_YHi
	JSR Common_MakePoof

	INC Lakitu_MadePoof, X

	LDA Lakitu_EnemySlot, X
	BMI Lakitu_NoPoof

	TAY
	LDA #$00
	STA Objects_State, Y

Lakitu_NoPoof:
	JSR Object_Move

	LDA <Objects_YHiZ, X
	BEQ Lakitu_DieDone

	LDA <Objects_YZ, X
	CMP #$B0
	BCC Lakitu_DieDone

	LDA #$FF
	STA Objects_SlowTimer, X

	LDA #OBJSTATE_NORMAL
	STA Objects_State, X


	JSR Lakitu_Reset

	LDA #$00
	STA Objects_Frame, X

	LDA Objects_Orientation, X
	AND #~SPR_VFLIP
	STA Objects_Orientation, X

	RTS

Lakitu_DieDone:
	LDA #$01
	STA Objects_Frame, X

	LDA #SPR_VFLIP
	ORA Objects_Orientation, X
	STA Objects_Orientation, X

	JMP Object_DrawMirrored

Lakitu_Wait:
	LDA Objects_Timer, X
	BNE Lakitu_WaitDone

	INC Lakitu_Action, X

Lakitu_WaitDone:
	RTS

Lakitu_Lower:
	INC Lakitu_BodyOffset, X
	LDY Lakitu_BodyOffset, X
	CPY #$10
	BCC Lakitu_LowerDone

	INC Lakitu_Action, X

Lakitu_LowerDone:
	RTS

Lakitu_GetEnemy:
	LDA Objects_Property, X
	TAY
	LDA Lakitu_EnemyToss, Y
	STA <Temp_Var1

	LDA Lakitu_EnemyProperty, Y
	STA <Temp_Var2

	JSR Object_FindEmptyY
	BCC Lakitu_GetEnemyDone

	TYA
	STA Lakitu_EnemySlot, X

	LDA #OBJSTATE_NONE
	STA Objects_State, Y
	STA Objects_NoExp, Y

	LDA <Temp_Var1
	STA Objects_ID, Y	

	LDA <Temp_Var2
	STA Objects_Property, Y

	INC Lakitu_Action, X

Lakitu_GetEnemyDone:
	RTS

Lakitu_RaiseEnemy:
	INC Lakitu_EnemyOffset, X
	LDA Lakitu_EnemyOffset, X
	CMP #$0C
	BCC Lakitu_RaiseEnemyDone

	INC Lakitu_Action, X
	LDA #$01
	STA Objects_Frame, X

Lakitu_RaiseEnemyDone:
	RTS

Lakitu_Raise:
	DEC Lakitu_BodyOffset, X
	BNE Lakitu_RaiseDone

	INC Lakitu_Action, X

	LDA RandomN, X
	AND #$03
	TAY
	LDA Lakitu_AimTimers, Y
	STA Objects_Timer, X

Lakitu_RaiseDone:
	RTS

Lakitu_AimTimers:
	.byte $20, $40, $40, $10


Lakitu_WaitTimers:
	.byte $40, $40, $60, $30

Lakitu_Aim:
	LDA Objects_Timer, X
	BNE Lakitu_AimDone

	LDA <Objects_XZ, X
	AND #$0F
	BNE Lakitu_AimDone

	LDA <Objects_XZ, X
	ADD #$08
	STA Tile_DetectionX

	LDA <Objects_XHiZ, X
	STA Tile_DetectionXHi

	LDA <Objects_YZ, X
	SUB #$08
	STA Tile_DetectionY

	LDA <Objects_YHiZ, X
	SBC #$00
	STA Tile_DetectionYHi

	JSR Object_DetectTile

	LDA Tile_LastProp
	CMP #TILE_PROP_SOLID_ALL
	BCS Lakitu_AimDone

	LDY Lakitu_EnemySlot, X
	LDA #OBJSTATE_FRESH
	STA Objects_State, Y

	LDA <Objects_XZ, X
	STA Objects_XZ, Y

	LDA <Objects_XHiZ, X
	STA Objects_XHiZ, Y

	LDA <Objects_YZ, X
	SUB #$10
	STA Objects_YZ, Y

	LDA <Objects_YHiZ, X
	SBC #$00
	STA Objects_YHiZ, Y

	LDA #$00
	STA Objects_YVelZ, Y

	LDA <Objects_XVelZ, X
	STA Objects_XVelZ, Y

Lakitu_Reset:

	LDA RandomN, X
	AND #$03
	TAY
	LDA Lakitu_WaitTimers, Y
	STA Objects_Timer, X

	LDA #$00
	STA Lakitu_EnemyOffset, X
	STA Lakitu_BodyOffset, X
	STA Lakitu_MadePoof, X
	STA Lakitu_Action, X
	STA Objects_Frame, X

	LDA #$FF
	STA Lakitu_EnemySlot, X


Lakitu_AimDone:
	RTS

Lakitu_Draw:
	LDA Object_SpriteRAMOffset, X
	ADD #$04
	STA Object_SpriteRAMOffset, X

	LDA <Objects_SpriteY, X
	ADD #$10
	STA <Objects_SpriteY, X

	JSR Object_Draw16x32Mirrored

	LDA Sprite_RAMY, Y
	STA <Temp_Var1

	LDA Sprite_RAMY + 8, Y
	STA Sprite_RAMY, Y

	LDA <Temp_Var1
	ADD Lakitu_BodyOffset, X
	BCS Lakitu_Draw_A
	STA Sprite_RAMY + 8, Y

Lakitu_Draw_A:
	LDA Sprite_RAMY + 4, Y
	STA <Temp_Var1

	LDA Sprite_RAMY + 12, Y
	STA Sprite_RAMY + 4, Y

	LDA <Temp_Var1
	ADD Lakitu_BodyOffset, X
	BCS Lakitu_Draw0
	STA Sprite_RAMY + 12, Y

Lakitu_Draw0:
	LDA Sprite_RAMX, Y
	ADD #$04
	BCS Lakitu_Draw1
	STA Sprite_RAMX, Y

Lakitu_Draw1:
	LDA Sprite_RAMX + 4, Y
	ADD #$04
	BCS Lakitu_Draw2

	STA Sprite_RAMX + 4, Y

Lakitu_Draw2:
	LDA Sprite_RAMAttr, Y
	AND #~SPR_PAL3
	ORA #SPR_PAL1
	STA Sprite_RAMAttr, Y

	LDA Sprite_RAMAttr + 4, Y
	AND #~SPR_PAL3
	ORA #SPR_PAL1
	STA Sprite_RAMAttr+ 4, Y

	TYA
	SUB #$04
	TAY

	LDA #$41
	STA Sprite_RAMTile, Y

	LDA Objects_SpriteX, X
	SUB #$04
	BCC Lakitu_Draw3
	STA Sprite_RAMX, Y
	
	LDA Objects_SpritesHorizontallyOffScreen, X
	AND #SPRITE_0_HINVISIBLE
	BNE Lakitu_Draw3

	LDA Sprite_RAMY + 4, Y
	STA Sprite_RAMY, Y


	LDA Sprite_RAMAttr + 4, Y
	STA Sprite_RAMAttr, Y

Lakitu_Draw3:
	LDA Lakitu_EnemySlot, X
	BMI Lakitu_DrawDone

	JSR Lakitu_DrawEnemy

Lakitu_DrawDone:
	LDA Object_SpriteRAMOffset, X
	SUB #$04
	STA Object_SpriteRAMOffset, X

	RTS

Lakitu_EnemyToss:
	.byte OBJ_SPINYEGG, OBJ_FREEZIE, OBJ_HARDICE, OBJ_LIGHTNINGBOLT

Lakitu_EnemyFrameLeft:
	.byte $99, $B1, $99, $99

Lakitu_EnemyFrameLeftAttr:
	.byte SPR_PAL1, SPR_PAL2, SPR_PAL2, SPR_PAL3

Lakitu_EnemyFrameRight:
	.byte $99, $B3, $9B, $9B

Lakitu_EnemyProperty:
	.byte $00, $00, $00, $00

Lakitu_EnemyFrameRightAttr:
	.byte SPR_PAL1 | SPR_HFLIP | SPR_VFLIP, SPR_PAL2, SPR_PAL2, SPR_PAL3

Lakitu_DrawEnemy:
	LDA Lakitu_EnemyOffset, X
	STA <Temp_Var1

	LDA Objects_Property, X
	TAX

	LDA Sprite_RAMY + 12, Y
	CMP #$F8
	BEQ Lakitu_Enemy1

	SUB <Temp_Var1
	STA Sprite_RAMY + 20, Y

Lakitu_Enemy1:
	STA <Temp_Var3

	LDA Lakitu_EnemyFrameLeft, X
	STA Sprite_RAMTile + 20, Y

	LDA Objects_SpriteAttributes, X
	AND #SPR_BEHINDBG
	ORA Lakitu_EnemyFrameLeftAttr, X
	STA Sprite_RAMAttr + 20, Y

	LDA Sprite_RAMX + 12, Y
	STA Sprite_RAMX + 20, Y
	ADD #$08
	STA <Temp_Var2

	LDA Objects_Property, X
	TAX

	LDA <Temp_Var3
	CMP #$F8
	BEQ Lakitu_DrawEnemyDone
	STA Sprite_RAMY + 24, Y

	LDA Lakitu_EnemyFrameRight, X
	STA Sprite_RAMTile + 24, Y

	LDA Objects_SpriteAttributes, X
	AND #SPR_BEHINDBG
	ORA Lakitu_EnemyFrameRightAttr, X
	STA Sprite_RAMAttr + 24, Y

	LDA <Temp_Var2
	STA Sprite_RAMX + 24, Y

Lakitu_DrawEnemyDone:
	RTS    

SpinyEgg_Frame = Objects_Data1

ObjInit_SpinyEgg:
	LDA #(ATTR_WINDAFFECTS)
	STA Objects_BehaviorAttr, X
	
	LDA #ATTR_STOMPPROOF
	STA Objects_WeaponAttr, X

	LDA #$02
	STA Objects_Health, X


	LDA #BOUND16x16
	STA Objects_BoundBox, X
	RTS

ObjNorm_SpinyEgg:
	LDA <Player_HaltGameZ
	BEQ SpinyEgg_Norm

	JMP SpinyEgg_Draw

SpinyEgg_Norm:
	JSR Object_DeleteOffScreen
	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat
	JSR Object_DetectTiles
	JSR Object_InteractWithTiles

	LDA <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ SpinyEgg_Animate

	LDA Objects_SpritesHorizontallyOffScreen,X
	ORA Objects_SpritesVerticallyOffScreen,X
	BNE SpinEgg_NoBurst

	LDA <Objects_XZ, X
	STA Debris_X

	LDA <Objects_YZ, X
	STA Debris_Y

	JSR Common_MakeDebris
	LDA #$A7
	STA BrickBust_Tile, Y

	LDA #SPR_PAL1
	STA BrickBust_Pal, Y

SpinEgg_NoBurst:
	LDA #OBJ_SPINY
	STA Objects_ID, X

	LDA #(ATTR_HASSHELL | ATTR_WINDAFFECTS | ATTR_CARRYANDBUMP)
	STA Objects_BehaviorAttr, X

	JSR Object_MoveTowardsPlayer

SpinyEgg_Animate:
	INC SpinyEgg_Frame, X

SpinyEgg_Draw:
	JSR Object_DrawMirrored

	LDA SpinyEgg_Frame, X
	LSR A
	LSR A
	LSR A
	AND #$01
	BEQ SpinyEgg_FlipRight

	LDA Sprite_RAMAttr, Y
	ORA #SPR_VFLIP
	STA Sprite_RAMAttr, Y
	RTS		 ; Return

SpinyEgg_FlipRight:
	LDA Sprite_RAMAttr + 4, Y
	ORA #SPR_VFLIP
	STA Sprite_RAMAttr + 4, Y
	RTS    



FireIcePirateBro_JumpWait: .byte $C0, $FF
FireIcePirateBro_WaitTimers: .byte $60, $40, $40, $40

FireIcePirateBro_Frame = Objects_Data1
FireIcePirateBro_Action = Objects_Data2
FireIcePirateBro_RangeLeft = Objects_Data3
FireIcePirateBro_RangeRight = Objects_Data4
FireIcePirateBro_SpitTimer = Objects_Data5
FireIcePirateBro_OpenMouthTimer = Objects_Data6
FireIcePirateBro_WalkDirection = Objects_Data7
FireIcePirateBro_FireIcePirateCount = Objects_Data8
FireIcePirateBro_WalkDirectionBackup = Objects_Data9
FireIcePirateBro_Projectile = Objects_Data10

ObjInit_IceBro:
	LDA #$04
	STA Objects_SpritesRequested, X

	LDA #BOUND16x24
	STA Objects_BoundBox, X

	JSR ObjInit_FireBro

	LDA #SOBJ_ICEBALL
	STA FireIcePirateBro_Projectile, X

	LDA #$02
	STA Objects_Health, X
	RTS		 ; Return    


ObjInit_FireBro:
	LDA #$04
	STA Objects_SpritesRequested, X

	LDA #BOUND16x24
	STA Objects_BoundBox, X

	JSR Object_CalcBoundBox
	JSR Object_MoveTowardsPlayer

	LDA <Objects_XVelZ, X
	STA FireIcePirateBro_WalkDirection, X

	LDA <Objects_XZ, X
	SUB #$10
	STA FireIcePirateBro_RangeLeft, X

	LDA <Objects_XZ, X
	ADD #$10
	STA FireIcePirateBro_RangeRight, X

	LDA #SOBJ_FIREBALL
	STA FireIcePirateBro_Projectile, X

	LDA #$02
	STA Objects_Health, X
	RTS		 ; Return
    


ObjInit_PirateBro:
	LDA #$04
	STA Objects_SpritesRequested, X

	LDA #BOUND16x24
	STA Objects_BoundBox, X

	JSR ObjInit_FireBro

	LDA #SOBJ_CANNONBALL
	STA FireIcePirateBro_Projectile, X
	
	LDA #$02
	STA Objects_Health, X
	RTS		 ; Return    


ObjNorm_FireIcePirateBro:
	LDA <Player_HaltGameZ
	BEQ FireIcePirateBro_Norm

	JMP Object_Draw16x32

FireIcePirateBro_Norm:

	JSR Object_DeleteOffScreen	 ; Delete object if it falls off-screen

	LDA FireIcePirateBro_WalkDirection, X
	STA <Objects_XVelZ, X

	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_DetectTiles
	JSR Object_InteractWithTiles
	JSR Object_FacePlayer
	JSR Object_AttackOrDefeat

	LDA FireIcePirateBro_OpenMouthTimer, X
	BEQ FireIcePirateBro_NotOpen

	DEC FireIcePirateBro_OpenMouthTimer, X
	BNE FireIcePirateBro_CheckJump

	LDA FireIcePirateBro_FireIcePirateCount, X
	BEQ FireIcePirateBro_Reset

	DEC FireIcePirateBro_FireIcePirateCount, X

	JSR FireIcePirateBro_Shoot

	LDA #$18
	STA FireIcePirateBro_OpenMouthTimer, X
	BNE FireIcePirateBro_CheckJump

FireIcePirateBro_Reset:
	LDA RandomN + 1, X
	AND #$03
	TAY 
	LDA FireIcePirateBro_WaitTimers, Y
	STA FireIcePirateBro_SpitTimer, X

	LDA FireIcePirateBro_WalkDirectionBackup, X
	STA FireIcePirateBro_WalkDirection, X
	
FireIcePirateBro_NotOpen:
	LDA FireIcePirateBro_SpitTimer, X
	BNE FireIcePirateBro_DecFireIcePirateTimer

	LDA #$18
	STA FireIcePirateBro_OpenMouthTimer, X

	LDA RandomN, X
	AND #$01
	ADD #$01
	STA FireIcePirateBro_FireIcePirateCount, X

	LDA FireIcePirateBro_WalkDirection, X
	STA FireIcePirateBro_WalkDirectionBackup, X

	LDA #$00
	STA FireIcePirateBro_WalkDirection, X
	BEQ FireIcePirateBro_CheckJump

FireIcePirateBro_DecFireIcePirateTimer:
	DEC FireIcePirateBro_SpitTimer, X

FireIcePirateBro_CheckJump:
	LDA Objects_Timer, X
	BNE FireIcePirateBro_NoJump

	LDA #$C0
	STA <Objects_YVelZ, X

	LDA RandomN, X
	AND #$10
	LSR A
	LSR A
	LSR A
	LSR A
	TAY

	LDA FireIcePirateBro_JumpWait, Y
	STA Objects_Timer, X


FireIcePirateBro_NoJump:

	LDA <Objects_XZ, X
	CMP FireIcePirateBro_RangeLeft, X
	BEQ FireIcePirateBro_TurnAround

	CMP FireIcePirateBro_RangeRight, X
	BNE FireIcePirateBro_Animate

FireIcePirateBro_TurnAround:
	LDA FireIcePirateBro_WalkDirection, X
	EOR #$FF
	ADD #$01
	STA FireIcePirateBro_WalkDirection, X

FireIcePirateBro_Animate:
	LDA FireIcePirateBro_WalkDirection, X
	BEQ FireIcePirateBros_NoAnimate

	INC FireIcePirateBro_Frame, X

FireIcePirateBros_NoAnimate:
	LDA #$00
	STA <Temp_Var2

	LDA FireIcePirateBro_Frame, X
	LSR A
	LSR A
	LSR A
	LSR A
	AND #$01
	STA <Temp_Var1

	LDA FireIcePirateBro_OpenMouthTimer, X
	BEQ FireIcePirateBros_FinishAnimate

	LDA #$02
	STA <Temp_Var2

FireIcePirateBros_FinishAnimate:

	LDA <Temp_Var1
	ORA <Temp_Var2
	STA Objects_Frame, X

FireIcePirateBros_Draw:
	JMP Object_Draw16x32


FireIcePirate_XVel:
	.byte $E0, $20
	
FireIcePirate_XOffset:
	.byte $FE, $08
	.byte $FF, $00

FireIcePirateBro_Shoot:

	LDA Objects_SpritesHorizontallyOffScreen,X
	CMP #(SPRITE_0_INVISIBLE | SPRITE_1_INVISIBLE)
	BCS FireICePriateBro_NoShoot

	LDA Objects_SpritesHorizontallyOffScreen,X
	BEQ FireIcePirateBro_DoShoot

FireICePriateBro_NoShoot:
	RTS

FireIcePirateBro_DoShoot:
	LDY #$00

	LDA Objects_Orientation, X
	AND #SPR_HFLIP
	BEQ FireIcePirateBro_SpitRight

	INY

FireIcePirateBro_SpitRight:
	
	LDA FireIcePirate_XOffset, Y
	STA <Temp_Var14

	LDA FireIcePirate_XOffset + 2, Y
	STA <Temp_Var15

	LDA FireIcePirate_XVel, Y
	STA <Temp_Var16

	JSR Object_PrepProjectile
	BCC FireIcePirateBro_ShootDone

	LDA FireIcePirateBro_Projectile, X
	STA SpecialObj_ID, Y

	CMP #SOBJ_ICEBALL
	BNE FireIcePirateBro_SpitNorm

	LDA <Temp_Var16
	JSR Half_Value
	STA SpecialObj_XVel, Y
	BNE FireIcePirateBro_SetYVel
	
FireIcePirateBro_SpitNorm:
	LDA <Temp_Var16
	STA SpecialObj_XVel, Y

FireIcePirateBro_SetYVel:
	LDA #$FE
	STA SpecialObj_YVel, Y

	LDA <Objects_XZ, X
	ADD <Temp_Var14
	STA SpecialObj_X, Y

	LDA <Objects_XHiZ, X
	ADC <Temp_Var15
	STA SpecialObj_XHi, Y

	LDA <Objects_YZ, X
	ADD #$04
	STA SpecialObj_Y, Y

	LDA <Objects_YHiZ, X
	ADC #$00
	STA SpecialObj_YHi, Y

	LDA FireIcePirateBro_Projectile, X
	CMP #SOBJ_CANNONBALL
	BNE FireIcePirateBro_ShootDone

	LDA #SND_LEVELBABOOM
	ORA Sound_QLevel1
	STA Sound_QLevel1

	LDA #$00
	STA SpecialObj_YVel, Y

	LDA #$01
	STA SpecialObj_Stompable, Y
	
	LDA SpecialObj_Y, Y
	SUB #$02
	STA SpecialObj_Y, Y

	LDA SpecialObj_YHi, Y
	SBC #$00
	STA SpecialObj_YHi, Y
	RTS

FireIcePirateBro_ShootDone:
	LDA #SND_PLAYERFIRE
	ORA Sound_QPlayer
	STA Sound_QPlayer
	RTS    


Chomp_Frame = Objects_Data1
Chomp_Charges = Objects_Data2
Chomp_PinX = Objects_Data3
Chomp_PinY = Objects_Data4
Chomp_Charging = Objects_Data5
Chomp_CanCharge = Objects_Data6
Chomp_XChainMax = Objects_Data7
Chomp_YChainMax = Objects_Data8

ObjInit_ChainChomp:
	LDA #$06
	STA Objects_SpritesRequested, X

	LDA #$03
	STA Objects_ExpPoints, X

	LDA #$04
	STA Objects_Health, X

	LDA Objects_Property, X
	BEQ ChainChomp_NotCharging

	LDA #$02
	STA Chomp_Charging, X

ChainChomp_NotCharging:

	; Fill in all f the following with the Chain Chomp's Pining X coordinate
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #(ATTR_FIREPROOF | ATTR_ICEPROOF | ATTR_STOMPPROOF | ATTR_TAILPROOF |  ATTR_NINJAPROOF)
	STA Objects_WeaponAttr, X

	LDA #ATTR_BUMPNOKILL
	STA Objects_BehaviorAttr, X

	LDA <Objects_XZ,X
	ADD #$08
	STA Chomp_PinX,X
	SUB #$04
	STA ChainChomp_ChainX1, X
	STA ChainChomp_ChainX2, X
	STA ChainChomp_ChainX3, X
	STA ChainChomp_ChainX4, X
	
	LDA <Objects_YZ,X
	ADD #$08
	STA Chomp_PinY,X
	SUB #$08
	STA ChainChomp_ChainY1, X
	STA ChainChomp_ChainY2, X
	STA ChainChomp_ChainY3, X
	STA ChainChomp_ChainY4, X
	
	LDA <Objects_YZ,X
	SUB #$10
	STA <Objects_YZ,X
	
	LDA <Objects_YHiZ,X
	SBC #$00
	STA <Objects_YHiZ,X
	
	JSR Object_MoveTowardsPlayerFast
	
	LDA #$04
	STA Chomp_Charges, X
	
	RTS		 ; Return


Chomp_ChargeTimers:
	.byte $40, $60, $50, $70, $50, $40, $60, $60

Chomp_ChargeXVel:
	.byte $40, $38, $30, $28, $20, $40, $38, $30

Chomp_ChargeYVel:
	.byte $FF, $F0, $E0, $D0, $C0, $00, $F0, $E0

Chomp_Restrain:
	
	LDA Chomp_XChainMax, X
	BEQ RestrainY

	JSR MaxOutChainsX
	LDA Chomp_Charging, X
	BNE RestrainXCharging

	LDY #$00
	LDA <Objects_XZ, X
	SUB Chomp_PinX, X
	BMI Chomp_Restrain1

	INY

Chomp_Restrain1:
	LDA <Objects_XVelZ, X
	BEQ Chomp_RestrainXRTS

	AND #$80
	CMP MaxChainVelCmp, Y
	BNE Chomp_RestrainXRTS

	LDA <Objects_XVelZ, X
	EOR #$FF
	ADD #$01
	STA <Objects_XVelZ, X

Chomp_RestrainXRTS:
	RTS

RestrainXCharging:
	LDA #$00
	STA <Objects_XVelZ, X
	STA <Objects_YVelZ, X

RestrainY:
	LDA Chomp_YChainMax, X
	BEQ RestraintRTS

	JSR MaxOutChainsY

	LDA <Objects_YVelZ, X
	BPL RestraintRTS

	LDA #$00
	STA <Objects_YVelZ, X
	STA <Objects_XVelZ, X

RestraintRTS:
	RTS

MaxChainVelCmp:
	.byte $80, $00

MaxOutChainsX:
	LDY #$00
	LDA <Objects_XZ, X
	SUB Chomp_PinX, X
	BMI MaxOutChainsX1

	INY

MaxOutChainsX1:
	LDA ChainChomp_ChainX4, X
	ADD ChainOffset, Y

	STA ChainChomp_ChainX3, X
	ADD ChainOffset, Y

	STA ChainChomp_ChainX2, X
	ADD ChainOffset, Y

	STA ChainChomp_ChainX1, X
	JSR EvenOutYChains

MaxOutChainsX2:
	RTS

MaxOutChainsY:
	LDA ChainChomp_ChainY4, X
	ADD ChainOffset
	STA ChainChomp_ChainY3, X
	ADD ChainOffset
	STA ChainChomp_ChainY2, X
	ADD ChainOffset
	STA ChainChomp_ChainY1, X
	JSR EvenOutXChains
	RTS

EvenOutYChains:
	LDA <Objects_YZ, X
	ADD #$08
	STA <Temp_Var2

	LDA ChainChomp_ChainY4, X
	SUB <Temp_Var2
	JSR Half_Value
	JSR Half_Value
	
	STA <Temp_Var3

	LDA <Temp_Var2

	ADD <Temp_Var3
	STA ChainChomp_ChainY1, X

	ADD <Temp_Var3
	STA ChainChomp_ChainY2, X

	ADD <Temp_Var3
	STA ChainChomp_ChainY3, X
	RTS

EvenOutXChains:
	LDA <Objects_XZ, X
	ADD #$08
	STA <Temp_Var2

	LDA ChainChomp_ChainX4, X
	SUB <Temp_Var2
	JSR Half_Value
	JSR Half_Value
	
	STA <Temp_Var3

	LDA <Temp_Var2

	ADD <Temp_Var3
	STA ChainChomp_ChainX1, X

	ADD <Temp_Var3
	STA ChainChomp_ChainX2, X

	ADD <Temp_Var3
	STA ChainChomp_ChainX3, X
	RTS

ObjNorm_ChainChomp:

	LDA <Player_HaltGameZ
	BEQ ChompNorm

	LDA Chomp_Charging, X
	CMP #$02
	BCS NoChainDraw

	JSR Chomp_DrawChains

NoChainDraw:
	JMP Object_Draw

ChompNorm:
	LDA #$60
	JSR Object_DeleteOffScreenRange

	LDA Chomp_Charging, X
	JSR DynJump

	.word Chomp_BounceAround
	.word Chomp_ChargeAtPlayer
	.word Chomp_Free

ChargeSignCheck:
	.byte $00, $80

Chomp_BounceAround:
	JSR Object_Move
	JSR Chomp_MoveChains
	JSR Chomp_Restrain
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat	 
	JSR Object_FaceDirectionMoving
	JSR Object_DetectTiles
	JSR Object_InteractWithTiles
	
	LDA Chomp_CanCharge, X
	BEQ Chomp_NoCharge
	
	JSR Object_XDistanceFromPlayer
	CMP #$20
	BCC Chomp_NoCharge
	
	LDA <Objects_XZ, X
	SUB Chomp_PinX, X
	AND #$80
	CMP ChargeSignCheck, Y
	BNE Chomp_NoCharge
	
	JSR Chomp_Charge
	LDA #$00
	STA Chomp_CanCharge, X
	JMP ChompAnimate

Chomp_NoCharge:
	LDA <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ ChompAnimate

	LDA #$01
	STA Chomp_CanCharge, X

	LDA #$E8
	STA <Objects_YVelZ, X

	LDA #$10
	JSR Object_DetectTileAhead
	CMP #TILE_PROP_SOLID_ALL
	BCC NoBounceHigher

	LDA #$D0
	STA <Objects_YVelZ, X

NoBounceHigher:
	LDA <Objects_XVelZ, X
	BNE ChompAnimate

	JSR Object_MoveAwayFromPlayerFast

ChompAnimate:
	INC Chomp_Frame, x
	LDA Chomp_Frame, x
	LSR A
	LSR A

	LDY Chomp_Charging, X
	BNE Chomp_NotFastAnim

	LSR A

Chomp_NotFastAnim:
	AND #$01
	STA Objects_Frame, X
	JSR Chomp_DrawChains
	JMP Object_Draw

Chomp_ChargeAtPlayer:
	JSR Object_ApplyXVel
	JSR Object_ApplyYVel_NoGravity
	JSR Chomp_MoveChains
	JSR Chomp_Restrain
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat	 
	JSR Object_FaceDirectionMoving
	
	LDA Objects_Timer, X
	BNE Chomp_ChargeAtPlayer1

	DEC Chomp_Charges, X
	BEQ Chomp_GetFree

	LDA #$00
	STA Chomp_Charging, X
	STA <Objects_XVelZ, X
	
Chomp_ChargeAtPlayer1:
	JMP ChompAnimate

Chomp_GetFree:
	JSR Object_MoveTowardsPlayerFast

	LDA Chomp_PinX, X
	SUB <Objects_XZ, X

	JSR Half_Value
	ADD <Objects_XZ, X
	STA <Debris_X

	LDA Chomp_PinY,  X
	SUB <Objects_YZ, X

	JSR Half_Value

	ADD <Objects_YZ,X
	STA <Debris_Y
	JSR Common_MakeChains
	LDA #$02
	STA Chomp_Charging, X

	JMP ChompAnimate

Chomp_ChargeSign:
	.byte $80, $00

Chomp_Aim:
	LDA RandomN
	AND #$07
	TAY
	LDA Chomp_ChargeXVel, Y
	STA <Objects_XVelZ, X

	LDA Chomp_ChargeYVel, Y
	STA <Objects_YVelZ, X

	JSR Object_XDistanceFromPlayer
	CPY #$00
	BNE Chomp_Aim1

	LDA <Objects_XVelZ, X
	EOR #$FF
	ADD #$01
	STA <Objects_XVelZ, X

Chomp_Aim1:
	RTS
	
Chomp_Charge:
	JSR Chomp_Aim
	
	LDA #$20
	STA Objects_Timer, X
	INC Chomp_Charging, X
	RTS

ChainOffset:
	.byte $F3, $0D

Chomp_MoveChains:
	LDA #$00
	STA Chomp_XChainMax, X
	STA Chomp_YChainMax, X

	LDA ChainChomp_ChainY4, X
	SUB <Vert_Scroll
	STA <Temp_Var1

	LDA ChainChomp_ChainY1, X
	SUB <Vert_Scroll
	SUB <Temp_Var1
	BPL Chain1OK
	
	INC ChainChomp_ChainY1, X
	INC ChainChomp_ChainY1, X

Chain1OK:
	LDA ChainChomp_ChainY2, X
	SUB <Vert_Scroll
	SUB <Temp_Var1
	BPL Chain2OK

	INC ChainChomp_ChainY2, X
	INC ChainChomp_ChainY2, X

Chain2OK:
	LDA ChainChomp_ChainY3, X
	SUB <Vert_Scroll
	SUB <Temp_Var1
	BPL Chain3OK


	INC ChainChomp_ChainY3, X
	INC ChainChomp_ChainY3, X

Chain3OK:	
	LDA <Objects_XZ, X
	ADD #$08
	STA <Temp_Var1

	LDY #$00
	LDA ChainChomp_ChainX1, X
	ADD #$04
	SUB <Temp_Var1
	BPL CMVC1

	INY

CMVC1:
	CMP ChainOffset + 1
	BCC SetChain_YJumpCC

	CMP ChainOffset
	BCS SetChain_YJumpCS

	ADD ChainOffset, Y
	EOR #$FF
	ADD #$01
	ADD ChainChomp_ChainX1, X
	STA ChainChomp_ChainX1, X
	ADD #$04
	STA <Temp_Var1

	LDY #$00
	LDA ChainChomp_ChainX2, X
	ADD #$04
	SUB <Temp_Var1
	BPL CMVC2

	INY

CMVC2:
	CMP ChainOffset + 1

SetChain_YJumpCC:
	BCC SetChain_Y

	CMP ChainOffset

SetChain_YJumpCS:
	BCS SetChain_Y
	
	ADD ChainOffset, Y
	EOR #$FF
	ADD #$01
	ADD ChainChomp_ChainX2, X
	STA ChainChomp_ChainX2, X
	ADD #$04
	STA <Temp_Var1

	LDY #$00
	LDA ChainChomp_ChainX3, X
	ADD #$04
	SUB <Temp_Var1
	BPL CMVC3

	INY

CMVC3:
	CMP ChainOffset + 1
	BCC SetChain_Y

	CMP ChainOffset
	BCS SetChain_Y
	
	ADD ChainOffset, Y
	EOR #$FF
	ADD #$01
	ADD ChainChomp_ChainX3, X
	STA ChainChomp_ChainX3, X
	ADD #$04
	STA <Temp_Var1

	LDY #$00
	LDA ChainChomp_ChainX4, X
	ADD #$04
	SUB <Temp_Var1
	BPL CMVCMaxX

	INY

CMVCMaxX:
	CMP ChainOffset + 1
	BCC SetChain_Y

	CMP ChainOffset
	BCS SetChain_Y

	ADD ChainOffset, Y

	BEQ SetChain_Y

	INC Chomp_XChainMax, X

SetChain_Y:
	LDA <Objects_YZ, X
	ADD #$08
	STA <Temp_Var1

	LDY #$00
	LDA ChainChomp_ChainY1, X
	ADD #$08
	SUB <Temp_Var1
	BPL CMVC4

	INY

CMVC4:
	CMP ChainOffset + 1
	BCC Chomp_MoveChains1CC

	CMP ChainOffset
	BCS Chomp_MoveChains1CS

	ADD ChainOffset, Y
	EOR #$FF
	ADD #$01
	ADD ChainChomp_ChainY1, X
	STA ChainChomp_ChainY1, X
	ADD #$08
	STA <Temp_Var1

	LDY #$00
	LDA ChainChomp_ChainY2, X
	ADD #$08
	SUB <Temp_Var1
	BPL CMVC5

	INY

CMVC5:

	CMP ChainOffset + 1
Chomp_MoveChains1CC:
	BCC Chomp_MoveChains1

	CMP ChainOffset
Chomp_MoveChains1CS:
	BCS Chomp_MoveChains1
	
	ADD ChainOffset, Y
	EOR #$FF
	ADD #$01
	ADD ChainChomp_ChainY2, X
	STA ChainChomp_ChainY2, X
	ADD #$08
	STA <Temp_Var1

	LDY #$00
	LDA ChainChomp_ChainY3, X
	ADD #$08
	SUB <Temp_Var1
	BPL CMVC6

	INY

CMVC6:
	CMP ChainOffset + 1
	BCC Chomp_MoveChains1

	CMP ChainOffset
	BCS Chomp_MoveChains1
	
	ADD ChainOffset, Y
	EOR #$FF
	ADD #$01
	ADD ChainChomp_ChainY3, X
	STA ChainChomp_ChainY3, X

	ADD #$08
	STA <Temp_Var1

	LDY #$00
	LDA ChainChomp_ChainY4, X
	ADD #$08
	SUB <Temp_Var1
	BPL CMVCMaxY

	INY

CMVCMaxY:
	CMP ChainOffset + 1
	BCC Chomp_MoveChains1

	CMP ChainOffset
	BCS Chomp_MoveChains1
	
	ADD ChainOffset, Y
	BEQ Chomp_MoveChains1

	INC Chomp_YChainMax, X

Chomp_MoveChains1:
	RTS

Chomp_DrawChains:
	LDY Object_SpriteRAMOffset, X
	STY <Temp_Var4

	LDA ChainChomp_ChainX1, X
	SUB <Horz_Scroll
	STA <Temp_Var2
	

	LDA ChainChomp_ChainY1, X
	SUB <Vert_Scroll
	STA <Temp_Var1

	JSR Object_ParticleVisibleTest
	BCS CDC1

	LDY <Temp_Var4
	LDA <Temp_Var2
	STA Sprite_RAMX + 8, Y
	LDA <Temp_Var1
	STA Sprite_RAMY + 8, Y

CDC1:
	LDA ChainChomp_ChainX2, X
	SUB <Horz_Scroll
	STA <Temp_Var2

	LDA ChainChomp_ChainY2, X
	SUB <Vert_Scroll
	STA <Temp_Var1

	JSR Object_ParticleVisibleTest
	BCS CDC2

	LDY <Temp_Var4
	LDA <Temp_Var2
	STA Sprite_RAMX + 12, Y
	LDA <Temp_Var1
	STA Sprite_RAMY + 12, Y

CDC2:
	LDA ChainChomp_ChainX3, X
	SUB <Horz_Scroll
	STA <Temp_Var2

	LDA ChainChomp_ChainY3, X
	SUB <Vert_Scroll
	STA <Temp_Var1

	JSR Object_ParticleVisibleTest
	BCS CDC3
	
	LDY <Temp_Var4
	LDA <Temp_Var2
	STA Sprite_RAMX + 16, Y
	LDA <Temp_Var1
	STA Sprite_RAMY + 16, Y
	
CDC3:
	LDA ChainChomp_ChainX4, X
	SUB <Horz_Scroll
	STA <Temp_Var2

	LDA ChainChomp_ChainY4, X
	SUB <Vert_Scroll
	STA <Temp_Var1

	JSR Object_ParticleVisibleTest
	BCS CDC4

	LDY <Temp_Var4
	LDA <Temp_Var2
	STA Sprite_RAMX + 20, Y
	LDA <Temp_Var1
	STA Sprite_RAMY + 20, Y

CDC4:
	LDY <Temp_Var4
	LDA #$BD
	STA Sprite_RAMTile + 8, Y
	STA Sprite_RAMTile + 12, Y
	STA Sprite_RAMTile + 16, Y
	STA Sprite_RAMTile + 20, Y

	LDA #SPR_PAL1
	STA Sprite_RAMAttr + 8, Y
	STA Sprite_RAMAttr + 12, Y
	STA Sprite_RAMAttr + 16, Y
	STA Sprite_RAMAttr + 20, Y
	RTS

Chomp_Free:
	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat	 
	JSR Object_FaceDirectionMoving
	JSR Object_DetectTiles
	JSR Object_InteractWithTiles

	

	LDA <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ FreeNoBounce

	JSR Object_MoveTowardsPlayerFast

	LDA #$E8
	STA <Objects_YVelZ, X

	LDA #$10
	JSR Object_DetectTileAhead
	CMP #TILE_PROP_SOLID_ALL
	BCC FreeNoBounce

	LDA #$D0
	STA <Objects_YVelZ, X

FreeNoBounce:
	INC Chomp_Frame, x
	LDA Chomp_Frame, x
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame, X
	JMP Object_Draw    


ObjInit_Thwomp:
	LDA #$06
	STA Objects_SpritesRequested, X

	LDA #(ATTR_FIREPROOF | ATTR_ICEPROOF | ATTR_NINJAPROOF | ATTR_TAILPROOF | ATTR_DASHPROOF | ATTR_STOMPPROOF)
	STA Objects_WeaponAttr, X

	LDA #(ATTR_SHELLPROOF | ATTR_BUMPNOKILL)
	STA Objects_BehaviorAttr, X

	LDA #BOUND24x32
	STA Objects_BoundBox, X

	LDA #$10
	STA Objects_Health, X

	; Var4 = origin Y
	LDA <Objects_YZ, X
	STA Thwomp_StartY, X

	LDA <Objects_YHiZ, X
	STA Thwomp_StartYHi, X
	
	; center the X
	LDA <Objects_XZ,X
	ADD #$04
	STA <Objects_XZ,X

	LDA <Objects_XHiZ,X
	ADD #$00
	STA <Objects_XHiZ,X

	LDA #$05
	STA Objects_Health, X

PRG004_A676:
	RTS		 ; Return


Thwomp_Action = Objects_Data1
Thwomp_Ticker = Objects_Data2
Thwomp_StartY = Objects_Data3
Thwomp_StartYHi = Objects_Data4
Thwomp_TilesDetected = Objects_Data5

Thwomp_DetectXOffset:
	.byte $05, $14

ObjNorm_Thwomp:
	LDA <Player_HaltGameZ
	BEQ Thwomp_Normal

	JMP Thwomp_Draw

Thwomp_Normal:
	LDA Objects_State, X
	CMP #OBJSTATE_KILLED
	BNE Thwomp_DoAction

	LDA <Objects_XZ, X
	ADD #$08
	STA <Debris_X

	LDA <Objects_YZ, X
	STA <Debris_Y

	JSR Common_MakeDebris
	LDA #BRICK_DEBRIS
	STA BrickBust_Tile, Y

	LDA Objects_SpriteAttributes, X
	STA BrickBust_Pal, Y
	
	LDA <Objects_XZ, X

	LDA <Objects_YZ, X
	ADD #$10
	STA <Debris_Y

	JSR Common_MakeDebris
	LDA #BRICK_DEBRIS
	STA BrickBust_Tile, Y

	LDA Objects_SpriteAttributes, X
	STA BrickBust_Pal, Y
	JMP Object_SetDeadAndNotSpawned

Thwomp_DoAction:
	JSR Object_DeleteOffScreen
	
	LDA Thwomp_Action, X
	JSR DynJump

	.word Thwomp_WaitForPlayer
	.word Thwomp_FallToGround
	.word Thwomp_ReturnToOrigin

Thwomp_WaitForPlayer:
	LDA Objects_SpritesVerticallyOffScreen,X
	CMP #(SPRITE_0_VINVISIBLE | SPRITE_1_VINVISIBLE)

	BEQ Thwomp_KeepWaiting
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat

	JSR Object_XDistanceFromPlayer

	LDY #$00
	LDA <XDiff
	CMP #$50
	BCS Thwomp_KeepFrame

	INY

Thwomp_KeepFrame:
	TYA
	STA Objects_Frame, X

	LDA <XDiff
	CMP #$20
	BCS Thwomp_KeepWaiting

	INC Thwomp_Action, X

	LDA #$00
	STA Thwomp_TilesDetected, X

	LDA #$02
	STA Objects_Frame, X

Thwomp_KeepWaiting:
	JMP Thwomp_Draw

Thwomp_FallToGround:
	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat

	INC Thwomp_Ticker, X
	LDA Thwomp_Ticker, X
	AND #$01
	TAY

	LDA Objects_BoundLeft, X
	ADD Thwomp_DetectXOffset, Y
	STA Tile_DetectionX

	LDA Objects_BoundLeftHi, X
	ADC #$00
	STA Tile_DetectionXHi

	LDA Objects_BoundBottom, X
	STA Tile_DetectionY

	LDA Objects_BoundBottomHi, X
	STA Tile_DetectionYHi

	JSR Object_DetectTile

	LDA Tile_LastProp
	CMP #TILE_PROP_SOLID_TOP
	BCC Thwomp_NoHit

	JSR Object_HitGround

	INC Thwomp_TilesDetected, X
	LDA Thwomp_TilesDetected, X
	CMP #$03
	BCS Thwomp_DetectGrnd

	LDA #$20
	STA <Objects_YVelZ, X

	LDA Tile_LastProp
	CMP #(TILE_PROP_SOLID_ALL | TILE_PROP_ENEMYSOLID)
	BNE Thwomp_CheckBlock

	LDA #TILE_ITEM_BRICK
	STA Tile_LastProp

Thwomp_CheckBlock:
	CMP #TILE_ITEM_COIN
	BCC Thwomp_NoBump

	JSR Object_DirectBumpBlocks

Thwomp_NoBump:
	JMP Thwomp_Draw

Thwomp_DetectGrnd:
	LDA #$20
	STA Level_Vibration

	LDA #$30
	STA Objects_Timer, X

	LDA #SND_LEVELBABOOM
	STA Sound_QLevel1
	INC Thwomp_Action, X

Thwomp_NoHit:
	JMP Thwomp_Draw

Thwomp_ReturnToOrigin:
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat

	LDA Objects_Timer, X
	BNE Thwomp_Draw

	LDA #$01
	STA Objects_Frame, X

	LDA #$F0
	STA <Objects_YVelZ, X
	JSR Object_Move

	LDA <Objects_YZ, X
	CMP Thwomp_StartY, X
	BNE Thwomp_Draw

	LDA <Objects_YHiZ, X
	CMP Thwomp_StartYHi, X
	BNE Thwomp_Draw

	LDA #$00
	STA Thwomp_Action, X

Thwomp_Draw:

	JSR Object_Draw16x32	 ; Draw left 2/3 of Thwomp

	LDY Object_SpriteRAMOffset,X	 ; Y = Sprite_RAM offset

	; The right sprites appear +16 away from Thwomp's left
	LDA Objects_SpritesHorizontallyOffScreen,X
	AND #SPRITE_2_INVISIBLE
	BNE Thwomp_DrawRTS

	LDA Objects_SpritesVerticallyOffScreen,X
	AND #SPRITE_0_VINVISIBLE
	BNE Thwomp_Draw1

	LDA Objects_SpriteX, X
	ADD #$10
	STA Sprite_RAMX + 16,Y

	LDA Objects_SpriteY, X
	STA Sprite_RAMY + 16,Y

	LDA Sprite_RAMAttr,Y
	ORA #SPR_HFLIP
	STA Sprite_RAMAttr + 16,Y

	
	LDA Sprite_RAMTile, Y
	STA Sprite_RAMTile + 16, Y

Thwomp_Draw1:
	LDA Objects_SpritesVerticallyOffScreen,X
	AND #SPRITE_1_VINVISIBLE
	BNE Thwomp_DrawRTS

	LDA Objects_SpriteX, X
	ADD #$10
	STA Sprite_RAMX + 20,Y

	LDA Objects_SpriteY, X
	ADD #$10
	STA Sprite_RAMY + 20,Y

	; Right sprite horizontally flipped
	LDA Sprite_RAMAttr + 8,Y
	ORA #SPR_HFLIP
	STA Sprite_RAMAttr + 20,Y

	LDA Sprite_RAMTile + 8, Y
	STA Sprite_RAMTile + 20, Y

Thwomp_DrawRTS:
	RTS		 ; Return    


ObjInit_AngryThwomp:
	LDA #$06
	STA Objects_SpritesRequested, X

	LDA #BOUND24x32
	STA Objects_BoundBox, X

	LDA #$03
	STA Thwomp_Action, X

	LDA <Objects_XZ, X
	ADD #$04
	STA <Objects_XZ, X

	LDA #$01
	STA Objects_Frame, X

	LDA #$05
	STA Objects_Health, X
	RTS

ObjNorm_AngryThwomp:
	LDA <Player_HaltGameZ
	BEQ AngryThwomp_Normal

	JMP Thwomp_Draw

AngryThwomp_Normal:

	LDA Objects_State, X
	CMP #OBJSTATE_KILLED
	BNE AngryThwomp_DoAction

	LDA <Objects_XZ, X
	ADD #$08
	STA <Debris_X

	LDA <Objects_YZ, X
	STA <Debris_Y

	JSR Common_MakeDebris
	LDA #BRICK_DEBRIS
	STA BrickBust_Tile, Y

	LDA Objects_SpriteAttributes, X
	STA BrickBust_Pal, Y
	
	LDA <Objects_XZ, X

	LDA <Objects_YZ, X
	ADD #$10
	STA <Debris_Y

	JSR Common_MakeDebris
	LDA #BRICK_DEBRIS
	STA BrickBust_Tile, Y

	LDA Objects_SpriteAttributes, X
	STA BrickBust_Pal, Y
	JMP Object_Delete

AngryThwomp_DoAction:
	JSR Object_DeleteOffScreen

	LDA Thwomp_Action, X
	AND #$03

	JSR DynJump

	.word Thwomp_FallToGround
	.word AngryThwompWait
	.word Thwomp_FallToCeiling
	.word AngryThwompWait

AngryThwompWait:
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat

	LDA Objects_Timer, X
	BNE AngryThwompWaitRTS

	
	LDA Objects_SpritesVerticallyOffScreen,X
	CMP #(SPRITE_0_VINVISIBLE | SPRITE_1_VINVISIBLE)
	BEQ AngryThwompWaitRTS

	JSR Object_XDistanceFromPlayer

	LDA <XDiff
	CMP #$40
	BCS AngryThwompWaitRTS

	INC Thwomp_Action, X
	LDA Objects_Frame, X
	EOR #$01
	STA Objects_Frame, X

	LDA #$00
	STA Thwomp_TilesDetected, X

AngryThwompWaitRTS:
	JMP Thwomp_Draw


Thwomp_FallToCeiling:
	INC Reverse_Gravity
	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat

	INC Thwomp_Ticker, X
	LDA Thwomp_Ticker, X
	AND #$01
	TAY

	LDA Objects_BoundLeft, X
	ADD Thwomp_DetectXOffset, Y
	STA Tile_DetectionX

	LDA Objects_BoundLeftHi, X
	ADC #$00
	STA Tile_DetectionXHi

	LDA Objects_BoundTop, X
	STA Tile_DetectionY

	LDA Objects_BoundTopHi, X
	STA Tile_DetectionYHi

	JSR Object_DetectTile
	LDA Tile_LastProp
	CMP #TILE_PROP_SOLID_TOP
	BCC AngryThwomp_NoHit

	JSR Object_HitCeiling

	INC Thwomp_TilesDetected, X
	LDA Thwomp_TilesDetected, X
	CMP #$03
	BCS AngryThwomp_DetectCeil

	LDA #$E0
	STA <Objects_YVelZ, X

	LDA Tile_LastProp
	CMP #TILE_ITEM_COIN
	BCC AngryThwomp_NoBump

	JSR Object_DirectBumpBlocks

AngryThwomp_NoBump:
	JMP Thwomp_Draw

AngryThwomp_DetectCeil:
	LDA #$20
	STA Level_Vibration

	LDA #$30
	STA Objects_Timer, X

	LDA #SND_LEVELBABOOM
	STA Sound_QLevel1
	INC Thwomp_Action, X

AngryThwomp_NoHit:
	JMP Thwomp_Draw    	
	
    .org ObjectGroup_InitJumpTable
;****************************** OBJECT INITIALIZATION ******************************
	.word ObjInit_DoNothing	; Object $8C - OBJ_THWOMPRIGHTSLIDE
	.word ObjInit_DoNothing	; Object $8D - OBJ_THWOMPUPDOWN
	.word ObjInit_DoNothing	; Object $8E - OBJ_THWOMPDIAGONALUL
	.word ObjInit_DoNothing	; Object $8F - OBJ_THWOMPDIAGONALDL
	.word ObjInit_ProjBar	; Object $90 - OBJ_FIREICEBAR
	.word ObjInit_Freezie	; Object $91 - OBJ_FREEZIE
	.word ObjInit_Swoosh	; Object $92 - OBJ_SWOOSH
	.word ObjInit_IntroSequence	; Object $93 - OBJ_INTRO
	.word ObjInit_Dimmer		; Object $94 - OBJ_DIMMER
	.word ObjInit_DoNothing		; Object $95 - OBJ_BIGQBLOCK_MUSHROOM
	.word ObjInit_DoNothing		; Object $96 - OBJ_BIGQBLOCK_FIREFLOWER
	.word ObjInit_DoNothing		; Object $97 - OBJ_BIGQBLOCK_SUPERLEAF
	.word ObjInit_DoNothing		; Object $98 - OBJ_BIGQBLOCK_TANOOKI
	.word ObjInit_DoNothing		; Object $99 - OBJ_BIGQBLOCK_FROG
	.word ObjInit_DoNothing		; Object $9A - OBJ_BIGQBLOCK_HAMMER
	.word ObjInit_DoNothing		; Object $9B
	.word ObjInit_DoNothing		; Object $9C
	.word ObjInit_DoNothing	; Object $9D - OBJ_FIREJET_UPWARD
	.word ObjInit_Podobo		; Object $9E - OBJ_Podobo
	.word ObjInit_DoNothing	; Object $9F - OBJ_PARABEETLE



    .org ObjectGroup_NormalJumpTable
;****************************** OBJECT GAME LOOP ******************************
	.word ObjNorm_AngryThwomp	; Object $8C - OBJ_THWOMPRIGHTSLIDE
	.word ObjNorm_DoNothing	; Object $8D - OBJ_THWOMPUPDOWN
	.word ObjNorm_DoNothing	; Object $8E - OBJ_THWOMPDIAGONALUL
	.word ObjNorm_DoNothing	; Object $8F - OBJ_THWOMPDIAGONALDL
	.word ObjNorm_ProjectileBar	; Object $90 - OBJ_FIREICEBAR
	.word ObjNorm_Freezie	; Object $91 - OBJ_FREEZIE
	.word ObjNorm_Swoosh	; Object $92 - OBJ_SWOOSH
	.word ObjNorm_IntroSequence	; Object $93 - OBJ_INTRO
	.word ObjNorm_Dimmer		; Object $94 - OBJ_DIMMER
	.word ObjNorm_DoNothing		; Object $95 - OBJ_BIGQBLOCK_MUSHROOM
	.word ObjNorm_DoNothing		; Object $96 - OBJ_BIGQBLOCK_FIREFLOWER
	.word ObjNorm_DoNothing		; Object $97 - OBJ_BIGQBLOCK_SUPERLEAF
	.word ObjNorm_DoNothing		; Object $98 - OBJ_BIGQBLOCK_TANOOKI
	.word ObjNorm_DoNothing		; Object $99 - OBJ_BIGQBLOCK_FROG
	.word ObjNorm_DoNothing		; Object $9A - OBJ_BIGQBLOCK_HAMMER
	.word ObjNorm_DoNothing		; Object $9B
	.word ObjNorm_DoNothing		; Object $9C
	.word ObjNorm_DoNothing		; Object $9D - OBJ_FIREJET_UPWARD
	.word ObjNorm_Podobo		; Object $9E - OBJ_Podobo
	.word ObjNorm_DoNothing	; Object $9F - OBJ_PARABEETLE

    .org ObjectGroup_CollideJumpTable
;****************************** OBJECT PLAYER INTERACTION ******************************
	.word $0000					; Object $8C - OBJ_THWOMPRIGHTSLIDE
	.word $0000					; Object $8D - OBJ_THWOMPUPDOWN
	.word $0000					; Object $8E - OBJ_THWOMPDIAGONALUL
	.word $0000					; Object $8F - OBJ_THWOMPDIAGONALDL
	.word ObjHit_DoNothing	; Object $90 - OBJ_FIREICEBAR
	.word ObjHit_Freezie	; Object $91 - OBJ_FREEZIE
	.word ObjHit_DoNothing	; Object $92 - OBJ_SWOOSH
	.word ObjHit_DoNothing	; Object $93 - OBJ_INTRO
	.word ObjHit_DoNothing	; Object $94 - OBJ_BIGQBLOCK_3UP
	.word ObjHit_DoNothing	; Object $95 - OBJ_BIGQBLOCK_MUSHROOM
	.word ObjHit_DoNothing	; Object $96 - OBJ_BIGQBLOCK_FIREFLOWER
	.word ObjHit_DoNothing	; Object $97 - OBJ_BIGQBLOCK_SUPERLEAF
	.word ObjHit_DoNothing	; Object $98 - OBJ_BIGQBLOCK_TANOOKI
	.word ObjHit_DoNothing	; Object $99 - OBJ_BIGQBLOCK_FROG
	.word ObjHit_DoNothing	; Object $9A - OBJ_BIGQBLOCK_HAMMER
	.word ObjHit_DoNothing	; Object $9B
	.word ObjHit_DoNothing	; Object $9C
	.word ObjHit_DoNothing	; Object $9D - OBJ_FIREJET_UPWARD
	.word ObjHit_DoNothing	; Object $9E - OBJ_Podobo
	.word ObjHit_DoNothing	; Object $9F - OBJ_PARABEETLE

    .org ObjectGroup_PatTableSel
;****************************** OBJECT PALETTE/SIZE ******************************
	.byte OA1_PAL2 | OA1_HEIGHT32 | OA1_WIDTH48	; Object $8C - OBJ_THWOMPRIGHTSLIDE
	.byte OA1_PAL2 | OA1_HEIGHT32 | OA1_WIDTH48	; Object $8D - OBJ_THWOMPUPDOWN
	.byte OA1_PAL2 | OA1_HEIGHT32 | OA1_WIDTH48	; Object $8E - OBJ_THWOMPDIAGONALUL
	.byte OA1_PAL2 | OA1_HEIGHT32 | OA1_WIDTH48	; Object $8F - OBJ_THWOMPDIAGONALDL
	.byte OA1_PAL1 | OA1_WIDTH8 | OA1_WIDTH8	; Object $90 - OBJ_FIREICEBAR
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $91 - OBJ_FREEZIE
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $92 - OBJ_SWOOSH
	.byte OA1_PAL3 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $93 - OBJ_INTRO
	.byte OA1_PAL0 | OA1_HEIGHT32 | OA1_WIDTH32	; Object $94 - OBJ_BIGQBLOCK_3UP
	.byte OA1_PAL0 | OA1_HEIGHT32 | OA1_WIDTH32	; Object $95 - OBJ_BIGQBLOCK_MUSHROOM
	.byte OA1_PAL0 | OA1_HEIGHT32 | OA1_WIDTH32	; Object $96 - OBJ_BIGQBLOCK_FIREFLOWER
	.byte OA1_PAL0 | OA1_HEIGHT32 | OA1_WIDTH32	; Object $97 - OBJ_BIGQBLOCK_SUPERLEAF
	.byte OA1_PAL0 | OA1_HEIGHT32 | OA1_WIDTH32	; Object $98 - OBJ_BIGQBLOCK_TANOOKI
	.byte OA1_PAL0 | OA1_HEIGHT32 | OA1_WIDTH32	; Object $99 - OBJ_BIGQBLOCK_FROG
	.byte OA1_PAL0 | OA1_HEIGHT32 | OA1_WIDTH32	; Object $9A - OBJ_BIGQBLOCK_HAMMER
	.byte OA1_PAL0 | OA1_HEIGHT16 | OA1_WIDTH8	; Object $9B
	.byte OA1_PAL0 | OA1_HEIGHT16 | OA1_WIDTH8	; Object $9C
	.byte OA1_PAL1 | OA1_HEIGHT48 | OA1_WIDTH16	; Object $9D - OBJ_FIREJET_UPWARD
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $9E - OBJ_Podobo
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $9F - OBJ_PARABEETLE

    .org ObjectGroup_PatTableSel
;****************************** OBJECT PATTERN TABLE ******************************
	.byte OPTS_SETPT5 | $12	; Object $8C - OBJ_THWOMPRIGHTSLIDE
	.byte OPTS_SETPT5 | $12	; Object $8D - OBJ_THWOMPUPDOWN
	.byte OPTS_SETPT5 | $12	; Object $8E - OBJ_THWOMPDIAGONALUL
	.byte OPTS_SETPT5 | $12	; Object $8F - OBJ_THWOMPDIAGONALDL
    .byte OPTS_NOCHANGE	; Object $90 - OBJ_FIREICEBAR
	.byte OPTS_SETPT5 | $33	; Object $91 - OBJ_FREEZIE
	.byte OPTS_SETPT5 | $33	; Object $92 - OBJ_SWOOSH
	.byte OPTS_SETPT5 | $36	; Object $93 - OBJ_INTRO
	.byte OPTS_NOCHANGE ; Object $94 - OBJ_BIGQBLOCK_3UP
	.byte OPTS_SETPT5 | $4C	; Object $95 - OBJ_BIGQBLOCK_MUSHROOM
	.byte OPTS_SETPT5 | $4C	; Object $96 - OBJ_BIGQBLOCK_FIREFLOWER
	.byte OPTS_SETPT5 | $4C	; Object $97 - OBJ_BIGQBLOCK_SUPERLEAF
	.byte OPTS_SETPT5 | $4C	; Object $98 - OBJ_BIGQBLOCK_TANOOKI
	.byte OPTS_SETPT5 | $4C	; Object $99 - OBJ_BIGQBLOCK_FROG
	.byte OPTS_SETPT5 | $4C	; Object $9A - OBJ_BIGQBLOCK_HAMMER
	.byte OPTS_NOCHANGE	; Object $9B
	.byte OPTS_NOCHANGE	; Object $9C
	.byte OPTS_SETPT6 | $37	; Object $9D - OBJ_FIREJET_UPWARD
	.byte OPTS_NOCHANGE	; Object $9E - OBJ_Podobo
	.byte OPTS_SETPT5 | $0E	; Object $9F - OBJ_PARABEETLE


	.org ObjectGroup_KillAction	
;****************************** OBJECT DEATH ROUTINE ******************************
	.byte KILLACT_NORMALANDKILLED	; Object $8C - OBJ_THWOMPRIGHTSLIDE
	.byte KILLACT_NORMALANDKILLED	; Object $8D - OBJ_THWOMPUPDOWN
	.byte KILLACT_NORMALANDKILLED	; Object $8E - OBJ_THWOMPDIAGONALUL
	.byte KILLACT_NORMALANDKILLED	; Object $8F - OBJ_THWOMPDIAGONALDL
	.byte KILLACT_STANDARD	; Object $90 - OBJ_FIREICEBAR
	.byte KILLACT_NORMALSTATE	; Object $91 - OBJ_FREEZIE
	.byte KILLACT_POOFDEATH	; Object $92 - OBJ_SWOOSH
	.byte KILLACT_STANDARD	; Object $93 - OBJ_INTRO
	.byte KILLACT_STANDARD	; Object $94 - OBJ_BIGQBLOCK_3UP
	.byte KILLACT_STANDARD	; Object $95 - OBJ_BIGQBLOCK_MUSHROOM
	.byte KILLACT_STANDARD	; Object $96 - OBJ_BIGQBLOCK_FIREFLOWER
	.byte KILLACT_STANDARD	; Object $97 - OBJ_BIGQBLOCK_SUPERLEAF
	.byte KILLACT_STANDARD	; Object $98 - OBJ_BIGQBLOCK_TANOOKI
	.byte KILLACT_STANDARD	; Object $99 - OBJ_BIGQBLOCK_FROG
	.byte KILLACT_STANDARD	; Object $9A - OBJ_BIGQBLOCK_HAMMER
	.byte KILLACT_STANDARD	; Object $9B
	.byte KILLACT_STANDARD	; Object $9C
	.byte KILLACT_STANDARD	; Object $9D - OBJ_FIREJET_UPWARD
	.byte KILLACT_POOFDEATH	; Object $9E - OBJ_Podobo
	.byte KILLACT_STANDARD	; Object $9F - OBJ_PARABEETLE



OG8_POff .func (\1 - ObjectGroup08_PatternSets)

	.org ObjectGroup_PatternStarts	; <-- help enforce this table *here*
;****************************** OBJECT FRAME TABLE ******************************
	.byte OG8_POff(ObjP8C), OG8_POff(ObjP8D), OG8_POff(ObjP8E), OG8_POff(ObjP8F)
	.byte OG8_POff(ObjP90), OG8_POff(ObjP91), OG8_POff(ObjP92), OG8_POff(ObjP93)
	.byte OG8_POff(ObjP94), OG8_POff(ObjP95), OG8_POff(ObjP96), OG8_POff(ObjP97)
	.byte OG8_POff(ObjP98), OG8_POff(ObjP99), OG8_POff(ObjP9A), OG8_POff(ObjP9B)
	.byte OG8_POff(ObjP9C), OG8_POff(ObjP9D), OG8_POff(ObjP9E), OG8_POff(ObjP9F)
	


	.org ObjectGroup_PatternSets	; <-- help enforce this table *here*
;****************************** OBJECT FRAMES DEFINITION ******************************    
ObjectGroup08_PatternSets:

ObjP8C:
ObjP8D:
ObjP8E:
ObjP8F:
ObjP90:
ObjP91:
	.byte $AD, $AF, $B1, $AF, $B5, $B7, $AD, $B3
ObjP92:
	.byte $A1, $A3
	.byte $A5, $A7
	.byte $81, $83
	.byte $85, $87
	.byte $85, $87
	.byte $81, $83
	.byte $A1, $A3
	.byte $A9, $AB

ObjP93:
	.byte $81, $83, $A1, $A3, $85, $87, $A5, $A7

ObjP94:
ObjP95:
ObjP96:
ObjP97:
ObjP98:
ObjP99:
ObjP9A:
ObjP9B:
ObjP9C:
ObjP9E:
ObjP9D:
ObjP9F:
	.byte $B1, $B3, $B5, $B7, $B1, $B3


ObjInit_ProjBar:
	LDA #BOUND8x16
	STA Objects_BoundBox, X
	
	LDA Objects_XZ, X
	ADD #$04
	STA Objects_XZ, X

	LDA Objects_Property, X
	AND #$01
	STA Objects_Data5, X

	LDA Objects_Property, X
	LSR A
	AND #01
	STA Objects_Data4, X

	LDA Objects_Property, X
	AND #$04
	BEQ Init_ProjBarRTS
	
	LDA #$40
	STA Objects_Data3, X

Init_ProjBarRTS:
	RTS

BarTiles:
	.byte $65, $59

BarPalette:
	.byte $01, $02

RadialTable:
	.byte 08, 16, 24, 32
	.byte 08, 15, 23, 31
	.byte 07, 14, 22, 29
	.byte 07, 13, 20, 26
	.byte 05, 11, 17, 23
	.byte 04, 07, 13, 17
	.byte 03, 06, 09, 12
	.byte 01, 03, 04, 06

RadialTableY:
	.byte 00, 00, 00, 00
	.byte -01, -03, -04, -06
	.byte -03, -06, -09, -12
	.byte -04, -07, -13, -17
	.byte -05, -11, -17, -23
	.byte -07, -13, -20, -26
	.byte -07, -14, -22, -29
	.byte -08, -15, -23, -31
	.byte -08, -16, -24, -32
	.byte -08, -15, -23, -31
	.byte -07, -14, -22, -29
	.byte -07, -13, -20, -26
	.byte -05, -11, -17, -23
	.byte -04, -07, -13, -17
	.byte -03, -06, -09, -12
	.byte -01, -03, -04, -06
	.byte 00, 00, 00, 00
	.byte 01, 03, 04, 06
	.byte 03, 06, 09, 12
	.byte 04, 07, 13, 17
	.byte 05, 11, 17, 23
	.byte 07, 13, 20, 26
	.byte 07, 14, 22, 29
	.byte 08, 15, 23, 31
	.byte 08, 16, 24, 32
	.byte 08, 15, 23, 31
	.byte 07, 14, 22, 29
	.byte 07, 13, 20, 26
	.byte 05, 11, 17, 23
	.byte 04, 07, 13, 17
	.byte 03, 06, 09, 12
	.byte 01, 03, 04, 06

ObjNorm_ProjectileBar:
	JSR Object_CalcBoundBox
	JSR Object_DeleteOffScreen

	LDA <Player_HaltGameZ
	BNE DoBarBar

	LDA Objects_Property, X
	AND #$01
	BEQ DecBar

	INC Objects_Data3, X
	JMP DoBarBar

DecBar:
	DEC Objects_Data3, X

DoBarBar:
	LDY #$08
	JSR Object_DetermineVerticallyOffScreen
	LDY #$08
	JSR Object_DetermineHorizontallyOffScreen

DoPBarDraw:
	LDA Objects_SpritesVerticallyOffScreen, X
	ORA Objects_SpritesHorizontallyOffScreen, X
	BEQ DrawPBar
	RTS

DrawPBar:
	LDA Objects_XZ, X
	STA DAIZ_TEMP1
	STA PBarHitTestX
	LDA Objects_YZ, X
	STA DAIZ_TEMP2
	STA PBarHitTestY
	JSR Object_CalcSpriteXY_NoHi
	LDY Object_SpriteRAMOffset, X
	LDA Objects_Data4, X
	TAX
	LDA BarTiles, X
	STA Sprite_RAM + 1, Y
	STA Sprite_RAM + 5, Y
	STA Sprite_RAM + 9, Y
	STA Sprite_RAM + 13, Y
	STA Sprite_RAM + 17, Y
	LDA BarPalette, X
	STA Sprite_RAM + 2, Y
	STA Sprite_RAM + 6, Y
	STA Sprite_RAM + 10, Y
	STA Sprite_RAM + 14, Y
	STA Sprite_RAM + 18, Y
	LDX <CurrentObjectIndexZ

	LDA Objects_Data3, X
	AND #$7C
	STA TempX
	LDX <CurrentObjectIndexZ

DrawProjectileBar:
	LDA <Objects_SpriteX, X
	STA Sprite_RAM + 3, Y
	STA TempA
	LDA <Objects_SpriteY, X
	STA Sprite_RAM , Y
	LDA #$03
	STA TempY
	
SetXOffset:
	LDX TempX
	LDA RadialTable, X
	BPL DoXOffsetAdd
	EOR #$FF
	ADD #$01
	STA <Temp_Var1
	LDA DAIZ_TEMP1
	SUB <Temp_Var1
	LDX TempY
	STA PBarHitTestX + 1, X
	LDA TempA
	SUB <Temp_Var1
	BCS StoreXOffset
	LDA #$00
	BEQ StoreXOffset

DoXOffsetAdd:
	PHA
	ADD DAIZ_TEMP1
	LDX TempY
	STA PBarHitTestX + 1, X
	PLA
	ADD TempA
	BCC StoreXOffset
	LDA #$00

StoreXOffset:
	STA Sprite_RAM +  7, Y
	INC TempX
	INY
	INY
	INY
	INY
	DEC TempY
	BPL SetXOffset

	LDA TempX
	SUB #$04
	STA TempX
	
	LDX <CurrentObjectIndexZ
	LDA <Objects_SpriteY, X
	LDY Object_SpriteRAMOffset, X
	STA Sprite_RAM , Y
	STA TempA
	LDA #$03
	STA TempY
	
SetYOffset:
	LDX TempX
	LDA RadialTableY, X
	BPL DoYOffsetAdd
	EOR #$FF
	ADD #$01
	STA <Temp_Var1
	LDA DAIZ_TEMP2
	SUB <Temp_Var1
	LDX TempY
	STA PBarHitTestY + 1, X
	LDA TempA
	SUB <Temp_Var1
	BCS StoreYOffset
	LDA #$F8
	BEQ StoreYOffset

DoYOffsetAdd:
	PHA
	ADD DAIZ_TEMP2
	LDX TempY
	STA PBarHitTestY + 1, X
	PLA
	ADD TempA
	BCC StoreYOffset
	LDA #$F8

StoreYOffset:
	STA Sprite_RAM +  4, Y
	INC TempX
	INY
	INY
	INY
	INY
	DEC TempY 
	BPL SetYOffset

	LDA TempX
	SUB #$04
	STA TempX
	LDX #$04

CheckColide:
	STX TempX
	JSR ProjectileBarCollide
	LDX TempX
	DEX
	BPL CheckColide
	LDX CurrentObjectIndexZ
	RTS

   
PObjYOff_PlayerSize:	.byte 18, 10	; Small vs not small
PObj_VLimit:	.byte $10, $16

ProjectileBarCollide:

	LDY #$00	 ; Y = 0 (small/ducking)

	LDA <Player_Suit
	BEQ P_PRG007_B7E4	 ; If Player is small, jump to PRG007_B7E4

	LDA Player_IsDucking
	BNE P_PRG007_B7E4	 ; If Player is ducking, jump to PRG007_B7E4

	INY		 ; Y = 1 (otherwise)

P_PRG007_B7E4:
	LDA PBarHitTestY,X		; Special object Y
	ADD #$08			; +8
	SUB <Player_Y			; Subtract Player Y
	SUB PObjYOff_PlayerSize,Y	; Subtract Player height offset
	CMP PObj_VLimit,Y
	BGE P_PRG007_B826	 	; If result >= SObj_VLimit, jump to PRG007_B843 (RTS)

	LDA PBarHitTestX,X		; Special object X
	ADD #$04			; +6
	SUB <Player_X			; Subtract Player X
	SBC #$00			; Carry?
	CMP #16
	BGE P_PRG007_B826	 	; If result >= 16, jump to PRG007_B843 (RTS)

P_PRG007_B805:
	LDA Player_FlashInv	; If Player is flashing from being hit ...
	ORA <Player_HaltGameZ	; ... if gameplay is halted ...
	ORA Player_IsDying	; ... Player is dying ...
	BEQ P_PRG007_B827	 	; ... jump to Player_Behind_En (RTS)

P_PRG007_B826:
	RTS		 ; Return

XKnockBacks: .byte $20, $E0, $E0, $20
YKnockBacks: .byte $E0, $20, $20, $E0

P_PRG007_B827:
	LDX <CurrentObjectIndexZ
	LDA Objects_Data4, X
	BEQ P_PRG007_B828
	JSR Object_YDistanceFromPlayer
	TYA
	ASL A
	ADD Objects_Data5, X
	TAY
	LDA XKnockBacks, Y
	STA <Player_XVel
	JSR Object_XDistanceFromPlayer
	TYA
	ASL A
	ADD Objects_Data5, X
	TAY
	LDA YKnockBacks, Y
	STA <Player_YVel 
	STA <Player_InAir
	JSR Player_Freeze
	LDX <CurrentObjectIndexZ
	PLA
	PLA
	RTS

P_PRG007_B828:
	JMP Player_GetHurt	 ; Hurt Player and don't come back!
 

ObjInit_Freezie:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #ATTR_ICEPROOF
	STA Objects_WeaponAttr, X

	LDA #(ATTR_WINDAFFECTS | ATTR_CARRYANDBUMP)
	STA Objects_BehaviorAttr, X

	LDA Objects_Property, X
	BNE Freezie_NotMoving

	LDA #$01
	STA Freezie_State, X

	JSR Object_MoveTowardsPlayer
	RTS

Freezie_NotMoving:
	CMP #$01
	BNE Freezie_HorzontalPipe

	LDA <Objects_XZ, X
	ADD #$08
	STA <Objects_XZ, X
	RTS

Freezie_HorzontalPipe:
	LDA <Objects_YZ, X
	SUB #$06
	STA <Objects_YZ, X

	LDA <Objects_YHiZ, X
	SBC #$00
	STA <Objects_YHiZ, X
	RTS

Freezie_Frame = Objects_Data1
Freezie_State = Objects_Data2
Freezie_NoYVel = Objects_Timer
Freezie_NoImpact = Objects_Data3

ObjNorm_Freezie:
	LDA <Player_HaltGameZ
	BEQ Freezie_Norm

	LDA Freezie_State, X
	BNE Freezie_JustDraw

	RTS

Freezie_JustDraw:
	JMP Freezie_Draw

Freezie_Norm:

	LDA Objects_State, X
	CMP #OBJSTATE_KILLED
	BNE Freezie_DoAction

	JMP Freezie_Die

Freezie_DoAction:
	JSR Object_DeleteOffScreen
	LDA Freezie_State, X
	JSR DynJump

	.word Freezie_Wait
	.word Freezie_Move

Freezie_Wait:
	JSR Object_CalcBoundBox
	JSR Object_XDistanceFromPlayer
	
	CMP #$28
	BCC Freezie_ComeOut

	RTS

Freezie_ComeOut:
	LDA Objects_Property, X
	JSR DynJump

	.word Freezie_PopOut
	.word Freezie_PopOut
	.word Freezie_SlideRight
	.word Freezie_SlideLeft

Freezie_PopOut:
	LDA #$C0
	STA Objects_YVelZ, X
	
	JSR	Object_MoveTowardsPlayer
	
	LDA #$10
	STA Freezie_NoImpact, X

	INC Freezie_State, X
	RTS

Freezie_SlideLeft:
	LDA #$F8
	BNE Freezie_SetMove

Freezie_SlideRight:
	LDA #$08

Freezie_SetMove:
	STA <Objects_XVelZ, X
	
	LDA #$20
	STA Freezie_NoImpact, X

	LDA #$20
	STA Freezie_NoYVel,X
	INC Freezie_State, X
	RTS

Freezie_Move:
	LDA Freezie_NoYVel, X
	STA NoGravity

FreezieMove0:
	JSR Object_Move
	JSR Object_FaceDirectionMoving
	JSR Object_CalcBoundBox
	JSR Object_InteractWithObjects
	JSR Object_InteractWithPlayer
	
	JSR Object_DetectTiles

	LDA Freezie_NoImpact, X
	BEQ Freezie_DetectWorld

	DEC Freezie_NoImpact, X
	BNE Freezie_Animate

Freezie_DetectWorld:
	JSR Object_InteractWithTiles
	
	LDA Object_VertTileProp, X
	AND #$F0
	CMP #TILE_PROP_WATER
	BEQ Freezie_FreezeWater

	CMP #(TILE_PROP_WATER | TILE_PROP_FOREGROUND)
	BNE Freezie_CheckImpact

Freezie_FreezeWater:
	
	LDA <Objects_XZ, X
	ADD #$08
	STA Block_DetectX

	LDA <Objects_XHiZ, X
	ADC #$00
	STA Block_DetectXHi

	LDA <Objects_YZ, X
	ADD #$18
	STA Block_DetectY

	LDA <Objects_YHiZ, X
	ADC #$00
	STA Block_DetectYHi
	
	LDA Object_VertTileValue, X
	EOR #$01

	JSR Object_ChangeBlock
	JSR Object_HitGround
	 
Freezie_CheckImpact:
	LDA <Objects_TilesDetectZ, X
	AND #(HIT_LEFTWALL | HIT_RIGHTWALL | HIT_CEILING)
	BEQ Freezie_Animate

	JMP Freezie_Die

Freezie_Animate:
	INC Freezie_Frame, X
	
	LDA Freezie_Frame, X
	LSR A
	LSR A 
	LSR A
	AND #$03
	STA Objects_Frame, X

Freezie_Draw:
	LDA Freezie_NoImpact, X
	BEQ Freezie_NoBehindBg

	LDA Objects_SpriteAttributes, X
	ORA #SPR_BEHINDBG
	STA Objects_SpriteAttributes, X

Freezie_NoBehindBg:
	JMP Object_Draw

FreezieThrowPlayerX:
	.byte $E0, $20

ObjHit_Freezie:
	JSR Player_Freeze
	JSR Object_XDistanceFromPlayer
	
	LDA FreezieThrowPlayerX, Y
	STA <Player_XVel
	
	LDA #$A0
	STA <Player_YVel
	STA <Player_InAir

Freezie_Die:
	LDY Objects_SpawnIdx,X
	
	LDA Level_ObjectsSpawned,Y
	AND #$7F
	STA Level_ObjectsSpawned,Y
	
	LDA #SND_LEVELCRUMBLE
	STA Sound_QLevel2

	JMP Object_BurstIce
ObjInit_Swoosh:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #(ATTR_PROJECTILEPROOF)
	STA Objects_WeaponAttr

	LDA #ATTR_BUMPNOKILL
	STA Objects_BoundBox, X

	LDA #$60
	STA Objects_Timer, X
	RTS


Swoosh_Pull:
	.byte $01, $FF

Swoosh_Push:
	.byte $FD, $03

Swoosh_Particles1:
	.byte $89, $8B, $8D, $8F

Swoosh_Particles2:
	.byte $8F, $8D, $8B, $89

Swoosh_Times:
	.byte $40, $60, $80, $A0

Swoosh_Frame = Objects_Data1
Swoosh_Action = Objects_Data2
Swoosh_Ticker = Objects_Data3
Swoosh_Direction = Objects_Data4

ObjNorm_Swoosh:
	LDA <Player_HaltGameZ
	BEQ Swoosh_Normal

	JMP Object_Draw

Swoosh_Normal:
	INC Swoosh_Ticker, X

	JSR Object_CalcBoundBox
	JSR Object_DeleteOffScreen
	JSR Object_RespondToTailAttack
	JSR Object_DetectPlayer

	BCC Swoosh_Normal1	 ; If collision occurred, jump to PRG000_D1C5

	JSR Object_DetermineContactKill

Swoosh_Normal1:

	LDA Swoosh_Action, X
	CMP #$03
	BEQ Swoosh_NoChase

	JSR Object_FacePlayer
	
	LDY #$00
	
	LDA Objects_Orientation, X
	BEQ Swoosh_StoreDirection

	INY

Swoosh_StoreDirection:
	TYA
	STA Swoosh_Direction, X

	LDA Objects_Property, X
	AND #$01
	BEQ Swoosh_NoChase
	
Swoosh_NoChase:

	LDA Swoosh_Action, X
	JSR DynJump

	.word Swoosh_Idle
	.word Swoosh_BreathIn
	.word Swoosh_Hold
	.word Swoosh_BreatheOut

Swoosh_Idle:
	INC Swoosh_Frame, X

	LDA Swoosh_Frame, X
	AND #$08
	LSR A
	LSR A
	LSR A
	STA Objects_Frame, X

	LDA Objects_Timer, X
	BNE Swoosh_IdleDone

	LDA #$00
	STA Objects_Frame, X
	INC Swoosh_Action, X

	LDA #$40
	STA Objects_Timer, X

Swoosh_IdleDone:
	JMP Object_Draw

Swoosh_BreathIn:
	
	JSR Object_YDistanceFromPlayer
	CMP #$30
	BCS Swoosh_SuckTimer

Swoosh_SuckIn2:
	JSR Object_XDistanceFromPlayer
	
	CMP #$10
	BCC Swoosh_SuckTimer

	CMP #$50
	BCS Swoosh_SuckTimer

	TYA
	CMP Swoosh_Direction, X
	BNE Swoosh_SuckTimer

	LDA <Player_XVel
	ADD Swoosh_Pull, Y
	STA <Player_XVel

Swoosh_SuckTimer:
	LDA Objects_Timer, X
	BNE Swoosh_SuckDraw
	
	INC Swoosh_Action, X
	
	LDA #$20
	STA Objects_Timer, X
	JMP Object_Draw

Swoosh_SuckDraw:
	LDA #$40
	SUB Objects_Timer, X
	
	LSR A
	LSR A
	LSR A
	LSR A
	LSR A

	ORA #$02
	STA Objects_Frame, X

	JSR Object_Draw

	LDA #$F8
	STA <Temp_Var1

	LDA Objects_Orientation, X
	BEQ Swoosh_SuckDraw1

	LDA #$10
	STA <Temp_Var1

Swoosh_SuckDraw1:
	LDA Sprite_RAMX, Y
	ADD <Temp_Var1
	STA Sprite_RAMX + 8, Y

	LDA #SPR_PAL1
	ORA Objects_Orientation, X
	STA Sprite_RAMAttr + 8, Y

	LDA Swoosh_Ticker, X
	AND #$0C
	
	LSR A
	LSR A
	TAX

	LDA Swoosh_Particles1, X
	STA Sprite_RAMTile + 8, Y
	
	LDA Sprite_RAMY, Y
	STA Sprite_RAMY + 8, Y

	RTS

Swoosh_Hold:
	LDA Objects_Timer, X
	BNE Swoosh_HoldDone
	
	LDA #$20
	STA Objects_Timer, X

	LDA #SND_LEVELAIRSHIP
	STA Sound_QLevel2

	INC Swoosh_Action, X

Swoosh_HoldDone:
	JMP Object_Draw


Swoosh_BreatheOut:
	LDA Swoosh_Ticker, X
	AND #$01
	BEQ Swoosh_BlowTimer

	JSR Object_YDistanceFromPlayer
	CMP #$30
	BCS Swoosh_BlowTimer

	JSR Object_XDistanceFromPlayer

	CMP #$70
	BCS Swoosh_BlowTimer

	TYA
	CMP Swoosh_Direction, X
	BNE Swoosh_BlowTimer
	
	LDA <Player_XVel
	CMP #$3C
	BCC Swoos_AddPush

	CMP #$C4
	BCC Swoosh_BlowTimer

Swoos_AddPush:
	ADD Swoosh_Push, Y
	STA <Player_XVel

Swoosh_BlowTimer:
	LDA Objects_Timer, X
	BNE Swoosh_BlowDraw
	
	LDA #$00
	STA Swoosh_Action, X
	
	LDA RandomN
	AND #$03
	TAY
	
	LDA Swoosh_Times, Y
	STA Objects_Timer, X

	JMP Object_Draw

Swoosh_BlowDraw:
	LDA #$40
	SUB Objects_Timer, X
	
	LSR A
	LSR A
	LSR A
	LSR A

	ORA #$04
	STA Objects_Frame, X

	JSR Object_Draw

	LDA #$F8
	STA <Temp_Var1

	LDA Objects_Orientation, X
	BEQ Swoosh_BlowDraw1

	LDA #$10
	STA <Temp_Var1

Swoosh_BlowDraw1:
	LDA Sprite_RAMX, Y
	ADD <Temp_Var1
	STA Sprite_RAMX + 8, Y

	LDA #SPR_PAL1
	ORA Objects_Orientation, X
	STA Sprite_RAMAttr + 8, Y

	LDA Swoosh_Ticker, X
	AND #$0C
	
	LSR A
	LSR A
	TAX

	LDA Swoosh_Particles2, X
	STA Sprite_RAMTile + 8, Y
	
	LDA Sprite_RAMY, Y
	STA Sprite_RAMY + 8, Y
	RTS

ObjInit_IntroSequence:
	LDA #$FF
	STA <Objects_XHiZ, X
	LDA #$F0
	STA <Objects_XZ, X
	LDA #$FF
	STA Objects_Timer, X
	LDA #$08
	STA <Objects_XVelZ, X
	LDA #$01
	STA Player_QueueSuit
	RTS

ObjNorm_IntroSequence:
	LDA Objects_Data4, X

	JSR DynJump

Messages:
	.word DrawBowserMessage
	.word IntroWalkToad
	.word ToadTalk
	.word ToadFollow
	.word ToadBye


DrawToad:
	LDA <Objects_XZ, X
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame, X
	
	JSR Object_FaceMovement
	JSR Object_ShakeAndCalcSprite
	LDX <CurrentObjectIndexZ
	LDA #SPR_BEHINDBG
	ORA Objects_SpriteAttributes, X
	STA Objects_SpriteAttributes, X
	JSR Object_Draw16x32
	RTS

BowserMessage1:
	.byte $8E, $8F
	.byte " TRICKED YOU, MARIO! YOU  "

BowserMessage2:
	.byte $9E, $9F
	.byte " WILL NEVER ESCAPE ME NOW!"

DrawBowserMessage:
	LDA #$01
	STA Player_HaltTick
	LDA Objects_Timer, X
	BNE DrawBowserMessage1
	INC Objects_Data4, X

DrawBowserMessage1:
	LDA #$80
	STA StatusBar_Mode
	STA Last_StatusBar_Mode
	LDA Objects_Data5, X
	TAX

DrawBowserMessage2:
	LDA BowserMessage1, X
	STA Status_Bar_Top , X
	LDA BowserMessage2, X
	STA Status_Bar_Bottom , X
	INX
	CPX #28
	BNE DrawBowserMessage2

	RTS

IntroWalkToad:
	LDA #$00
	STA StatusBar_Mode
	LDA #$01
	STA Player_HaltTick
	LDA <Objects_XZ, X
	CMP #$30
	BNE IntroWalkToad1

	INC Objects_Data4, X
	LDA #$FF
	STA Objects_Timer, X

IntroWalkToad1:
	LDA #$08
	INC NoGravity
	JSR Object_ApplyXVel
	JSR DrawToad
	RTS

ToadMessage1:
	.byte $8A, $8B
	.byte " MARIO! IT IS A TRAP! OH  "
	.byte $8A, $8B
	.byte " BOWSER FORCED ME TO BUILD"
	.byte $8A, $8B
	.byte " HE DOES NOT KNOW I BUILT "
	.byte $8A, $8B
	.byte " I WILL HELP YOU ESCAPE.  "

ToadMessage2:
	.byte $9A, $9B
	.byte " I GUESS I WAS TOO LATE..."
	.byte $9A, $9B
	.byte " THIS PART OF THE CASTLE. "
	.byte $9A, $9B
	.byte " A WAY FOR YOU TO ESCAPE  "
	.byte $9A, $9B
	.byte " GO THROUGH THE RIGHT WALL"

ToadTalkOffsets:
	.byte $00, $1C, $38, $54

ToadTalk:
	LDA #$01
	STA Player_HaltTick
	LDA #$80
	STA StatusBar_Mode
	STA Last_StatusBar_Mode

	LDA Objects_Data5, X
	TAX
	LDA ToadTalkOffsets, X
	TAX
	LDY #$00

ToadTalk1:
	LDA ToadMessage1, X
	STA Status_Bar_Top , Y
	LDA ToadMessage2, X
	STA Status_Bar_Bottom , Y
	INX
	INY
	CPY #$1C
	BNE ToadTalk1
	LDX <CurrentObjectIndexZ
	LDA Objects_Timer, X
	BNE ToadTalk2
	LDA #$FF
	STA Objects_Timer, X
	INC Objects_Data5, X
	LDA Objects_Data5, X
	CMP #$04
	BNE ToadTalk2
	
	INC Objects_Data4, X
	LDA #$00
	STA Objects_Data5, X

ToadTalk2:
	JMP DrawToad

ToadFollow:
	LDA <Player_HaltGameZ
	BNE ToadFollow2
	LDA #$40
	STA Air_Time
	LDA <Objects_XHiZ, X
	CMP #$0C
	BNE ToadFollow0
	LDA #$FF
	STA Objects_Timer, X
	INC Objects_Data4, X

ToadFollow0:
	LDA #$00
	STA StatusBar_Mode
	LDA <Player_XVel
	STA <Objects_XVelZ, X
	JSR Object_ApplyXVel
	LDA Player_EffectiveSuit
	BEQ ToadFollow2

	LDA Player_EffectiveSuit
	CMP #$0B
	BEQ ToadFollow3

	SUB #$02
	CMP Objects_Data5, X
	BNE ToadFollow1

	INC Objects_Data5, X

ToadFollow1:
	JSR ToadExplainText

ToadFollow2:
	LDX <CurrentObjectIndexZ
	JMP DrawToad

ToadFollow3:
	LDA #$08
	STA Objects_Data5, X
	BNE ToadFollow1

ToadExplain1:
	.byte $8A, $8B
	.byte " THE SUPER MUSHROOM SHOULD"
	.byte $8A, $8B
	.byte " USE B TO THROW FIREBALLS "
	.byte $8A, $8B
	.byte " USE B TO BREAK BRICKS AND"
	.byte $8A, $8B
	.byte " HOLD DOWN AND PRESS B TO "
	.byte $8A, $8B
	.byte " DUCK WHEN MOVING TO GO IN"
	.byte $8A, $8B
	.byte " USE B TO THROW HAMMERS   "
	.byte $8A, $8B
	.byte " USE B TO THROW ICEBALLS  "
	.byte $8A, $8B
	.byte " DOUBLE TAP B TO DASH AND "
	.byte $8A, $8B
	.byte " PRESS AGAINST A WALL MID "
	

ToadExplain2:
	.byte $9A, $9B
	.byte " BE FAMILIAR TO YOU.      "
	.byte $9A, $9B
	.byte " THAT CAN MELT ICE.       "
	.byte $9A, $9B
	.byte " DEFLECT PROJECTILES.     "
	.byte $9A, $9B
	.byte " BE INVINCIBLE TEMPORARILY"
	.byte $9A, $9B
	.byte " YOUR SHELL TO BUST BRICKS"
	.byte $9A, $9B
	.byte " TO BREAK BIRCKS AND STONE"
	.byte $9A, $9B
	.byte " TO FREEZE WATER AND FOES."
	.byte $9A, $9B
	.byte " BREAK TURN BLOCKS.       "
	.byte $9A, $9B
	.byte " AIR AND TAP A TO WALLJUMP"

ToadExplainOffsets:
	.byte $00, $1C, $38, $54, $70, $8C, $A8, $C4, $E0

ToadExplainText:
	LDA #$80
	STA StatusBar_Mode
	STA Last_StatusBar_Mode
	LDA Objects_Data5, X
	TAX
	LDA ToadExplainOffsets, X
	TAX
	LDY #$00

ToadExplainText1:
	LDA ToadExplain1, X
	STA Status_Bar_Top , Y
	LDA ToadExplain2, X
	STA Status_Bar_Bottom , Y
	INX
	INY
	CPY #$1C
	BNE ToadExplainText1
	RTS


ToadByeMsg1:
	.byte $8A, $8B
	.byte " USE THE PIPE TO ESCAPE. I"

ToadByeMsg2:
	.byte $9A, $9B
	.byte " MUST STAY BEHIND FOR NOW."

ToadBye:
	LDA Objects_Timer, X
	BNE ToadBye0
	LDA #$00
	STA StatusBar_Mode
	RTS


ToadBye0:
	LDA #$01
	STA Player_HaltTick 
	LDA #$80
	STA StatusBar_Mode
	STA Last_StatusBar_Mode
	LDX #$00

ToadBye1:
	LDA ToadByeMsg1, X
	STA Status_Bar_Top , X
	LDA ToadByeMsg2, X
	STA Status_Bar_Bottom , X
	INX
	CPX #$1C
	BNE ToadBye1
	RTS

ObjInit_Dimmer:
	LDA #$00
	STA Objects_Data4, X

	JMP Object_NoInteractions

ObjNorm_Dimmer:
	LDA <Counter_1
	AND #$03
	BNE FadeOutDone
	LDY #$07

DimmerFindBlocks:
	LDA SpinnerBlocksActive, Y
	BNE Dimmer_FadeIn
	DEY
	BPL DimmerFindBlocks
	JMP Dimmer_FadeOut

Dimmer_FadeOut:
	LDA Objects_Data4, X
	CMP #$04
	BEQ FadeOutDone
	INC Objects_Data4, X

	JMP Dimmer_Fade
FadeOutDone:
	RTS

Dimmer_FadeIn:
	LDA Objects_Data4, X
	BEQ FadeInDone
	DEC Objects_Data4, X
	JMP Dimmer_Fade

FadeInDone:
	RTS

Dimmer_Fade:
	LDA Objects_Data4, X
	ASL A
	ASL A
	ASL A
	ASL A
	STA TempA
	LDY #$0F

Dimmer_Fade2:
	LDA MasterPal_Data,Y	; Get this color
	SUB TempA	 	; Subtract 16 from it
	BPL Dimmer_Fade3	 	; If we didn't go below zero, jump to PRG026_AC55

	LDA #$0f	 	; Otherwise, set it to safe minimum

Dimmer_Fade3:
	STA Palette_Buffer,Y	; Update palette color
	DEY		 	; Y--
	BPL Dimmer_Fade2	 	; While Y >= 0, loop!

	STA Palette_Buffer + 16
	STA Palette_Buffer + 20
	STA Palette_Buffer + 24
	STA Palette_Buffer + 28
	; Commit palette fade
	LDA #$06
	STA <Graphics_Queue
	
	RTS

Podobo_Limit = Objects_Data3
Podobo_LimitHi = Objects_Data4
Podobo_Frame = Objects_Data1
Podobo_Timer = Objects_Data5
Podobo_BridgeBreak = Objects_Data6
Podobo_Hiding = Objects_Data7

Podobo_TileCheck:
	.byte $10, $F0
	.byte $00, $FF

Podobo_HeightLimits:
	.byte $2A, $D6
	.byte $00, $FF

Podobo_JumpYVel:
	.byte $C0, $40

ObjInit_Podobo:
	LDA #(ATTR_FIREPROOF | ATTR_HAMMERPROOF | ATTR_NINJAPROOF | ATTR_TAILPROOF | ATTR_DASHPROOF | ATTR_STOMPPROOF)
	STA Objects_WeaponAttr, X

	LDA #(ATTR_SHELLPROOF | ATTR_NOICE )
	STA Objects_BehaviorAttr, X

	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #$01
	STA Objects_Health, X

	LDA Objects_Property, X
	BEQ ObjInit_Podobo1

	LDA #$0A
	STA PatTable_BankSel+4

ObjInit_Podobo1:
	LDY #$00

	LDA Objects_Property, X
	AND #$02
	BEQ ObjInit_Podobo2

	INY

ObjInit_Podobo2:
	LDA <Objects_YZ,X
	ADD Podobo_HeightLimits, Y
	STA Podobo_Limit,X

	LDA <Objects_YHiZ,X
	ADC Podobo_HeightLimits + 2, Y
	STA Podobo_LimitHi,X

	LDA <Objects_XZ, X
	STA Tile_DetectionX

	LDA <Objects_XHiZ, X
	STA Tile_DetectionXHi

	LDA <Objects_YZ, X
	STA Tile_DetectionY

	LDA <Objects_YHiZ, X
	STA Tile_DetectionYHi

	LDA Objects_Property, X
	AND #$02
	LSR A
	STA TempA

Podob_NextTileCheck:
	LDY TempA
	LDA Tile_DetectionY
	ADD Podobo_TileCheck, Y
	STA Tile_DetectionY

	LDA Tile_DetectionYHi
	ADC Podobo_TileCheck + 2, Y
	STA Tile_DetectionYHi

	JSR Object_DetectTile
	AND #TILE_PROP_WATER
	BEQ Podob_NextTileCheck

	LDA Tile_DetectionY
	STA <Objects_YZ, X

	LDA Tile_DetectionYHi
	STA <Objects_YHiZ, X

	LDA #$40
	STA Objects_Timer, X

	LDA Podobo_JumpYVel, Y
	STA <Objects_YVelZ, X
	STA Podobo_Hiding, X

	LDA #$01
	STA Objects_InWater, X

	RTS		 ; Return

ObjNorm_Podobo:
	LDA <Player_HaltGameZ
	BEQ Podobo_Norm

	JMP Podobo_Draw

Podobo_Norm:
	
	JSR Object_DeleteOffScreenRange

	LDA Objects_Timer,X
	BEQ Podobo_Move	 ; If timer expired, jump to PRG005_A259

Podobo_Hide:
	RTS

Podobo_Move:
	LDA Podobo_Hiding, X
	BEQ Podobo_KeepMoving

	JSR Object_XDistanceFromPlayer
	CMP #$60
	BCS Podobo_MoveDone
	
	LDA #$00
	STA Podobo_Hiding, X

Podobo_KeepMoving:
	LDA Objects_Property, X
	AND #$02
	BNE Podobo_ReverseMove

	LDA <Objects_YVelZ, X
	BPL Podobo_MoveGravity

	LDA <Objects_YZ, X
	SUB Podobo_Limit, X

	LDA <Objects_YHiZ, X
	SBC Podobo_LimitHi, X
	BCC Podobo_MoveGravity

	LDA #$C0
	STA <Objects_YVelZ, X
	BNE Podobo_MoveGravity

Podobo_ReverseMove:
	INC Reverse_Gravity

	LDA <Objects_YVelZ, X
	BMI Podobo_MoveGravity

	LDA <Objects_YZ, X
	SUB Podobo_Limit, X

	LDA <Objects_YHiZ, X
	SBC Podobo_LimitHi, X
	BCS Podobo_MoveGravity

	LDA #$40
	STA <Objects_YVelZ, X

Podobo_MoveGravity:
	JSR Object_Move

Podobo_MoveDone:
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat
	JSR Object_DetectTiles
	JSR Object_CheckForeground

	LDA Object_VertTileProp, X
	CMP #(TILE_PROP_SOLID_TOP | TILE_PROP_ENEMYSOLID)
	BEQ Podobo_DoBridgeBreak

	CMP #(TILE_PROP_SOLID_ALL | TILE_PROP_ENEMYSOLID)
	BNE Podobo_NoBridgeBreak

Podobo_DoBridgeBreak:
	LDA #$03
	STA Podobo_BridgeBreak, X

Podobo_NoBridgeBreak:
	JSR Podobo_BreakBridges

	LDA Objects_Property, X
	AND #$02
	BEQ Podobo_CheckLavaNorm

	LDA <Objects_YVelZ, X
	BPL Podobo_Animate

	LDA <Objects_YZ, X
	AND #$0F
	CMP #$05
	BCS Podobo_Animate
	BCC Podobo_CheckLava

Podobo_CheckLavaNorm:
	LDA <Objects_YVelZ, X
	BMI Podobo_Animate

	LDA <Objects_YZ, X
	AND #$0F
	CMP #$0B
	BCC Podobo_Animate

Podobo_CheckLava:
	LDA Object_BodyTileProp, X
	CMP #(TILE_PROP_WATER | TILE_PROP_HARMFUL)
	BEQ Podobo_Pause

	CMP #(TILE_PROP_FOREGROUND |TILE_PROP_WATER | TILE_PROP_HARMFUL)
	BNE Podobo_Animate

Podobo_Pause:

	LDA #$40
	STA Objects_Timer, X

	LDY #$00

	LDA Objects_Property, X
	AND #$02
	BEQ Podobo_NextYVel

	INY

Podobo_NextYVel:
	LDA Podobo_JumpYVel, Y
	STA <Objects_YVelZ, X
	STA Podobo_Hiding, X

Podobo_Animate:
	; Frame loop 0-2
	INC Podobo_Frame, X
	LDA Podobo_Frame, X
	LSR A
	LSR A
	LSR A
	AND #$03
	CMP #$03
	BCC Podobo_StoreFrame

	LDA #$00
	STA Podobo_Frame, X

Podobo_StoreFrame:
	STA Objects_Frame, X


	LDA <Objects_YVelZ, X
	BPL Podobo_Flip

	LDA #$00
	STA Objects_Orientation, X
	BEQ Podobo_Draw

Podobo_Flip:

	LDA #SPR_VFLIP
	STA Objects_Orientation, X
	BNE Podobo_Draw
	
Podobo_Draw:
	LDA Objects_Timer, X
	ORA Podobo_Hiding, X
	BEQ Podobo_Draw1

	RTS

Podobo_Draw1:
	JMP Object_DrawMirrored

Podobo_BridgeOffsets:
	.byte $00, $18, $F8, $08
	.byte $00, $00, $FF, $00

Podobo_BreakBridges:
	LDY Podobo_BridgeBreak, X
	BEQ Podobo_BreakBridgesRTS

	LDA Block_NeedsUpdate
	BNE Podobo_BreakBridgesRTS

	DEC Podobo_BridgeBreak, X

	LDA <Objects_XZ , X
	ADD Podobo_BridgeOffsets, Y
	STA Tile_DetectionX

	LDA <Objects_XHiZ , X
	ADC Podobo_BridgeOffsets + 4, Y
	STA Tile_DetectionXHi

	LDA <Objects_YZ, X
	STA Tile_DetectionY

	LDA <Objects_YHiZ, X
	STA Tile_DetectionYHi

	JSR Object_DetectTile
	CMP #(TILE_PROP_SOLID_TOP | TILE_PROP_ENEMYSOLID)
	BNE Podobo_BreakBridgesRTS

	TYA
	AND #$C0
	ORA #$3F
	
	JSR Object_ChangeBlock

	LDA Objects_SpritesHorizontallyOffScreen, X
	ORA Objects_SpritesVerticallyOffScreen, X
	BNE Podobo_BreakBridgesRTS

	LDA Tile_DetectionX
	STA Debris_X

	LDA Tile_DetectionY
	STA Debris_Y

	JSR Common_MakeBricks

Podobo_BreakBridgesRTS:
	RTS
	
	
    .org ObjectGroup_InitJumpTable
;****************************** OBJECT INITIALIZATION ******************************
    .word ObjInit_PumpkinFree	; Object $A0 - OBJ_PUMPKINFREE
	.word ObjInit_DoNothing	; Object $A1 - OBJ_PUMPKINFREE_FLIPPED
	.word ObjInit_Piranha	; Object $A2 - OBJ_PIRANHA
	.word ObjInit_Piranha_Aggressive	; Object $A3 - OBJ_PIRANHA_AGGRESSIVE
	.word ObjInit_Pumpkin	; Object $A4 - OBJ_PUMPKINPLANT
	.word ObjInit_DoNothing	; Object $A5 - OBJ_PUMPKINPLANT_HOPPER
	.word ObjInit_DoNothing	; Object $A6 - OBJ_VENUSFIRETRAP
	.word ObjInit_DoNothing	; Object $A7 - OBJ_VENUSFIRETRAP_CEIL
	.word ObjInit_DoNothing		; Object $A8 - OBJ_OilTRAP
	.word ObjInit_DoNothing		; Object $A9 - OBJ_OilTRAP_CEIL
	.word ObjInit_DoNothing		; Object $AA - OBJ_AIRSHIPPROP
	.word ObjInit_DoNothing	; Object $AB (doesn't really work, and the "normal" routine is even weirder)
	.word ObjInit_DoNothing	; Object $AC - OBJ_FIREJET_LEFT
	.word ObjInit_DoNothing	; Object $AD - OBJ_ROCKYWRENCH
	.word ObjInit_DoNothing		; Object $AE - OBJ_BOLTLIFT
	.word ObjInit_Sun		; Object $AF - OBJ_ENEMYSUN
	.word ObjInit_DoNothing	; Object $B0 - OBJ_BIGCANNONBALL
	.word ObjInit_DoNothing	; Object $B1 - OBJ_FIREJET_RIGHT
	.word ObjInit_DoNothing	; Object $B2 - OBJ_FIREJET_UPSIDEDOWN
	.word ObjInit_Stars		; Object $B3 

    .org ObjectGroup_NormalJumpTable
;****************************** OBJECT GAME LOOP ******************************
    .word ObjNorm_PumpkinFree		; Object $A0 - OBJ_PUMPKINFREE
	.word ObjNorm_PumpkinFree		; Object $A1 - OBJ_PUMPKINFREE_FLIPPED
	.word ObjNorm_Piranha		; Object $A2 - OBJ_REDPIRANHA
	.word ObjNorm_Piranha		; Object $A3 - OBJ_PIRANHA_AGGRESSIVE
	.word ObjNorm_Pumpkin		; Object $A4 - OBJ_PUMPKINPLANT
	.word ObjNorm_DoNothing		; Object $A5 - OBJ_PUMPKINPLANT_HOPPER
	.word ObjNorm_DoNothing		; Object $A6 - OBJ_VENUSFIRETRAP
	.word ObjNorm_DoNothing		; Object $A7 - OBJ_VENUSFIRETRAP_CEIL
	.word ObjNorm_DoNothing	; Object $A8 - OBJ_OilTRAP
	.word ObjNorm_DoNothing	; Object $A9 - OBJ_OilTRAP_CEIL
	.word ObjNorm_DoNothing	; Object $AA - OBJ_AIRSHIPPROP
	.word ObjNorm_DoNothing	; Object $AB (this call doesn't make any sense!!)
	.word ObjNorm_DoNothing		; Object $AC - OBJ_FIREJET_LEFT
	.word ObjNorm_DoNothing	; Object $AD - OBJ_ROCKYWRENCH
	.word ObjNorm_DoNothing		; Object $AE - OBJ_BOLTLIFT
	.word ObjNorm_Sun		; Object $AF - OBJ_ENEMYSUN
	.word ObjNorm_DoNothing	; Object $B0 - OBJ_BIGCANNONBALL
	.word ObjNorm_DoNothing		; Object $B1 - OBJ_FIREJET_RIGHT
	.word ObjNorm_DoNothing		; Object $B2 - OBJ_FIREJET_UPSIDEDOWN
	.word ObjNorm_Stars		; Object $B3

    .org ObjectGroup_CollideJumpTable
;****************************** OBJECT PLAYER INTERACTION ******************************
	.word Player_GetHurt	; Object $A0 - OBJ_PUMPKINFREE
	.word ObjHit_DoNothing	; Object $A1 - OBJ_PUMPKINFREE_FLIPPED
	.word ObjHit_DoNothing	; Object $A2 - OBJ_REDPIRANHA
	.word ObjHit_DoNothing	; Object $A3 - OBJ_PIRANHA_AGGRESSIVE
	.word ObjHit_DoNothing	; Object $A4 - OBJ_PUMPKINPLANT
	.word ObjHit_DoNothing	; Object $A5 - OBJ_PUMPKINPLANT_HOPPER
	.word ObjHit_DoNothing	; Object $A6 - OBJ_VENUSFIRETRAP
	.word ObjHit_DoNothing	; Object $A7 - OBJ_VENUSFIRETRAP_CEIL
	.word ObjHit_DoNothing	; Object $A8 - OBJ_OilTRAP
	.word ObjHit_DoNothing	; Object $A9 - OBJ_OilTRAP_CEIL
	.word ObjHit_DoNothing	; Object $AA - OBJ_AIRSHIPPROP
	.word ObjHit_DoNothing	; Object $AB
	.word ObjHit_DoNothing	; Object $AC - OBJ_FIREJET_LEFT
	.word ObjHit_DoNothing	; Object $AD - OBJ_ROCKYWRENCH
	.word ObjHit_DoNothing	; Object $AE - OBJ_BOLTLIFT
	.word Player_GetHurt	; Object $AF - OBJ_ENEMYSUN
	.word $0000	; Object $B0 - OBJ_BIGCANNONBALL
	.word $0000	; Object $B1 - OBJ_FIREJET_RIGHT
	.word $0000	; Object $B2 - OBJ_FIREJET_UPSIDEDOWN
	.word $0000	; Object $B3 

    .org ObjectGroup_PatTableSel
;****************************** OBJECT PALETTE/SIZE ******************************
    .byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $A0 - OBJ_PUMPKINFREE
	.byte OA1_PAL2 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $A1 - OBJ_PUMPKINFREE_FLIPPED
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $A2 - OBJ_REDPIRANHA
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $A3 - OBJ_PIRANHA_AGGRESSIVE
	.byte OA1_PAL2 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $A4 - OBJ_PUMPKINPLANT
	.byte OA1_PAL2 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $A5 - OBJ_PUMPKINPLANT_HOPPER
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $A6 - OBJ_VENUSFIRETRAP
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $A7 - OBJ_VENUSFIRETRAP_CEIL
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $A8 - OBJ_OilTRAP
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $A9 - OBJ_OilTRAP_CEIL
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH8	; Object $AA - OBJ_AIRSHIPPROP
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH32	; Object $AB
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $AC - OBJ_FIREJET_LEFT
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $AD - OBJ_ROCKYWRENCH
	.byte OA1_PAL2 | OA1_HEIGHT32 | OA1_WIDTH32	; Object $AE - OBJ_BOLTLIFT
	.byte OA1_PAL3 | OA1_HEIGHT32 | OA1_WIDTH32	; Object $AF - OBJ_ENEMYSUN
	.byte OA1_PAL3 | OA1_HEIGHT32 | OA1_WIDTH32	; Object $B0 - OBJ_BIGCANNONBALL
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $B1 - OBJ_FIREJET_RIGHT
	.byte OA1_PAL1 | OA1_HEIGHT48 | OA1_WIDTH16	; Object $B2 - OBJ_FIREJET_UPSIDEDOWN
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $B3

    .org ObjectGroup_PatTableSel
;****************************** OBJECT PATTERN TABLE ******************************
    .byte OPTS_SETPT6 | $13	; Object $A0 - OBJ_PUMPKINFREE
	.byte OPTS_SETPT5 | $13	; Object $A1 - OBJ_PUMPKINFREE_FLIPPED
	.byte OPTS_SETPT6 | $4F	; Object $A2 - OBJ_REDPIRANHA
	.byte OPTS_SETPT6 | $4F	; Object $A3 - OBJ_PIRANHA_AGGRESSIVE
	.byte OPTS_SETPT6 | $13	; Object $A4 - OBJ_PUMPKINPLANT
	.byte OPTS_SETPT6 | $4F	; Object $A5 - OBJ_PUMPKINPLANT_HOPPER
	.byte OPTS_SETPT6 | $4F	; Object $A6 - OBJ_VENUSFIRETRAP
	.byte OPTS_SETPT6 | $4F	; Object $A7 - OBJ_VENUSFIRETRAP_CEIL
	.byte OPTS_SETPT6 | $4F	; Object $A8 - OBJ_OilTRAP
	.byte OPTS_SETPT6 | $4F	; Object $A9 - OBJ_OilTRAP_CEIL
	.byte OPTS_SETPT5 | $36	; Object $AA - OBJ_AIRSHIPPROP
	.byte OPTS_SETPT5 | $36	; Object $AB
	.byte OPTS_SETPT6 | $37	; Object $AC - OBJ_FIREJET_LEFT
	.byte OPTS_SETPT5 | $36	; Object $AD - OBJ_ROCKYWRENCH
	.byte OPTS_SETPT5 | $36	; Object $AE - OBJ_BOLTLIFT
	.byte OPTS_SETPT5 | $37	; Object $AF - OBJ_ENEMYSUN
	.byte OPTS_SETPT5 | $36	; Object $B0 - OBJ_BIGCANNONBALL
	.byte OPTS_SETPT6 | $37	; Object $B1 - OBJ_FIREJET_RIGHT
	.byte OPTS_SETPT6 | $37	; Object $B2 - OBJ_FIREJET_UPSIDEDOWN
	.byte OPTS_SETPT5 | $00	; Object $B3

	.org ObjectGroup_KillAction	
;****************************** OBJECT DEATH ROUTINE ******************************
	.byte KILLACT_POOFDEATH	; Object $A0 - OBJ_PUMPKINFREE
	.byte KILLACT_POOFDEATH	; Object $A1 - OBJ_PUMPKINFREE_FLIPPED
	.byte KILLACT_POOFDEATH	; Object $A2 - OBJ_REDPIRANHA
	.byte KILLACT_POOFDEATH	; Object $A3 - OBJ_PIRANHA_AGGRESSIVE
	.byte KILLACT_NORMALANDKILLED	; Object $A4 - OBJ_PUMPKINPLANT
	.byte KILLACT_POOFDEATH	; Object $A5 - OBJ_PUMPKINPLANT_HOPPER
	.byte KILLACT_POOFDEATH	; Object $A6 - OBJ_VENUSFIRETRAP
	.byte KILLACT_POOFDEATH	; Object $A7 - OBJ_VENUSFIRETRAP_CEIL
	.byte KILLACT_POOFDEATH	; Object $A8 - OBJ_OilTRAP
	.byte KILLACT_POOFDEATH	; Object $A9 - OBJ_OilTRAP_CEIL
	.byte KILLACT_STANDARD	; Object $AA - OBJ_AIRSHIPPROP
	.byte KILLACT_STANDARD	; Object $AB
	.byte KILLACT_STANDARD	; Object $AC - OBJ_FIREJET_LEFT
	.byte KILLACT_NORMALANDKILLED	; Object $AD - OBJ_ROCKYWRENCH
	.byte KILLACT_STANDARD	; Object $AE - OBJ_BOLTLIFT
	.byte KILLACT_NORMALANDKILLED	; Object $AF - OBJ_ENEMYSUN
	.byte KILLACT_NORMALANDKILLED	; Object $B0 - OBJ_BIGCANNONBALL
	.byte KILLACT_STANDARD	; Object $B1 - OBJ_FIREJET_RIGHT
	.byte KILLACT_STANDARD	; Object $B2 - OBJ_FIREJET_UPSIDEDOWN
	.byte KILLACT_NORMALSTATE	; Object $B3


OG9_POff .func (\1 - ObjectGroup09_PatternSets)

	.org ObjectGroup_PatternStarts	; <-- help enforce this table *here*
;****************************** OBJECT FRAME TABLE ******************************
    .byte OG9_POff(ObjPA0), OG9_POff(ObjPA1), OG9_POff(ObjPA2), OG9_POff(ObjPA3)
	.byte OG9_POff(ObjPA4), OG9_POff(ObjPA5), OG9_POff(ObjPA6), OG9_POff(ObjPA7)
	.byte OG9_POff(ObjPA8), OG9_POff(ObjPA9), OG9_POff(ObjPAA), OG9_POff(ObjPAB)
	.byte OG9_POff(ObjPAC), OG9_POff(ObjPAD), OG9_POff(ObjPAE), OG9_POff(ObjPAF)
	.byte OG9_POff(ObjPB0), OG9_POff(ObjPB1), OG9_POff(ObjPB2), OG9_POff(ObjPB3)


	.org ObjectGroup_PatternSets	; <-- help enforce this table *here*
;****************************** OBJECT FRAMES DEFINITION ******************************    
ObjectGroup09_PatternSets:
ObjPA0:
	.byte $F1, $F3, $F5, $F7, $E5, $E7, $E9, $EB

ObjPA1:
ObjPA2:
ObjPA3:
	.byte $E1, $E1, $E3, $E3, $E5, $E5, $E3, $E3
	.byte $F1, $F3, $E3, $E3, $F5, $F7, $E3, $E3

ObjPA4:
	.byte $E5, $E7, $E3, $E3, $E9, $EB, $E3, $E3
	.byte $F1, $F3, $E3, $E3, $F5, $F7, $E3, $E3

ObjPA5:
ObjPA6:
ObjPA7:
ObjPA8:
ObjPA9:
ObjPAA:
	.byte $A9, $71
ObjPAB:
	.byte $A5, $A7
ObjPAC:

ObjPAD:
	.byte $91, $93, $8D, $8F, $89, $8B, $B3, $B5, $97, $9B, $99, $99, $9B, $97, $99, $99

ObjPAE:
	.byte $81, $81, $83, $83, $85, $85, $87, $87	

ObjPAF:
	.byte $81, $83, $83, $81, $A1, $A3, $A3, $A1
	.byte $85, $87, $87, $85, $A5, $A7, $A7, $A5

ObjPB0:
	.byte $A5, $A7, $A5, $A7
	
ObjPB1:
	.byte $8D, $8D, $8F, $8F, $95, $95
ObjPB2:
	.byte $DD, $71, $DF, $71, $D9, $71, $DB, $71, $CD, $D3, $CF, $D5, $71, $71, $71, $71, $CB, $D1
	
ObjPB3:
	.byte $BD, $BD, $BB, $BB, $BD, $BD, $99, $99


PumpkinFree_Action = Objects_Data1
PumpkinFree_Frames = Objects_Data2

ObjInit_PumpkinFree:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #(ATTR_WINDAFFECTS)
	STA Objects_BehaviorAttr, X

	LDA <Objects_XZ, X
	ADD #$08
	STA <Objects_XZ, X

	JMP Object_CalcBoundBox

ObjNorm_PumpkinFree:
	LDA <Player_HaltGameZ
	BEQ PumpkinFree_Norm
	
	JMP PumpkinFree_Draw

PumpkinFree_Norm:

	LDA PumpkinFree_Action, X
	JSR DynJump

	.word PumpkinFree_Wait
	.word PumpkinFree_Attack

PumpkinFree_Wait:
	JSR Object_DeleteOffScreen
	JSR Object_XDistanceFromPlayer
	
	CMP #$28
	BCS PumpkinFree_WaitRTS

	LDA #$20
	STA Objects_Timer, X

	LDA #$C0
	STA <Objects_YVelZ, X

	INC PumpkinFree_Action, X

PumpkinFree_WaitRTS:
	RTS

PumpkinFree_Attack:
	JSR Object_DeleteOffScreen
	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat

	LDA Objects_Timer, X
	BNE PumpkinFree_Animate

	JSR Object_DetectTiles
	JSR Object_InteractWithTiles

	LDA Objects_PreviousTilesDetect, X
	AND #HIT_GROUND
	BNE PumpkinFree_Animate

	LDA Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ PumpkinFree_Animate

	JSR Object_MoveTowardsPlayerFast

	LDA #$C0
	STA <Objects_YVelZ, X
	
PumpkinFree_Animate:
	INC PumpkinFree_Frames, X
	LDA PumpkinFree_Frames, X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame, X

PumpkinFree_Draw:
	LDA <Objects_XVelZ, X
	BNE PumpkinFree_DrawNorm

	LDA Objects_Frame, X
	ORA #$02
	STA Objects_Frame, X

	LDA Objects_Orientation, X
	ORA #SPR_BEHINDBG
	STA Objects_Orientation, X

	JMP Object_Draw

PumpkinFree_DrawNorm:
	LDA Objects_Orientation, X
	AND #~SPR_BEHINDBG
	STA Objects_Orientation, X

	JMP Object_Draw    


ObjInit_Piranha:
	LDA #$06
	STA Objects_SpritesRequested,X

	LDA #ATTR_STOMPPROOF
	STA Objects_WeaponAttr, X

	LDA #BOUND16x32
	STA Objects_BoundBox, X

	LDA #$03
	STA Piranha_CurrentState, X

	LDA #$02
	STA Piranha_AttackData, X
	STA Objects_ExpPoints, X

	LDA Objects_Property, X
	LSR A
	TAY

	LDA Objects_Property, X
	AND #$01
	TAY
	LDA Piranha_Velocities, Y
	STA <Objects_YVelZ, X

	LDA Piranha_Orientation, Y
	STA Objects_Orientation, X

ObjInit_Piranha1:
	LDA Objects_Property, X
	LSR A
	TAY
	LDA Piranha_Palettes, Y
	STA Objects_SpriteAttributes, X

	LDA #$20
	STA Objects_Timer, X


	LDA <Objects_XZ, X
	ADD #$08
	STA <Objects_XZ, X

	LDA <Objects_YZ, X
	SUB #$01
	STA <Objects_YZ, X

	LDA <Objects_YHiZ, X
	SBC #$00
	STA <Objects_YHiZ, X
	STA Piranha_YHiBackup, X

	INC Piranha_CurrentFrame, X
	RTS

ObjInit_Piranha_Aggressive:
	JMP ObjInit_Piranha


Piranha_CurrentFrame = Objects_Data1
Piranha_CurrentState = Objects_Data3
Piranha_AttacksLeft	= Objects_Data5
Piranha_AttackData = Objects_Data6
Piranha_StateTimer = Objects_Timer
Piranha_YHiBackup = Objects_Data7
Plant_DrawStem = Objects_Data2

Piranha_YVel:
	.byte $F8, $08
	
Piranha_Orientation:
	.byte SPR_BEHINDBG, SPR_VFLIP | SPR_BEHINDBG

Piranha_Palettes:
	.byte SPR_PAL1, SPR_PAL1, SPR_PAL2, SPR_PAL1
	.byte SPR_PAL3, SPR_PAL3, SPR_PAL3, SPR_PAL3

Piranha_Facing:
	.byte $00, SPR_HFLIP

Piranha_Velocities:
	.byte $F0, $10

Piranha_AttackProjectiles:
	.byte $00, SOBJ_FIREBALL, SOBJ_ICEBALL, SOBJ_OIL
	.byte $00, SOBJ_FIREBALL, SOBJ_ICEBALL, SOBJ_OIL

Piranah_AttackNumbers:
	.byte $00, $00, $01, $01, $01, $01, $01, $01
	.byte $00, $00, $03, $03

ObjNorm_Piranha:
	
	LDA <Player_HaltGameZ
	BEQ ObjNorm_Piranha1

	JMP Plant_Draw

ObjNorm_Piranha1:
	JSR Object_DeleteOffScreen
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat
	
	JSR Object_YDistanceFromPlayer

	JSR Piranha_DoState

	LDA Objects_Property, X
	CMP #$02
	BCC Piranha_Animate

	JSR Object_XDistanceFromPlayer
	
	LDA Objects_Orientation, X
	AND #~SPR_HFLIP
	ORA Piranha_Facing, Y
	STA Objects_Orientation, X

	LDA Piranha_CurrentState, X
	CMP #$01
	BNE Piranha_Animate

	LDA #$03
	STA Piranha_CurrentFrame, X
	BNE Plant_Draw1

Piranha_Animate:
	INC Piranha_CurrentFrame, X
	LDA Piranha_CurrentFrame, X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame,X

Plant_Draw:
	LDA Objects_Property, X
	AND #$0F
	CMP #$02
	BCC Plant_Draw1

	LDA Objects_Frame,X
	ORA #$02
	STA Objects_Frame,X

Plant_Draw1:

	JSR Object_Draw16x32

	LDA #SPR_PAL2
	STA <Temp_Var1

	LDA Objects_ID, X
	CMP #OBJ_PIRANHA_AGGRESSIVE
	BNE Piranha_GreenVine

	LDA #SPR_PAL3
	STA <Temp_Var1

Piranha_GreenVine:
	LDY Object_SpriteRAMOffset, X

	LDA Sprite_RAM + 10, Y
	AND #(SPR_VFLIP | SPR_BEHINDBG)

	ORA <Temp_Var1
	STA Sprite_RAM + 10, Y
	
	ORA #SPR_HFLIP
	STA Sprite_RAM + 14, Y

	LDA Objects_Property, X
	CMP #$02
	BCS Plant_DrawUpsideDown

	LDA Sprite_RAM + 6, Y
	ORA #SPR_HFLIP
	STA Sprite_RAM + 6, Y

	LDA Objects_Orientation, X
	AND #SPR_HFLIP
	BEQ Plant_DrawRTS

	LDA Sprite_RAM + 6, Y
	EOR #SPR_HFLIP
	STA Sprite_RAM + 6, Y

	LDA Sprite_RAMX, Y
	PHA

	LDA Sprite_RAMX+4, Y
	STA Sprite_RAMX, Y

	PLA
	STA Sprite_RAMX+4, Y

Plant_DrawRTS:
	RTS

Piranha_HeadFlips:
	.byte SPR_VFLIP, $00

Plant_DrawUpsideDown:
	LDA Objects_State, X
	CMP #OBJSTATE_FROZEN
	BEQ Plant_DrawRTS

	LDA Objects_ID, X
	CMP #OBJ_PUMPKINPLANT
	BEQ Plant_DrawRTS

	JSR Object_YDistanceFromPlayer
	LDA Piranha_HeadFlips, Y
	STA TempA

	LDY Object_SpriteRAMOffset, X

	LDA Sprite_RAM + 2, Y
	AND #~SPR_VFLIP
	ORA TempA
	STA Sprite_RAM + 2, Y

	LDA Sprite_RAM + 6, Y
	AND #~SPR_VFLIP
	ORA TempA
	STA Sprite_RAM + 6, Y

Plant_DrawUpsideDown1:
	RTS

Piranha_DoState:
	LDA Piranha_CurrentState, X
	JSR DynJump

	.word Piranha_Move
	.word Piranha_Attack
	.word Piranha_Move
	.word Piranha_Wait

Piranha_Wait:
	LDA Piranha_YHiBackup, X
	BPL Piranha_NoDisplace


	LDA <Objects_YHiZ, X
	STA Piranha_YHiBackup, X

	LDA #$FE
	STA <Objects_YHiZ, X

Piranha_NoDisplace:
	LDA Objects_Timer, X
	BNE Piranha_Wait2

	LDA Objects_Property, X
	AND #$01
	BNE Piranha_Wait1  

	JSR Object_XDistanceFromPlayer
	CMP #$18
	BCC Piranha_Wait2

Piranha_Wait1:
	LDA #$00
	STA Piranha_CurrentState, X

	LDA #$00
	STA Plant_DrawStem, X

	LDA #$20
	STA Objects_Timer, X

	LDA Piranha_YHiBackup, X
	STA <Objects_YHiZ, X

	LDA #$FF
	STA Piranha_YHiBackup, X

Piranha_Wait2:
	RTS

Piranha_Move:
	JSR Object_ApplyYVel_NoGravity

	LDA Objects_Timer, X
	BNE Piranha_Move1

	INC Piranha_CurrentState, X

	LDA <Objects_YVelZ, X
	EOR #$FF
	ADD #$01
	STA <Objects_YVelZ, X

	LDA #$40
	STA Objects_Timer, X

	LDA Objects_ID, X
	CMP #OBJ_PIRANHA_AGGRESSIVE
	BNE Piranha_GetAttacks

	LDA #$FF
	BNE Piranha_SetAttacks

Piranha_GetAttacks:
	LDY Objects_Property, X
	LDA Piranah_AttackNumbers, Y

Piranha_SetAttacks:	
	STA Piranha_AttacksLeft, X

	RTS

Piranha_Move1:
	LDA <Objects_YVelZ, X
	BPL Piranha_Move3

	LDA <Objects_YZ, X
	AND #$0E
	CMP #$0E
	BNE Piranha_Move2

	LDA Plant_DrawStem, X
	EOR #$01
	STA Plant_DrawStem, X

Piranha_Move2:
	RTS

Piranha_Move3:
	LDA <Objects_YZ, X
	AND #$0F
	CMP #$0F
	BNE Piranha_Move4

	LDA Plant_DrawStem, X
	EOR #$01
	STA Plant_DrawStem, X

Piranha_Move4:
	RTS


Piranha_Attack:
	LDA Objects_Timer, X
	BEQ Piranha_Attack1

	CMP #$20
	BNE Piranha_Attack2

	LDA Piranha_AttacksLeft, X
	BEQ Piranha_Attack2

	LDA Objects_Property, X
	LSR A
	STA <Temp_Var15
	TAY

	LDA Piranha_AttackProjectiles, Y
	BEQ Piranha_Attack1

	LDA Objects_SpritesVerticallyOffScreen, X
	ORA Objects_SpritesHorizontallyOffScreen, X
	BNE Piranha_AttackReset

	LDA #$08
	STA <Proj_YOff

	LDA Objects_Orientation, X
	AND #SPR_VFLIP
	BEQ Piranha_NoYOff

	LDA #$18
	STA <Proj_YOff

Piranha_NoYOff:

	LDA #$08
	STA <Proj_XOff

	JSR Object_PrepProjectile
	BCC Piranha_Attack1

	JSR Piranha_Projectile
	DEC Piranha_AttacksLeft, X
	BEQ Piranha_NoMoreAttacks

Piranha_AttackReset:	
	LDA #$50
	STA Objects_Timer, X
	RTS

Piranha_NoMoreAttacks:
	LDA #$20
	STA Objects_Timer, X

	LDA #$01
	STA Plant_DrawStem, X
	RTS

Piranha_Attack1:
	LDA Objects_ID, X
	CMP #OBJ_PIRANHA_AGGRESSIVE
	BEQ Piranha_Attack2

	LDA #$20
	STA Objects_Timer, X
	
	INC Piranha_CurrentState, X

Piranha_Attack2:
	RTS

Pumpkin_AttackXVeloc:
	.byte  $20, $E0

Piranha_Projectile:
	LDX <Temp_Var15
	LDA Piranha_AttackProjectiles, X
	STA SpecialObj_ID, Y

	LDX <CurrentObjectIndexZ

	LDA Piranha_AttackData, X
	STA SpecialObj_Data1,Y

	LDA #SND_PLAYERFIRE
	ORA Sound_QPlayer
	STA Sound_QPlayer

	LDA Objects_Property, X
	CMP #$08
	BCC Piranha_FireStraight

	TYA
	PHA

	LDY #$00

	LDA Objects_Orientation, X
	AND #SPR_HFLIP
	BNE Pumpkin_FireRight

	INY

Pumpkin_FireRight:
	PLA
	TAX
	LDA Pumpkin_AttackXVeloc, Y
	STA SpecialObj_XVel, X

	LDA #$E0
	STA SpecialObj_YVel, X
	LDX <CurrentObjectIndexZ
	RTS

Piranha_FireStraight:	
	JSR Object_AimProjectile

Piranha_ProjectileRTS:
	RTS


ObjInit_Pumpkin:
	LDA Objects_Property, X
	ORA #$08
	STA Objects_Property, X

	JSR ObjInit_Piranha

	LDA #SPR_PAL3
	STA Objects_SpriteAttributes, X

	LDA #$00
	STA Piranha_AttackData, X
	RTS


ObjNorm_Pumpkin:
	JSR ObjNorm_Piranha
	
	LDA Objects_State, X
	CMP #OBJSTATE_KILLED
	BNE ObjNorm_PumpkinRTS

	LDA #OBJSTATE_NORMAL
	STA Objects_State, X

	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #$00
	STA Objects_Orientation, X

	LDA #OBJ_PUMPKINFREE
	STA Objects_ID, X

	LDA #$01
	STA PumpkinFree_Action, X

	LDA #$00
	STA Objects_Timer, X
	STA <Objects_XVelZ, X

	LDA #$E0
	STA <Objects_YVelZ, X

ObjNorm_PumpkinRTS:
	RTS	

ObjInit_Sun:
	LDA DayNight
	EOR #$FF
	STA Objects_Data4, X
	RTS		 ; Return

SunMoonPalette:
	.byte SPR_PAL3, SPR_PAL1

SunMoonDayEnemies:
	.byte OBJ_GOOMBA, OBJ_PARAGOOMBA, OBJ_PIRANHA, OBJ_GREENTROOPA,  OBJ_BEACHEDCHEEP, OBJ_PUMPKINFREE

SunMoonDayEnemyPals:
	.byte SPR_PAL3, SPR_PAL3, SPR_PAL1, SPR_PAL2, SPR_PAL1, SPR_PAL2

SunMoonDayEnemyStates:
	.byte OBJSTATE_INIT, OBJSTATE_NORMAL, OBJSTATE_NORMAL, OBJSTATE_INIT, OBJSTATE_INIT,  OBJSTATE_POOFDEATH

SunMoonNightEnemies:
	.byte OBJ_ZOMBIEGOOMBA, OBJ_PARAZOMBIEGOOMBA, OBJ_PUMPKINPLANT, OBJ_DRYBONES, OBJ_SPECTERCHEEP, OBJ_PUMPKINFREE

SunMoonNightEnemyPals:
	.byte SPR_PAL2, SPR_PAL3, SPR_PAL3, SPR_PAL2, SPR_PAL2, SPR_PAL2

SunMoonNightEnemyStates:
	.byte OBJSTATE_NORMAL, OBJSTATE_NORMAL, OBJSTATE_NORMAL, OBJSTATE_INIT, OBJSTATE_NORMAL, OBJSTATE_POOFDEATH

SunMoonGraphics:
	.byte $7C, $00, $7E
	
ObjNorm_Sun:
	
	LDA <Player_HaltGameZ
	BEQ ObjNorm_Sun0
	JMP DrawSunMoon

ObjNorm_Sun0:
	LDA DayNight
	BMI ObjNorm_Sun0_1

	JSR ToDayEnemies
	JMP ObjNorm_Sun0_2

ObjNorm_Sun0_1:
	JSR ToNightEnemies

ObjNorm_Sun0_2:
	JSR Object_InteractWithPlayer
	INC Game_Timer_Tick
	INC Game_Timer_Tick
	INC Game_Timer_Tick
	INC Game_Timer_Tick
	INC Game_Timer_Tick
	CLC
	LDA #$00
	STA TempA
	LDY DayNightTicker
	BEQ ObjNorm_Sun3

ObjNorm_Sun2:
	LDA #$14
	ADC TempA
	STA TempA
	DEY
	BNE ObjNorm_Sun2

ObjNorm_Sun3:
	LDY DayNightMicroTicker
	BEQ ObjNorm_Sun5

ObjNorm_Sun4:
	LDA #$02
	ADC TempA
	STA TempA
	DEY
	BNE ObjNorm_Sun4

ObjNorm_Sun5:
	LDA Game_Timer_Tick
	CMP #$1E
	BCC ObjNorm_Sun6

	INC TempA

ObjNorm_Sun6:
	LDA <Horz_Scroll
	SUB #$04
	STA <Temp_Var1
	LDA <Horz_Scroll_Hi
	SBC #$00
	STA <Temp_Var2
	LDA <Temp_Var1
	ADC TempA
	STA <Objects_XZ,X
	LDA #$00
	ADC <Temp_Var2
	STA <Objects_XHiZ, X

	LDA <Vert_Scroll
	ADD #$00
	STA <Objects_YZ, X
	LDA <Vert_Scroll_Hi
	ADC #$00
	STA <Objects_YHiZ, X

DrawSunMoon:
	LDY #$00
	LDA DayNight
	BEQ DrawSunMoon1

	INY

DrawSunMoon1:
	LDA SunMoonPalette, Y
	ORA #SPR_BEHINDBG
	STA Objects_SpriteAttributes, X
	TYA
	STA Objects_Frame, X

	LDA #LOW(ObjPAF)
	STA <Temp_Var10
	LDA #HIGH(ObjPAF)
	STA <Temp_Var11

	JMP Object_DrawGiantMirrored

ToNightEnemies:
	LDX #$04

ToNightEnemies1:
	LDA Objects_State, X
	BEQ ToNightEnemies4

	CMP #OBJSTATE_NORMAL
	BCC ToNightEnemies2

	CMP #OBJSTATE_KILLED
	BCS ToNightEnemies4


ToNightEnemies2:
	LDA #OBJSTATE_POOFDEATH
	STA Objects_State, X

	LDA #$1f
	STA Objects_Timer,X
	BNE ToNightEnemies4

ToNightEnemies3:
	LDY #$04

ToNightEnemies3_0:
	LDA Objects_ID, X
	CMP SunMoonDayEnemies, Y
	BNE ToNightEnemies3_1

	LDA SunMoonNightEnemies, Y
	STA Objects_ID, X

	LDA SunMoonNightEnemyStates, Y
	STA Objects_State, X

	LDA SunMoonNightEnemyPals, Y
	STA Objects_SpriteAttributes, X
	BNE ToNightEnemies4

ToNightEnemies3_1:
	DEY
	BPL ToNightEnemies3_0

ToNightEnemies4:
	DEX
	BPL ToNightEnemies1
	LDX <CurrentObjectIndexZ
	RTS

ToDayEnemies:
	LDX #$04

ToDayEnemies1:
	LDA Objects_State, X
	BEQ ToDayEnemies4

	CMP #OBJSTATE_NORMAL
	BCC ToDayEnemies2

	CMP #OBJSTATE_KILLED
	BCS ToDayEnemies4

ToDayEnemies2:
ToDayEnemies3:
	LDY #$05

ToDayEnemies3_0:
	LDA Objects_ID, X
	CMP SunMoonNightEnemies, Y
	BNE ToDayEnemies3_1

	LDA SunMoonDayEnemies, Y
	STA Objects_ID, X

	LDA SunMoonDayEnemyStates, Y
	STA Objects_State, X

	CMP #OBJSTATE_POOFDEATH
	BNE ToDayEnemies3_1_1

	LDA #$1F
	STA Objects_Timer, X

ToDayEnemies3_1_1:

	LDA SunMoonDayEnemyPals, Y
	STA Objects_SpriteAttributes, X 
	BNE ToDayEnemies4

ToDayEnemies3_1:
	DEY
	BPL ToDayEnemies3_0

ToDayEnemies4:
	DEX
	BPL ToDayEnemies1
	LDX <CurrentObjectIndexZ
	RTS    



ObjInit_Stars:
	JSR Object_NoInteractions
	
	LDA #$04
	STA Objects_SpritesRequested,X

	LDA #BOUND8x16
	STA Objects_BoundBox, X

	LDA #$10
	STA Objects_Timer2,X
	RTS		 ; Return

Stars_Timer = Objects_Data1

ObjNorm_Stars:
	LDA <Player_HaltGameZ
	BNE  StarsDraw
	
StarsDraw:
	LDA Objects_SpritesHorizontallyOffScreen, X
	ORA Objects_SpritesVerticallyOffScreen, X
	BEQ StarsDraw1

	RTS

StarsDraw1:
	JSR Object_ShakeAndCalcSprite
	
	LDX <CurrentObjectIndexZ
	LDA Stars_Timer, X
	CMP #$10
	BCC Stars_KeepDrawing

	JMP Object_Delete

Stars_KeepDrawing:
	STA <Temp_Var1
	
	INC Stars_Timer, X

	LDA #$17
	STA Sprite_RAMTile, Y
	STA Sprite_RAMTile + 4, Y
	STA Sprite_RAMTile + 8, Y
	STA Sprite_RAMTile + 12, Y

	LDA Objects_SpriteAttributes, X
	AND #SPR_PAL3
	STA Sprite_RAMAttr, Y
	STA Sprite_RAMAttr + 4, Y
	STA Sprite_RAMAttr + 8, Y
	STA Sprite_RAMAttr + 12, Y
	
	LDA Objects_SpriteX, X
	SUB <Temp_Var1
	BCC Stars_Star2
	
	STA Sprite_RAMX, Y 

	LDA Objects_SpriteY, X
	SUB <Temp_Var1
	BCC Stars_Star2

	STA Sprite_RAMY, Y

Stars_Star2:
	LDA Objects_SpriteX, X
	ADD <Temp_Var1
	BCS Stars_Star3
	
	STA Sprite_RAMX + 4, Y

	LDA Objects_SpriteY, X
	SUB <Temp_Var1
	BCC Stars_Star3

	STA Sprite_RAMY + 4, Y

Stars_Star3:
	LDA Objects_SpriteX, X
	SUB <Temp_Var1
	BCC Stars_Star4
	
	STA Sprite_RAMX + 8, Y

	LDA Objects_SpriteY, X
	ADD <Temp_Var1
	BCS Stars_Star4

	STA Sprite_RAMY + 8, Y

Stars_Star4:
	LDA Objects_SpriteX, X
	ADD <Temp_Var1
	BCS StarsDrawRTS
	
	STA Sprite_RAMX + 12, Y

	LDA Objects_SpriteY, X
	ADD <Temp_Var1
	BCS StarsDrawRTS

	STA Sprite_RAMY + 12, Y

StarsDrawRTS:
	RTS		