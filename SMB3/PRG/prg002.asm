; Super Mario Bros. 3 Full Disassembly by Southbird 2012
; For more info, see http://www.sonicepoch.com/sm3mix/
;
; PLEASE INCLUDE A CREDIT TO THE SOUTHBIRD DISASSEMBLY
; AND THE ABOVE LINK SOMEWHERE IN YOUR WORKS :)
;
; Original disassembler source generated by DCC6502 version v1.4
; (With labels, comments, and some syntax corrections for nesasm by Southbird)
; For more info about DCC6502, e-mail veilleux@ameth.org
;
; This source file last updated: 2012-04-02 22:20:56.965729406 -0500
; Distribution package date: Fri Apr  6 23:46:16 UTC 2012
;---------------------------------------------------------------------------
	; CAUTION!! ObjectGroup01 labels MUST appear at the 
	; address specified by the predefined constants!  I can't
	; verify this at the assembler level, so be careful!!
	; I'm using a ".org" directive to help enforce it, but
	; the assembler does not warn you if you overwrite and
	; instead will simply "stomp" on your code if you passed
	; that limit ... sorry, original coders assumed a constant
	; position on banks 1 - 5 and didn't use a LUT this time...

	; Object group $01 (i.e. objects starting at ID $24) State 1 jump table

	.org ObjectGroup_InitJumpTable	; <-- help enforce this table *here*
ObjectGroup01_InitJumpTable:
	.word ObjInit_WoodenPlatHorz	; Object $24 - OBJ_PLATFORM_HORZOSC
	.word ObjInit_WoodenPlatVert	; Object $25 - OBJ_PLATFORM_VERTOSC
	.word ObjInit_WoodenPlatFallGen	; Object $26 - OBJ_WOODENPLAT_RIDER
	.word ObjInit_WoodenPlatDiagonal1	; Object $27 - OBJ_PLATFORM_DIAG1OSC
	.word ObjInit_WoodenPlatDiagonal2	; Object $28 - OBJ_PLATFORM_DIAG2OSC
	.word ObjInit_Spike	; Object $29 - OBJ_SPIKE
	.word ObjInit_Spark		; Object $2A - OBJ_SPARK
	.word ObjInit_DiagonalPodobo		; Object $2B - OBJ_RICOCHET_PODOBO
	.word ObjInit_WoodenPlatCCW	; Object $2C - OBJ_PLATFORM_CLOCKOSC
	.word ObjInit_WoodenPlatCW	; Object $2D - OBJ_PLATFORM_CCLOCKOSC
	.word ObjInit_PirateBoo	; Object $2E - OBJ_PIRATEBOO
	.word ObjInit_Boo		; Object $2F - OBJ_BOO
	.word ObjInit_PacBoo	; Object $30 - OBJ_PACBOO
	.word ObjInit_Phanto		; Object $31 - OBJ_PHANTO
	.word ObjInit_PhantoFlip	; Object $32 - OBJ_PHANTO_FLIP
	.word ObjInit_DoNothing		; Object $33 - OBJ_NIPPER
	.word ObjInit_Toad		; Object $34 - OBJ_TOAD
	.word ObjInit_Lightning		; Object $35 - OBJ_LIGHTNINGBOLT
	.word ObjInit_PlatformFollow	; Object $36 - OBJ_PLATFORM_PATH
	.word ObjInit_DoNothing	; Object $37 - OBJ_PLATFORM_DIAG1OSCS
	.word ObjInit_DoNothing	; Object $38 - OBJ_PLATFORM_DIAG2OSCS
	.word ObjInit_DoNothing	; Object $39 - OBJ_PACBOOHOME
	.word ObjInit_DoNothing	; Object $3A - OBJ_JUMPCONTROL
	.word ObjInit_SpecterCheep	; Object $3B - OBJ_SPECTERCHEEP
	.word ObjInit_DoNothing	; Object $3C - OBJ_PLATFORM_PATHFOLLOW
	.word ObjInit_DoNothing		; Object $3D - OBJ_NIPPERFIREBREATHER
	.word ObjInit_DoNothing	; Object $3E - OBJ_PLATFORMFLOATS
	.word ObjInit_DryBones	; Object $3F - OBJ_DRYBONES
	.word ObjInit_PiranhaGrower	; Object $40 - OBJ_GOLDENPIRANHAGROWER
	.word ObjInit_GoldenPiranhaGrower		; Object $41 - OBJ_PIRANHAGROWER
	.word ObjInit_DryCheep	; Object $42 - OBJ_FLAMINGCHEEP
	.word ObjInit_BeachedCheep	; Object $43 - OBJ_BEACHEDCHEEP
	.word ObjInit_PlatformUnstable	; Object $44 - OBJ_PLATFORMUNSTABLE
	.word ObjInit_PWing		; Object $45 - OBJ_PWING
	.word ObjInit_Snifit	; Object $46 - OBJ_SNIFIT
	.word ObjInit_Birdo		; Object $47 - OBJ_BIRDO


	; Object group $01 (i.e. objects starting at ID $24) State 2 jump table

	.org ObjectGroup_NormalJumpTable	; <-- help enforce this table *here*
ObjectGroup01_NormalJumpTable:
	.word ObjNorm_PlatformOscillate		; Object $24 - OBJ_PLATFORM_HORZOSC
	.word ObjNorm_PlatformOscillate	; Object $25 - OBJ_PLATFORM_VERTOSC
	.word ObjNorm_WoodenPlatFallGen	; Object $26 - OBJ_WOODENPLAT_RIDER
	.word ObjNorm_PlatformOscillate	; Object $27 - OBJ_PLATFORM_DIAG1OSC
	.word ObjNorm_PlatformOscillate	; Object $28 - OBJ_PLATFORM_DIAG2OSC
	.word ObjNorm_Spike		; Object $29 - OBJ_SPIKE
	.word ObjNorm_Spark		; Object $2A - OBJ_SPARK
	.word ObjNorm_DiagonalPodobo	; Object $2B - OBJ_RICOCHET_PODOBO
	.word ObjNorm_PlatformOscillate		; Object $2C - OBJ_PLATFORM_CLOCKOSC
	.word ObjNorm_PlatformOscillate		; Object $2D - OBJ_PLATFORM_CCLOCKOSC
	.word ObjNorm_PirateBoo	; Object $2E - OBJ_PIRATEBOO
	.word ObjNorm_Boo		; Object $2F - OBJ_BOO
	.word ObjNorm_PacBoo	; Object $30 - OBJ_PACBOO
	.word ObjNorm_Phanto		; Object $31 - OBJ_PHANTO
	.word ObjNorm_Phanto		; Object $32 - OBJ_PHANTO_FLIP
	.word ObjNorm_Nipper		; Object $33 - OBJ_NIPPER
	.word ObjNorm_Toad		; Object $34 - OBJ_TOAD
	.word ObjNorm_Lightning	; Object $35 - OBJ_LIGHTNINGBOLT
	.word ObjNorm_PlatformFollow	; Object $36 - OBJ_PLATFORM_PATH
	.word ObjNorm_PlatformOscillate	; Object $37 - OBJ_PLATFORM_DIAG1OSCS
	.word ObjNorm_PlatformOscillate	; Object $38 - OBJ_PLATFORM_DIAG2OSCS
	.word ObjNorm_PacBooHome		; Object $39 - OBJ_PACBOOHOME
	.word ObjNorm_DoNothing	; Object $3A - OBJ_JUMPCONTROL
	.word ObjNorm_SpecterCheep	; Object $3B - OBJ_SPECTERCHEEP
	.word ObjNorm_PlatformUnstable	; Object $3C - OBJ_PLATFORM_PATHFOLLOW
	.word ObjNorm_NipperFireBreathe	; Object $3D - OBJ_NIPPERFIREBREATHER
	.word ObjNorm_PlatformFloat	; Object $3E - OBJ_PLATFORMFLOATS
	.word ObjNorm_DryBones		; Object $3F - OBJ_DRYBONES
	.word ObjNorm_PiranhaGrower	; Object $40 - OBJ_GOLDENPIRANHAGROWER
	.word ObjNorm_PiranhaGrower	; Object $41 - OBJ_PIRANHAGROWER
	.word ObjNorm_DryCheep	; Object $42 - OBJ_FLAMINGCHEEP
	.word ObjNorm_BeachedCheep	; Object $43 - OBJ_BEACHEDCHEEP
	.word ObjNorm_PlatformUnstable	; Object $44 - OBJ_PLATFORMUNSTABLE
	.word ObjNorm_PWing		; Object $45 - OBJ_PWING
	.word ObjNorm_Snifit	; Object $46 - OBJ_SNIFIT
	.word ObjNorm_Birdo	; Object $47 - OBJ_BIRDO


	; Object group $01 (i.e. objects starting at ID $24) Collision routine jump table (if calling Object_InteractWithPlayer;
	; Special values of OCSPECIAL_KILLCHANGETO or OCSPECIAL_HIGHSCORE can be used here instead otherwise.)

	.org ObjectGroup_CollideJumpTable	; <-- help enforce this table *here*
ObjectGroup01_CollideJumpTable:
	.word Platform_PlayerStand		; Object $24 - OBJ_PLATFORM_HORZOSC
	.word Platform_PlayerStand		; Object $25 - OBJ_PLATFORM_VERTOSC
	.word ObjHit_DoNothing		; Object $26 - OBJ_WOODENPLAT_RIDER
	.word Platform_PlayerStand		; Object $27 - OBJ_PLATFORM_DIAG1OSC
	.word Platform_PlayerStand		; Object $28 - OBJ_PLATFORM_DIAG2OSC
	.word ObjHit_DoNothing		; Object $29 - OBJ_SPIKE
	.word Player_GetHurt		; Object $2A - OBJ_SPARK
	.word Player_GetHurt	; Object $2B - OBJ_RICOCHET_PODOBO
	.word Platform_PlayerStand		; Object $2C - OBJ_PLATFORM_CLOCKOSC
	.word Platform_PlayerStand		; Object $2D - OBJ_PLATFORM_CCLOCKOSC
	.word PirateBoo_TakeCoins		; Object $2E - OBJ_PIRATEBOO
	.word Player_GetHurt		; Object $2F - OBJ_BOO
	.word Player_GetHurt		; Object $30 - OBJ_PACBOO
	.word Player_GetHurt		; Object $31 - OBJ_PHANTO
	.word Player_GetHurt		; Object $32 - OBJ_PHANTO_FLIP
	.word Player_GetHurt		; Object $33 - OBJ_NIPPER
	.word ObjHit_DoNothing		; Object $34 - OBJ_TOAD
	.word Player_GetHurt		; Object $35 - OBJ_LIGHTNINGBOLT
	.word Platform_PlayerStand		; Object $36 - OBJ_PLATFORM_PATH
	.word Platform_PlayerStand		; Object $37 - OBJ_PLATFORM_DIAG1OSCS
	.word Platform_PlayerStand		; Object $38 - OBJ_PLATFORM_DIAG2OSCS
	.word ObjHit_DoNothing		; Object $39 - OBJ_PACBOOHOME
	.word ObjHit_DoNothing		; Object $3A - OBJ_JUMPCONTROL
	.word Player_GetHurt		; Object $3B - OBJ_SPECTERCHEEP
	.word Platform_PlayerStand		; Object $3C - OBJ_PLATFORM_PATHFOLLOW
	.word Player_GetHurt		; Object $3D - OBJ_NIPPERFIREBREATHER
	.word Platform_PlayerStand		; Object $3E - OBJ_PLATFORMFLOATS
	.word ObjHit_DryBones		; Object $3F - OBJ_DRYBONES
	.word Player_GetHurt		; Object $40 - OBJ_GOLDENPIRANHAGROWER
	.word Player_GetHurt	; Object $41 - OBJ_PIRANHAGROWER
	.word Player_GetHurt		; Object $42 - OBJ_FLAMINGCHEEP
	.word ObjHit_DoNothing		; Object $43 - OBJ_BEACHEDCHEEP
	.word Platform_PlayerStand		; Object $44 - OBJ_PLATFORMUNSTABLE
	.word ObjHit_PWing		; Object $45 - OBJ_PWING
	.word ObjHit_DoNothing		; Object $46 - OBJ_SNIFIT
	.word Birdo_HurtOrStand		; Object $47 - OBJ_BIRDO

	
	; Object group $01 (i.e. objects starting at ID $24) attribute bits set 1 (OA1_* flags valid here)

	.org ObjectGroup_Attributes	; <-- help enforce this table *here*
ObjectGroup01_Attributes:
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48		; Object $24 - OBJ_PLATFORM_HORZOSC
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48		; Object $25
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $26 - OBJ_WOODENPLAT_RIDER
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $27 - OBJ_PLATFORM_DIAG1OSC
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $28 - OBJ_PLATFORM_DIAG2OSC
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $29 - OBJ_SPIKE
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $2A - OBJ_SPARK
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $2B - OBJ_RICOCHET_PODOBO
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $2C - OBJ_PLATFORM_CLOCKOSC
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $2D - OBJ_PLATFORM_CCLOCKOSC
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $2E - OBJ_PIRATEBOO
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $2F - OBJ_BOO
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $30 - OBJ_PACBOO
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $31 - OBJ_PHANTO
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $32 - OBJ_PHANTO_FLIP
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $33 - OBJ_NIPPER
	.byte OA1_PAL3 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $34 - OBJ_TOAD
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH8	; Object $35 - OBJ_LIGHTNINGBOLT
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $36 - OBJ_PLATFORM_PATH
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $37 - OBJ_PLATFORM_DIAG1OSCS
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $38 - OBJ_PLATFORM_DIAG2OSCS
	.byte OA1_PAL0 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $39 - OBJ_PACBOOHOME
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $3A - OBJ_JUMPCONTROL
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $3B - OBJ_SPECTERCHEEP
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $3C - OBJ_PLATFORM_PATHFOLLOW
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $3D - OBJ_NIPPERFIREBREATHER
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $3E - OBJ_PLATFORMFLOATS
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $3F - OBJ_DRYBONES
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $40 - OBJ_GOLDENPIRANHAGROWER
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $41 - OBJ_PIRANHAGROWER
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $42 - OBJ_FLAMINGCHEEP
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $43 - OBJ_BEACHEDCHEEP
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH48	; Object $44 - OBJ_PLATFORMUNSTABLE
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $45 - OBJ_PWING
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $46 - OBJ_SNIFIT
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $47 - OBJ_BIRDO

	; Object group $01 (i.e. objects starting at ID $24) second set attribute bits


	; Object group $01 (i.e. objects starting at ID $24) third set attribute bits

	.org ObjectGroup_PatTableSel	; <-- help enforce this table *here*
ObjectGroup01_PatTableSel:
	.byte OPTS_NOCHANGE	; Object $24 - OBJ_PLATFORM_HORZOSC
	.byte OPTS_NOCHANGE	; Object $25
	.byte OPTS_NOCHANGE	; Object $26 - OBJ_WOODENPLAT_RIDER
	.byte OPTS_NOCHANGE	; Object $27 - OBJ_PLATFORM_DIAG1OSC
	.byte OPTS_NOCHANGE	; Object $28 - OBJ_PLATFORM_DIAG2OSC
	.byte OPTS_SETPT5 | $0E	; Object $29 - OBJ_SPIKE
	.byte OPTS_SETPT5 | $0A	; Object $2A - OBJ_SPARK
	.byte OPTS_SETPT5 | $0A	; Object $2B - OBJ_RICOCHET_PODOBO
	.byte OPTS_NOCHANGE	; Object $2C - OBJ_PLATFORM_CLOCKOSC
	.byte OPTS_NOCHANGE	; Object $2D - OBJ_PLATFORM_CCLOCKOSC
	.byte OPTS_SETPT5 | $37	; Object $2E - OBJ_PIRATEBOO
	.byte OPTS_SETPT5 | $37	; Object $2F - OBJ_BOO
	.byte OPTS_SETPT5 | $37	; Object $30 - OBJ_PACBOO
	.byte OPTS_SETPT5 | $37	; Object $31 - OBJ_PHANTO
	.byte OPTS_SETPT5 | $12	; Object $32 - OBJ_PHANTO_FLIP
	.byte OPTS_SETPT5 | $37	; Object $33 - OBJ_NIPPER
	.byte OPTS_SETPT5 | $37	; Object $34 - OBJ_TOAD
	.byte OPTS_SETPT5 | $1A	; Object $35 - OBJ_LIGHTNINGBOLT
	.byte OPTS_NOCHANGE	; Object $36 - OBJ_PLATFORM_PATH
	.byte OPTS_NOCHANGE	; Object $37 - OBJ_PLATFORM_DIAG1OSCS
	.byte OPTS_NOCHANGE	; Object $38 - OBJ_PLATFORM_DIAG2OSCS
	.byte OPTS_NOCHANGE; Object $39 - OBJ_PACBOOHOME
	.byte OPTS_SETPT6 | $13	; Object $3A - OBJ_JUMPCONTROL
	.byte OPTS_SETPT6 | $13	; Object $3B - OBJ_SPECTERCHEEP
	.byte OPTS_NOCHANGE	; Object $3C - OBJ_PLATFORM_PATHFOLLOW
	.byte OPTS_SETPT5 | $0A	; Object $3D - OBJ_NIPPERFIREBREATHER
	.byte OPTS_NOCHANGE; Object $3E - OBJ_PLATFORMFLOATS
	.byte OPTS_SETPT6 | $13	; Object $3F - OBJ_DRYBONES
	.byte OPTS_SETPT5 | $0B	; Object $40 - OBJ_GOLDENPIRANHAGROWER
	.byte OPTS_SETPT5 | $0B	; Object $41 - OBJ_PIRANHAGROWER
	.byte OPTS_SETPT5 | $0A	; Object $42 - OBJ_FLAMINGCHEEP
	.byte OPTS_SETPT6 | $4F	; Object $43 - OBJ_BEACHEDCHEEP
	.byte OPTS_NOCHANGE ; Object $44 - OBJ_PLATFORMUNSTABLE
	.byte OPTS_SETPT5 | $4D	; Object $45 - OBJ_PWING
	.byte OPTS_SETPT5 | $0F	; Object $46 - OBJ_SNIFIT
	.byte OPTS_SETPT5 | $4C		; Object $47 - OBJ_BIRDO


	; Object group $01 (i.e. objects starting at ID $24) "Kill Action"

	.org ObjectGroup_KillAction	; <-- help enforce this table *here*
ObjectGroup01_KillAction:
	.byte KILLACT_STANDARD	; Object $24 - OBJ_PLATFORM_HORZOSC
	.byte KILLACT_STANDARD	; Object $25
	.byte KILLACT_STANDARD	; Object $26 - OBJ_WOODENPLAT_RIDER
	.byte KILLACT_STANDARD	; Object $27 - OBJ_PLATFORM_DIAG1OSC
	.byte KILLACT_STANDARD	; Object $28 - OBJ_PLATFORM_DIAG2OSC
	.byte KILLACT_NORMALSTATE	; Object $29 - OBJ_SPIKE
	.byte KILLACT_POOFDEATH	; Object $2A - OBJ_SPARK
	.byte KILLACT_POOFDEATH	; Object $2B - OBJ_RICOCHET_PODOBO
	.byte KILLACT_STANDARD	; Object $2C - OBJ_PLATFORM_CLOCKOSC
	.byte KILLACT_STANDARD	; Object $2D - OBJ_PLATFORM_CCLOCKOSC
	.byte KILLACT_POOFDEATH	; Object $2E - OBJ_PIRATEBOO
	.byte KILLACT_POOFDEATH	; Object $2F - OBJ_BOO
	.byte KILLACT_NORMALSTATE	; Object $30 - OBJ_PACBOO
	.byte KILLACT_POOFDEATH	; Object $31 - OBJ_PHANTO
	.byte KILLACT_POOFDEATH	; Object $32 - OBJ_PHANTO_FLIP
	.byte KILLACT_STANDARD	; Object $33 - OBJ_NIPPER
	.byte KILLACT_STANDARD	; Object $34 - OBJ_TOAD
	.byte KILLACT_POOFDEATH	; Object $35 - OBJ_LIGHTNINGBOLT
	.byte KILLACT_STANDARD	; Object $36 - OBJ_PLATFORM_PATH
	.byte KILLACT_STANDARD	; Object $37 - OBJ_PLATFORM_DIAG1OSCS
	.byte KILLACT_STANDARD	; Object $38 - OBJ_PLATFORM_DIAG2OSCS
	.byte KILLACT_POOFDEATH	; Object $39 - OBJ_PACBOOHOME
	.byte KILLACT_STANDARD	; Object $3A - OBJ_JUMPCONTROL
	.byte KILLACT_POOFDEATH	; Object $3B - OBJ_SPECTERCHEEP
	.byte KILLACT_STANDARD	; Object $3C - OBJ_PLATFORM_PATHFOLLOW
	.byte KILLACT_STANDARD	; Object $3D - OBJ_NIPPERFIREBREATHER
	.byte KILLACT_STANDARD	; Object $3E - OBJ_PLATFORMFLOATS
	.byte KILLACT_POOFDEATH	; Object $3F - OBJ_DRYBONES
	.byte KILLACT_POOFDEATH	; Object $40 - OBJ_GOLDENPIRANHAGROWER
	.byte KILLACT_POOFDEATH	; Object $41 - OBJ_PIRANHAGROWER
	.byte KILLACT_POOFDEATH	; Object $42 - OBJ_FLAMINGCHEEP
	.byte KILLACT_POOFDEATH	; Object $43 - OBJ_BEACHEDCHEEP
	.byte KILLACT_STANDARD	; Object $44 - OBJ_PLATFORMUNSTABLE
	.byte KILLACT_POOFDEATH	; Object $45 - OBJ_PWING
	.byte KILLACT_POOFDEATH	; Object $46 - OBJ_SNIFIT
	.byte KILLACT_POOFDEATH	; Object $47 - OBJ_BIRDO


	; Object group $01 (i.e. objects starting at ID $24) pattern index starts
	; These are used for all states except "normal"

OG1_POff .func (\1 - ObjectGroup01_PatternSets)

	.org ObjectGroup_PatternStarts	; <-- help enforce this table *here*
ObjectGroup01_PatternStarts:
	; Index by object group relative index (ObjGroupRel_Idx)
	.byte OG1_POff(ObjP24), OG1_POff(ObjP25), OG1_POff(ObjP26), OG1_POff(ObjP27)
	.byte OG1_POff(ObjP28), OG1_POff(ObjP29), OG1_POff(ObjP2A), OG1_POff(ObjP2B)
	.byte OG1_POff(ObjP2C), OG1_POff(ObjP2D), OG1_POff(ObjP2E), OG1_POff(ObjP2F)
	.byte OG1_POff(ObjP30), OG1_POff(ObjP31), OG1_POff(ObjP32), OG1_POff(ObjP33)
	.byte OG1_POff(ObjP34), OG1_POff(ObjP35), OG1_POff(ObjP36), OG1_POff(ObjP37)
	.byte OG1_POff(ObjP38), OG1_POff(ObjP39), OG1_POff(ObjP3A), OG1_POff(ObjP3B)
	.byte OG1_POff(ObjP3C), OG1_POff(ObjP3D), OG1_POff(ObjP3E), OG1_POff(ObjP3F)
	.byte OG1_POff(ObjP40), OG1_POff(ObjP41), OG1_POff(ObjP42), OG1_POff(ObjP43)
	.byte OG1_POff(ObjP44), OG1_POff(ObjP45), OG1_POff(ObjP46), OG1_POff(ObjP47)


	; Object group $01 (i.e. objects starting at ID $24) pattern sets
	; Note that each "frame" is made up of two tile starts, so there's
	; always going to be an even amount of tiles per object.  That is,
	; for each "frame" value, it moves up two bytes to the next pair.

	; NOTE: SPECIAL EXCEPTION: If an object has Objects_IsGiant set
	; OR has its ID >= OBJ_BIGGREENTROOPA, there is an assumption
	; that the initial bytes at ObjectGroup01_PatternSets form a
	; valid JMP $xxxx instruction to go to an alternate giant shell
	; drawing routine (since otherwise default code is used)

	.org ObjectGroup_PatternSets	; <-- help enforce this table *here*
ObjectGroup01_PatternSets:
	; (End restricted alignment space)


ObjP2F:
	.byte $B1, $B3, $91, $93

ObjP35:
	.byte $99, $9B
	.byte $95, $97, $AD, $AF, $95, $97

ObjP47:
	.byte $81, $83, $89, $8B
	.byte $81, $83, $93, $95
	.byte $85, $87, $89, $8B
	.byte $85, $87, $93, $95
	.byte $9D, $9F, $89, $8B
	.byte $9D, $9F, $93, $95

ObjP30:
	.byte $91, $93, $B1, $B3, $95, $97

ObjP45:
	.byte $BD, $BF
ObjP31:
ObjP32:
	.byte $BD, $BF

ObjP24:
ObjP25:
ObjP26:
ObjP27:
ObjP2C:
ObjP2D:
ObjP28:
ObjP36:
ObjP37:
ObjP38:
ObjP3C:
ObjP3E:
ObjP44:
	.byte $77, $77, $77, $77, $77, $77
ObjP33:
	.byte $95, $97, $B5, $B7, $9D, $9F, $BD, $BF, $99, $9B, $B9, $BB

ObjP39:
	.byte $A1, $A3, $AD, $AF, $A5, $A7, $A9, $AB

ObjP34:
	.byte $8D, $8F, $89, $8B
ObjP3D:
	.byte $A1, $A3, $A5, $A7, $A9, $AB

ObjP3F:
	.byte $C1, $C3, $C5, $C7, $C9, $CB, $CD, $CF, $D1, $D3, $D5, $F9, $DD, $DF
	
	; Spike's / Patooie's spike ball patterns are actually here
SpikeBall_Patterns:
	.byte $95, $95, $D9, $DB

ObjP29:
	.byte $B1, $B3, $B5, $B7, $B9, $BB, $B1, $BF, $B1, $B3

ObjP2A:
	.byte $AF, $AF, $BF, $BF
ObjP2B:
	.byte $B1, $B3, $B5, $B7, $B9, $BB
ObjP46:
	.byte $A9, $AB, $89, $AB, $AD, $AF, $8B, $AF

ObjP3B:
	.byte $FB, $FD, $71, $71, $FB, $FD, $71, $71, $FB, $FF, $71, $71, $FB, $FF, $71, $71

ObjP42:
	.byte $91, $93, $91, $9B, $91, $9B

ObjP43:
	.byte $E7, $E9, $E7, $EF, $E7, $EF

ObjP3A:
	.byte $71, $E1, $E3, $E1, $E3, $71

ObjP2E:
	.byte $B5, $B7

ObjP40:
ObjP41:
	.byte $B3, $B3, $B5, $B5, $B9, $B7, $BF, $BB, $B3, $B3, $B5, $B5, $B7, $B9, $BB, $BF

ObjInit_BusterBeatle:
ObjNorm_BusterBeatle:
	RTS		 ; Return

ObjInit_BeachedCheep:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #(ATTR_STOMPKICKSOUND)
	STA Objects_BehaviorAttr, X

	LDA <Objects_YVelZ, X
	BNE BeachedCheep_Prop

	LDA #(ATTR_CARRYANDBUMP | ATTR_STOMPKICKSOUND)
	STA Objects_BehaviorAttr, X

	JSR Object_MoveTowardsPlayerFast

BeachedCheep_Prop:
	LDY Objects_Property, X
	CPY #$02
	BNE ObjInit_BeachedCheep1

	LDA #$10
	STA <Objects_YVelZ, X

ObjInit_BeachedCheep1:
	LDA BeachedCheep_VFlip, Y
	ORA Objects_Orientation, X
	STA Objects_Orientation, X
	RTS
	
BeachedCheep_XVel: .byte $10, $F0
BeachedCheep_YVel: .byte $A0, $60
BeachedCheep_VFlip: .byte $00, SPR_VFLIP, $00, $00

BeachedCheep_IsWaiting = Objects_Data3
BeachedCheep_CurrentFrame = Objects_Data4
BeachedCheep_NoWaterTimer = Objects_Data5

BeachedCheep_GroundBounce: 
	.byte $D0, $F8, $D0

BeachedCheep_CeilingBounce: 
	.byte $08, $30, $30

ObjNorm_BeachedCheep:
	LDA <Player_HaltGameZ
	BEQ ObjNorm_BeachedCheep0
	JMP Beached_DrawNoAnimate

ObjNorm_BeachedCheep0:
	JSR Object_DeleteOffScreen
	
	LDA Objects_Timer, X
	BEQ Beached_NoTimer
	JMP Beached_InWater
	
Beached_NoTimer:
	LDA Objects_InWater, X
	BEQ Beached_Move

	JSR Object_MoveTowardsPlayerFast
	
	LDY Objects_Property, X

	LDA BeachedCheep_YVel, Y
	STA <Objects_YVelZ, X

	LDA #$10
	STA BeachedCheep_NoWaterTimer, X

Beached_Move:
	
	LDY Objects_Property, X
	BEQ Beached_Move1

	CPY #$03
	BEQ Beached_Move1

	CPY #$01
	BEQ Beached_ReveseGravity

	INC NoGravity
	BNE Beached_Move1

Beached_ReveseGravity:
	INC Reverse_Gravity

Beached_Move1:
	JSR Object_Move
	JSR Object_FaceDirectionMoving
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat
	JSR Object_DetectTiles

	LDA Objects_Property, X
	CMP #$03
	BNE Beached_InteractTiles

	LDA <Objects_YVelZ, X
	BMI Beached_NoDetect

	LDA #$00
	STA Objects_Property, X

	LDA Object_BodyTileProp, X
	CMP #TILE_PROP_SOLID_ALL
	BCC Beached_InteractTiles

	JMP Object_PoofDie

Beached_InteractTiles:
	JSR Object_InteractWithTiles
	JSR Beached_DoBounce

Beached_NoDetect:
	LDA BeachedCheep_NoWaterTimer, X
	BEQ Beached_WaterOk

	DEC BeachedCheep_NoWaterTimer, X
	JMP Beached_Draw

Beached_WaterOk:
	LDA Objects_InWater, X
	BEQ Beached_Draw
	
Beached_SetTimer:
	LDA #$20
	STA Objects_Timer, X
	JSR Object_FacePlayer

Beached_Draw:
	INC BeachedCheep_CurrentFrame,X
	LDA BeachedCheep_CurrentFrame,X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame,X

Beached_DrawNoAnimate:
	JMP Object_Draw

Beached_InWater:
	JSR Object_FacePlayer
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat
	JMP Object_Draw

Beached_DoBounce:
	LDY Objects_Property, X
	LDA <Objects_TilesDetectZ, X
	AND #$04
	BEQ Beached_DoBounce1

	LDA BeachedCheep_GroundBounce, Y
	STA <Objects_YVelZ, X

Beached_DoBounce1:
	LDA  <Objects_TilesDetectZ, X
	AND #$08
	BEQ Beached_DoBounce2

	LDA BeachedCheep_CeilingBounce, Y
	STA <Objects_YVelZ, X

Beached_DoBounce2:
	RTS


ObjInit_DryCheep:
	LDA #$04
	STA Objects_SpritesRequested,X

	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #ATTR_STOMPKICKSOUND
	STA Objects_BehaviorAttr, X

	JSR Object_MoveTowardsPlayerFast
	
	LDA <Objects_XZ, X
	STA DryCheep_PoofX, X

	LDA <Objects_YZ, X
	STA DryCheep_PoofY, X

	LDA <Objects_YHiZ, X
	STA DryCheep_PoofYHi, X

	LDA Objects_Property, X
	STA DryCheep_Burning, X

	LDA #$01
	STA Objects_Health, X
	RTS

DryCheep_Burning = Objects_Data2
DryCheep_PoofX = Objects_Data3
DryCheep_PoofY = Objects_Data4
DryCheep_PoofYHi = Objects_Data5
DryCheep_FlameFrame = Objects_Data6
DryCheep_PoofTimer = Objects_Data7

DryCheep_PoofTime:
	.byte $13

ObjNorm_DryCheep:
	LDA <Player_HaltGameZ
	BNE Dry_DrawNoAnimate

ObjNorm_DryCheep0:
	JSR Object_DeleteOffScreen
	
	LDA DryCheep_Burning, X
	BNE Dry_WeaponAttr

	LDA #(ATTR_FIREPROOF)
	STA Objects_WeaponAttr, X
	BEQ Dry_CheckIce

Dry_WeaponAttr:
	LDA #(ATTR_FIREPROOF | ATTR_TAILPROOF | ATTR_STOMPPROOF | ATTR_NOICE)
	STA Objects_WeaponAttr, X

Dry_CheckIce:
	LDA Objects_PlayerProjHit, X
	BEQ Dry_NotHit

	CMP #HIT_ICEBALL
	BNE Dry_NotHit

	LDA DryCheep_Burning, X
	BEQ Dry_NotHit

Dry_RemoveBurn:
	LDA #$00
	STA DryCheep_Burning, X
	STA Objects_PlayerProjHit, X
	
	INC Objects_Health, X

Dry_NotHit:
	LDA Objects_Timer, X
	BNE Dry_InWater
	
	LDA Objects_InWater, X
	BEQ Dry_Move

	JSR Object_MoveTowardsPlayerFast

	LDA BeachedCheep_YVel
	STA <Objects_YVelZ, X

Dry_Move:
	JSR Object_Move
	JSR Object_FaceDirectionMoving
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat

Dry_Normal:
	JSR Object_DetectTiles
	JSR Object_InteractWithTiles
	JSR Dry_DoBounce
	LDA Objects_InWater, X
	BEQ Dry_Draw
	
Dry_SetTimer:
	LDA #$20
	STA Objects_Timer, X
	JSR Dry_CheckLava
	JSR Object_FacePlayer

Dry_Draw:
	INC BeachedCheep_CurrentFrame,X
	LDA BeachedCheep_CurrentFrame,X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame,X

Dry_DrawNoAnimate:
	JMP DryCheep_DrawFlamesAndSmoke

Dry_InWater:
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat
	JMP DryCheep_DrawFlamesAndSmoke

Dry_DoBounce:
	LDA <Objects_TilesDetectZ, X
	AND #$04
	BEQ Dry_DoBounce1

	LDA BeachedCheep_GroundBounce
	STA <Objects_YVelZ, X

Dry_DoBounce1:
	RTS

Dry_CheckLava:
	LDA Object_BodyTileProp, X
	AND #$0F
	CMP #(TILE_PROP_HARMFUL)
	BEQ Dry_MakeBurn

	LDA #$00
	STA DryCheep_Burning, X
	RTS

Dry_MakeBurn:
	LDA #$01
	STA DryCheep_Burning, X

	LDA DryCheep_PoofTime
	STA DryCheep_PoofTimer, X
	RTS

DryCheep_DrawFlamesAndSmoke:
	JSR Object_Draw
	
	LDA DryCheep_Burning, X
	BNE DryCheep_MakeFlamePoof
	RTS

DryCheep_MakeFlamePoof:
	LDA Sprite_RAM,Y
	SUB #$08
	STA Sprite_RAM+8,Y

	LDA Sprite_RAM + 4,Y
	SUB #$08
	STA Sprite_RAM+12,Y

	LDA Sprite_RAM+3,Y
	STA Sprite_RAM+11,Y

	LDA Sprite_RAM+7,Y
	STA Sprite_RAM+15,Y

	LDA Sprite_RAM+2,Y
	AND #$BF
	STA Sprite_RAM+10,Y
	STA Sprite_RAM+14,Y

	INC DryCheep_FlameFrame, X
	LDA DryCheep_FlameFrame, X
	LSR A
	LSR A
	AND #$02
	TAX 
	LDA Flame_Frames, X
	STA Sprite_RAM+9,Y

	LDA Flame_Frames + 1, X
	STA Sprite_RAM+13,Y

	LDA <Player_HaltGameZ
	BNE DryCheep_DrawFlamesAndSmoke2

	LDX <CurrentObjectIndexZ


	LDA Objects_XVelZ, X
	ORA Objects_YVelZ, X
	BEQ DryCheep_DrawFlamesAndSmoke2

	LDA DryCheep_PoofTimer, X
	BNE DryCheep_DrawFlamesAndSmoke1

	LDA Objects_InWater, X
	BNE DryCheep_DrawFlamesAndSmoke2

	LDA Objects_SpritesHorizontallyOffScreen,X
	ORA Objects_SpritesVerticallyOffScreen,X
	BNE DryCheep_SkipPoof

	LDA <Objects_XZ, X
	STA <Poof_X

	LDA <Objects_YZ, X
	STA <Poof_Y

	LDA <Objects_YHiZ, X
	STA <Poof_YHi

	JSR Common_MakePoof

DryCheep_SkipPoof:
	LDA DryCheep_PoofTime
	STA DryCheep_PoofTimer, X

	LDA <Objects_XZ, X
	STA DryCheep_PoofX, X

	LDA <Objects_YZ, X
	STA DryCheep_PoofY, X

	LDA <Objects_YHiZ, X
	STA DryCheep_PoofYHi, X
	
DryCheep_DrawFlamesAndSmoke1:
	DEC DryCheep_PoofTimer, X

DryCheep_DrawFlamesAndSmoke2:
	RTS

	; Different "entropy" values by the object's slot -- keeps things random looking

Flame_Frames:
	.byte $81, $83, $85, $87

ObjInit_HotFoot:
	RTS		 ; Return

ObjInit_PWing:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	JMP Object_NoInteractions

ObjNorm_PWing:
	JSR Object_CalcBoundBox
	JSR Object_InteractWithPlayer
	JMP Object_Draw

ObjHit_PWing:
	LDA #$FF
	STA Player_FlyTime

	LDA #$04
	STA Player_QueueSuit

	LDA Sound_QLevel1
	ORA #SND_LEVELPOOF
	STA Sound_QLevel1

	LDA #$17
	STA Player_SuitLost

	LDA #OBJSTATE_DEADEMPTY
	STA Objects_State, X
	RTS

ObjInit_Boo:
	LDA #(ATTR_FIREPROOF | ATTR_ICEPROOF | ATTR_HAMMERPROOF | ATTR_TAILPROOF | ATTR_DASHPROOF | ATTR_STOMPPROOF | ATTR_STOMPPROOF)
	STA Objects_WeaponAttr, X

	LDA #(ATTR_EXPLOSIONPROOF | ATTR_SHELLPROOF)
	STA Objects_BehaviorAttr, X

	LDA #BOUND16x16
	STA Objects_BoundBox, X

	RTS

Boo_CheckPlayerSight:
	LDA DayNight
	BNE PRG002_A8CC
	JSR Object_FacePlayer
	CLC
	RTS

PRG002_A8CC:
	SEC
	RTS		 ; Return


PirateBoo_CoinTimer = Objects_Data1

ObjInit_PirateBoo:
	LDA #(ATTR_FIREPROOF | ATTR_ICEPROOF | ATTR_HAMMERPROOF | ATTR_TAILPROOF | ATTR_DASHPROOF | ATTR_STOMPPROOF | ATTR_STOMPPROOF)
	STA Objects_WeaponAttr, X

	LDA #(ATTR_EXPLOSIONPROOF | ATTR_SHELLPROOF)
	STA Objects_BehaviorAttr, X

	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #$E8
	STA ChaseVel_LimitLo, X

	LDA #$18
	STA ChaseVel_LimitHi, X

	LDA Objects_Property, X
	BEQ PriateBoo_InitRTS

	LDA #SPR_BEHINDBG
	STA Objects_SpriteAttributes, X
PriateBoo_InitRTS:
	RTS

ObjNorm_PirateBoo:
	LDA <Player_HaltGameZ
	BNE PirateBoo_Draw

	JSR Object_CalcBoundBox
	JSR Object_ChasePlayer
	JSR Object_FaceDirectionMoving
	JSR Object_InteractWithPlayer	

PirateBoo_Draw:
	JMP Object_Draw 	

PirateBoo_TakeCoins:
	INC PirateBoo_CoinTimer, X
	LDA PirateBoo_CoinTimer, X
	AND #$03
	BNE PirateBoo_Draw

	INC Coins_Lost

	LDA Sound_QLevel1
	ORA #SND_LEVELCOIN
	STA Sound_QLevel1
	STA Force_Coin_Update
	BNE PirateBoo_Draw
	
Boo_PlayerCheck:
	.byte $00, SPR_HFLIP

Boo_Speeds:
	.byte $F0, $E0
	.byte $10, $20

ObjNorm_Boo:
	LDA <Player_HaltGameZ
	BNE Boo_Draw

	JSR Object_DeleteOffScreen

	LDY #$00
	LDA DayNight
	BEQ Boo_SetLimits

	INY

Boo_SetLimits:
	LDA Boo_Speeds, Y
	STA ChaseVel_LimitLo, X

	LDA Boo_Speeds + 2, Y
	STA ChaseVel_LimitHi, X

	JSR Object_FacePlayer
	JSR Object_CalcBoundBox	
	JSR Object_AttackOrDefeat
	JSR Object_XDistanceFromObject
	
	LDA DayNight
	BNE Boo_Chase

	LDA Boo_PlayerCheck, Y
	CMP <Player_FlipBits
	BNE Boo_Still

Boo_Chase:
	JSR Object_ChasePlayer

	LDA #$01
	STA Objects_Frame, X
	BNE Boo_Draw

Boo_Still:
	LDA #$00
	STA Objects_Frame, X
	STA <Objects_XVelZ, X
	STA <Objects_YVelZ, X

Boo_Draw:
	JMP Object_Draw

ObjInit_Phanto:
	LDA #(ATTR_FIREPROOF | ATTR_ICEPROOF | ATTR_HAMMERPROOF | ATTR_TAILPROOF | ATTR_DASHPROOF | ATTR_STOMPPROOF | ATTR_STOMPPROOF)
	STA Objects_WeaponAttr, X

	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #$E0
	STA ChaseVel_LimitLo, X

	LDA #$20
	STA ChaseVel_LimitHi, X
	RTS		 ; Return

ObjInit_PhantoFlip:

	RTS		 ; Return

	; Stretch timer reset values by internal state (Var5)

Phanto_ChaseTimer = Objects_Data3
Phanto_Action = Objects_Data4
Phanto_Shaker = Objects_Data5


ObjNorm_Phanto:
	LDA <Player_HaltGameZ
	BEQ ObjNorm_Phanto1
	JMP Object_Draw

ObjNorm_Phanto1:
	LDA Phanto_Action, X
	JSR DynJump

	.word Phanto_Wait
	.word Phanto_Wake
	.word Phanto_Chase

Phanto_FindKey:
	LDY #07

Pahnto_KeyLooking:
	LDA Objects_ID, Y
	CMP #OBJ_KEY
	BEQ Pahnto_KeyFound

	DEY
	BPL Pahnto_KeyLooking
	CLC
	RTS

Pahnto_KeyFound:
	SEC
	RTS

Phanto_Wait:
	JSR Phanto_FindKey
	BCC Phanto_Wait_End

Phanto_KeyHeld:
	LDA Objects_BeingHeld, Y
	BEQ Phanto_Wait_End

	INC Phanto_Action, X
	LDA #$40
	STA Objects_Timer, X

Phanto_Wait_End:
	JMP Object_Draw

Phanto_Wake:
	LDA Objects_Timer, X
	BNE Phanto_Wake1

	INC Phanto_Action, X

Phanto_Wake1:
	JSR Object_Draw
	LDA Phanto_Shaker, X
	AND #$08
	BNE Phanto_Wake2

	LDA #SND_LEVELCRUMBLE
	STA Sound_QLevel2

Phanto_Wake2:
	LDA Phanto_Shaker, X
	AND #$01
	BNE Phanto_Wake_End
	TYA
	TAX
	INC  Sprite_RAM+$03,X
	INC  Sprite_RAM+$07,X

Phanto_Wake_End:
	LDX <CurrentObjectIndexZ
	INC Phanto_Shaker, X
	RTS

Phanto_Chase:
	JSR Phanto_FindKey
	BCC Phanto_ChaseHover

	LDA Objects_ID, Y
	CMP #OBJ_KEY
	BNE Phanto_Poof

	LDA Objects_BeingHeld, Y
	BEQ Phanto_ChaseHover

	JSR Object_ChasePlayer
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat

	JMP Object_Draw

Phanto_HoverVel:
	.byte $01, $FF

Phanto_HorzLimit:
	.byte $30, $D0

Phanto_VertLimit:
	.byte $08, $F8

Phanto_ChaseHover:
	LDY #$00
	LDA <Horz_Scroll
	ADD #$78
	STA <Temp_Var1

	LDA <Horz_Scroll_Hi
	ADC #$00
	STA <Temp_Var2

	LDA <Temp_Var1
	SUB <Objects_XZ, X

	LDA <Temp_Var2
	SBC <Objects_XHiZ, X
	BPL Hover1
	INY

Hover1:
	LDA <Objects_XVelZ, X
	CMP Phanto_HorzLimit, Y
	BEQ Hover2

	ADD Phanto_HoverVel, Y

	STA <Objects_XVelZ, X

Hover2:
	LDY #$00

	LDA <Vert_Scroll
	ADD #$10
	STA <Temp_Var1

	LDA <Vert_Scroll_Hi
	ADC #$00
	STA <Temp_Var2

	LDA <Temp_Var1
	SUB <Objects_YZ, X

	LDA <Temp_Var2
	SBC <Objects_YHiZ, X
	BPL Hover3
	INY

Hover3:
	LDA <Objects_YVelZ, X
	CMP Phanto_VertLimit, Y
	BEQ Hover4

	ADD Phanto_HoverVel, Y

	STA <Objects_YVelZ, X

Hover4:
	JSR Object_ApplyXVel
	JSR Object_ApplyYVel_NoGravity
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat
	JMP Object_Draw

Phanto_Poof:
	LDA <Objects_XZ, X
	STA Poof_X

	LDA <Objects_YZ, X
	STA Poof_Y
	
	LDA <Objects_YHiZ, X
	STA Poof_YHi
	
	JSR Common_MakePoof
	JMP Object_Delete

ObjInit_InvisibleLift:
ObjNorm_InvisibleLift:
	RTS

PlatformTimers:
	.byte $01, $11, $21, $31, $41, $51, $61, $71

Platform_StartX = Objects_Data3
Platform_StartXHi = Objects_Data4
Platform_SteppedOn = Objects_Data5
Platform_MadeContact = Objects_Data6

ObjInit_PlatformCommon:
	LDA #$06
	STA Objects_SpritesRequested, X

	LDA #BOUND48x16
	STA Objects_BoundBox, X

	JSR Object_NoInteractions

	LDA Objects_XZ, X
	STA Platform_StartX, X

	LDA Objects_XHiZ, X
	STA Platform_StartXHi, X

	LDY Objects_Property, X
	LDA PlatformTimers, Y
	STA Patrol_ResetTimer, X
	RTS

ObjInit_WoodenPlatHorz:
	
	JSR ObjInit_PlatformCommon
	
	LDA #$00
	STA Objects_Property, X

	JMP InitPatrol_NoTimers

ObjInit_WoodenPlatVert:
	JSR ObjInit_PlatformCommon
	LDA #$01
	STA Objects_Property, X
	JMP InitPatrol_NoTimers

ObjInit_WoodenPlatDiagonal1:
	JSR ObjInit_PlatformCommon
	LDA #$02
	STA Objects_Property, X
	JMP InitPatrol_NoTimers

ObjInit_WoodenPlatDiagonal2:
	JSR ObjInit_PlatformCommon
	LDA #$03
	STA Objects_Property, X
	JMP InitPatrol_NoTimers

ObjInit_WoodenPlatCCW:
	JSR ObjInit_PlatformCommon
	LDA #$04
	STA Objects_Property, X
	JMP InitPatrol_NoTimers

ObjInit_WoodenPlatCW:
	JSR ObjInit_PlatformCommon
	LDA #$05
	STA Objects_Property, X
	JMP InitPatrol_NoTimers

ObjNorm_PlatformOscillate:
	LDA <Player_HaltGameZ
	BNE ObjNorm_PlatformOscillate1	 ; If gameplay halted, Delete if off-screen, otherwise draw wide 48x16 sprite

	JSR Object_CalcBoundBoxForced
	
	LDA #$00
	STA Platform_MadeContact, X

	JSR Object_InteractWithPlayer
	JSR DoPatrol
	JSR Platform_ContactCheck

	LDA <Objects_XZ, X
	CMP Platform_StartX, X
	BNE ObjNorm_PlatformOscillate1

	LDA <Objects_XHiZ, X
	CMP Platform_StartXHi, X
	BNE ObjNorm_PlatformOscillate1


	JSR Object_DeleteOffScreen

ObjNorm_PlatformOscillate1:
	LDA Objects_SpriteAttributes, X
	ORA #SPR_BEHINDBG
	STA Objects_SpriteAttributes, X
	JMP Platform_Draw
	
ObjInit_WoodenPlat:
	RTS		 ; Return

ObjInit_PlatformFollow:
	JMP ObjInit_PlatformCommon

ObjNorm_PlatformFollow:
	LDA <Player_HaltGameZ
	BNE ObjNorm_PlatformFollow1	 ; If gameplay halted, Delete if off-screen, otherwise draw wide 48x16 sprite

	JSR Object_DeleteOffScreen

	LDA #$00
	STA Platform_MadeContact, X

	JSR Object_CalcBoundBox
	JSR Object_InteractWithPlayer
	JSR Object_ApplyXVel
	JSR Object_ApplyYVel_NoGravity	
	JSR Platform_ContactCheck

	LDA <Objects_XZ, X
	ORA <Objects_YZ, X
	AND #$0F
	BNE ObjNorm_PlatformFollow1

	LDA Block_NeedsUpdate
	BEQ DoFollow

	LDA #$00
	STA <Objects_XVelZ, X
	STA <Objects_YVelZ, X
	BEQ ObjNorm_PlatformFollow1

DoFollow:
	JSR Platform_FollowBlocks

ObjNorm_PlatformFollow1:
	LDA Objects_SpriteAttributes, X
	ORA #SPR_BEHINDBG
	STA Objects_SpriteAttributes, X

	JMP Platform_Draw


Platform_Index = Objects_Data1
Platform_Ticker = Objects_Data2
Platform_Regen = Objects_Data6
Platform_NotBehind = Objects_Data7
Platform_MaxFall = Objects_Data8
Platform_StartY = Objects_Data9
Platform_StartYHi = Objects_Data10

Platform_XOffsets:
	.byte $28, $18, $08, $18

Platform_YOffsets:
	.byte $08, $18, $08, $F8
	.byte $00, $00, $00, $FF

Platform_XVel:
	.byte $08, $00, $F8, $00

Platform_YVel:
	.byte $00, $8, $00, $F8

Platform_FollowBlocks:
	LDA #$03
	STA Platform_Index, X

Platform_CheckBlocks:
	LDY Platform_Index, X
	LDA Platform_XOffsets, Y
	ADD <Objects_XZ, X
	STA Block_DetectX

	LDA <Objects_XHiZ, X
	ADC #$00
	STA Block_DetectXHi

	LDA Platform_YOffsets, Y
	ADD <Objects_YZ, X
	STA Block_DetectY

	LDA Platform_YOffsets + 4, Y
	ADC <Objects_YHiZ, X
	STA Block_DetectYHi

	JSR Object_DetectTile
	CMP #TILE_PROP_ENEMY
	BEQ Platform_SetVel

	DEC Platform_Index, X
	BPL Platform_CheckBlocks

	RTS

Platform_SetVel:
	LDA Tile_LastValue
	AND #$C0
	ORA #$01
	JSR Object_ChangeBlock

	LDY Platform_Index, X
	LDA Platform_XVel, Y
	STA <Objects_XVelZ, X

	LDA Platform_YVel, Y
	STA <Objects_YVelZ, X
	RTS

PlatformUnstable_MoveTimer = Objects_Data11
PlatformUnstable_NoRegen = Objects_Data12
ObjInit_PlatformUnstable:
	LDA #BOUND48x16
	STA Objects_BoundBox, X

	JSR Object_NoInteractions

	LDA #$20
	STA Platform_MaxFall, X
	STA Platform_Regen, X
	STA Platform_NotBehind, X

	LDA <Objects_YZ, X
	STA Platform_StartY, X

	LDA <Objects_YHiZ, X
	STA Platform_StartYHi, X
	RTS

ObjNorm_PlatformUnstable:
	LDA <Player_HaltGameZ
	BNE Unstable_Draw

	JSR Object_DeleteOffScreen
	JSR Unstable_CheckRegen
	JSR Object_CalcBoundBox
	
	LDA #$00
	STA Platform_MadeContact, X

	JSR Object_InteractWithPlayer
	JSR Unstable_Move
	JSR Platform_ContactCheck

Unstable_Draw:
	LDA Objects_Timer, X  
	BEQ Unstable_DrawNorm
	RTS

Unstable_DrawNorm:
	LDA Platform_NotBehind, X
	BNE Unstable_Draw1

Unstable_Draw1:
	JMP Platform_Draw

Unstable_Move:
	LDA PlatformUnstable_MoveTimer, X
	BEQ Unstable_MoveNormal

	DEC PlatformUnstable_MoveTimer, X
	BNE Unstablve_MoveContant

	INC Platform_SteppedOn, X
	
	LDA Objects_SpriteAttributes, X
	AND #~SPR_BEHINDBG
	STA Objects_SpriteAttributes, X
	
	JSR Object_ApplyYVel_NoGravity
	RTS

Unstablve_MoveContant:
	JSR Object_ApplyYVel_NoGravity

	LDA Objects_SpriteAttributes, X
	ORA #SPR_BEHINDBG
	STA Objects_SpriteAttributes, X
	RTS

Unstable_MoveNormal:

	LDA Platform_SteppedOn, X
	BEQ Unstable_MoveRTS

	JSR Object_Move

	LDA <Objects_YVelZ,X
	BMI Unstable_MoveRTS
	CMP #$20
	BCC Unstable_MoveRTS

	LDA #$20
	STA <Objects_YVelZ,X

Unstable_MoveRTS:
	RTS

Unstable_CheckSteppedOn:
	LDA Platform_SteppedOn, X
	BEQ Unstable_CheckSteppedOnRTS

	INC Platform_Ticker, X
	LDA Platform_Ticker, X
	AND #$01
	BEQ Unstable_CheckSteppedOnRTS

	JSR Object_Move

Unstable_CheckSteppedOnRTS:
	RTS

Unstable_CheckRegen:
	LDA Objects_Timer, X  
	BEQ Unstable_CheckFallTooFar

	LDA #$00
	STA Platform_SteppedOn, X
	STA <Objects_YVelZ, X
	
	LDA Platform_StartY, X
	STA <Objects_YZ, X

	LDA Platform_StartYHi, X
	STA <Objects_YHiZ, X
	PLA
	PLA
	RTS

Unstable_CheckFallTooFar:
	LDA PlatformUnstable_NoRegen, X
	BNE Unstable_CheckFallTooFarRTS

	LDA <Objects_YHiZ, X
	BEQ Unstable_CheckFallTooFarRTS
	BMI Unstable_CheckFallTooFarRTS

	LDA <Objects_YZ, X
	CMP #$B0
	BCC Unstable_CheckFallTooFarRTS

	LDA #$60
	STA Objects_Timer, X

Unstable_CheckFallTooFarRTS:
	RTS

Unstable_CheckContact:
	LDA Platform_MadeContact, X
	BEQ Unstable_CheckContactRTS

Unstable_CheckContactRTS:
	RTS

PlatformGenDelay:
	.byte $00, $20

ObjInit_WoodenPlatFallGen:
	LDY Objects_Property, X
	LDA PlatformGenDelay, Y
	STA Objects_Timer, X
	LDA #$FC
	STA <Objects_YVelZ, X
	LDA Objects_SpriteAttributes,X
	ORA #SPR_BEHINDBG
	STA Objects_SpriteAttributes,X

ObjInit_WoodenPlatFallGen1:
	LDA <Objects_YZ, X
	STA Objects_Data4, X
	LDA <Objects_YHiZ, X
	STA Objects_Data5, X
	RTS

Reset_WoodenPlatFallGen:
	LDA #$60
	STA Objects_Timer, X

	LDA Objects_Data4, X
	STA <Objects_YZ, X

	LDA Objects_Data5, X
	STA <Objects_YHiZ, X

	LDA #00
	STA Objects_Data3, X
	RTS

ObjNorm_WoodenPlatFallGen:
	RTS		 ; Return


PRG002_AAA6:
	RTS

ObjInit_FloatWoodenPlat:
	LDA Level_AScrlConfig
	BEQ PRG002_AB35	 ; If no raster, jump to PRG002_AB35 (RTS)

	; If raster active (assuming a level with constant water level)...

	; Set fixed position at water level (vertical scroll +148)
	LDA Level_VertScroll
	ADD #148
	STA <Objects_YZ,X
	LDA Level_VertScrollH
	ADC #$00		; Apply carry
	STA <Objects_YHiZ,X

PRG002_AB35:
	RTS		 ; Return

ObjNorm_PlatformFloat:
	LDA <Player_HaltGameZ
	BEQ ObjNorm_PlatformFloat1

	JMP PlatformFloat1

ObjNorm_PlatformFloat1:
	JSR Object_DeleteOffScreen

	LDA Objects_InWater, X
	BEQ Platform_NoFloat

	LDA #$00
	STA <Objects_YVelZ, X

Platform_NoFloat:
	LDA #$00
	STA Platform_MadeContact, X

	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_InteractWithPlayer
	JSR Platform_ContactCheck

	LDA Objects_BoundLeft, X
	ADD #$08
	STA Tile_DetectionX

	LDA Objects_BoundLeftHi, X
	ADC #$00
	STA Tile_DetectionXHi
	
	LDA Objects_BoundBottom, X
	STA <Temp_Var13

	LDA Objects_BoundBottomHi, X
	STA <Temp_Var14

	LDA Objects_BoundTop, X
	ADD #$08
	STA <Temp_Var15

	LDA Objects_BoundTopHi, X
	ADC #$00
	STA <Temp_Var16

	LDA #$02
	STA Platform_Index, X

	
Platform_CheckNext:
	LDA <Temp_Var13
	STA Tile_DetectionY

	LDA <Temp_Var14
	STA Tile_DetectionYHi

	JSR Object_DetectTile
	AND #$F0
	CMP #TILE_PROP_SOLID_TOP
	BEQ Platform_HitGrnd

	CMP #TILE_PROP_SOLID_ALL
	BCS Platform_HitGrnd

	LDA <Temp_Var15
	STA Tile_DetectionY

	LDA <Temp_Var16
	STA Tile_DetectionYHi

	JSR Object_DetectTile

	AND #TILE_PROP_WATER
	BNE Platform_HitWater

	DEC Platform_Index, X
	BMI PlatformNoDetect

	LDA Tile_DetectionX
	ADD #$10
	STA Tile_DetectionX

	LDA Tile_DetectionXHi
	ADC #$00
	STA Tile_DetectionXHi
	JMP Platform_CheckNext

Platform_HitGrnd:
	JSR Object_HitGround
	JMP PlatformFloat1

Platform_HitWater:
	LDA Objects_InWater, X
	BNE PlatformFloat1

	LDA #$01
	STA Objects_InWater, X

	LDA <Objects_YVelZ, X
	JSR Half_Value
	STA <Objects_YVelZ, X
	JMP PlatformFloat1

PlatformNoDetect:
	LDA #$00
	STA Objects_InWater, X

PlatformFloat1:
	LDA Objects_SpriteAttributes, X
	ORA #SPR_BEHINDBG
	STA Objects_SpriteAttributes, X
	JMP Platform_Draw

ObjInit_SpecterCheep:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #(ATTR_FIREPROOF | ATTR_ICEPROOF | ATTR_HAMMERPROOF | ATTR_TAILPROOF | ATTR_DASHPROOF | ATTR_STOMPPROOF | ATTR_STOMPPROOF)
	STA Objects_WeaponAttr, X

	LDA #(ATTR_EXPLOSIONPROOF | ATTR_SHELLPROOF)
	STA Objects_BehaviorAttr, X

	LDA #$20 
	STA Objects_Data8, X
	STA Objects_Data9, X
	JMP InitPatrol

ObjNorm_SpecterCheep:
	LDA <Player_HaltGameZ
	BNE ObjNorm_SpecterCheep1

	INC Objects_Data5,X	 ; Var5++

	; Toggle frame 0/1
	LDA Objects_Data5,X
	AND #$07
	STA Objects_Frame,X

	JSR Object_DeleteOffScreen
	JSR Object_InteractWithPlayer

	LDA Objects_Frame,X
	AND #$01
	BEQ ObjNorm_SpecterCheep1

	JSR Object_ChasePlayer

ObjNorm_SpecterCheep1:
	JMP Object_Draw

Spike_Frames:
	.byte $04, $04, $04, $04, $04, $02, $02, $03, $03, $03, $03, $02, $02, $02, $02

Spike_XOff:
	.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	.byte $00, $00, $01, $02, $03, $04

Spike_YOff:
	.byte $00, $00, $00, $FE, $FE, $FC, $FA, $F8, $F6, $F4, $F2
	.byte $F0, $EE, $F0, $F0, $F0, $F0

ObjInit_Spike:
	LDA #$04
	STA Objects_SpritesRequested, X

	LDA #ATTR_ICEPROOF
	STA Objects_WeaponAttr, X
	
	LDA #(ATTR_STOMPKICKSOUND)
	STA Objects_BehaviorAttr, X

	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #$40
	STA Objects_Timer, X
	STA Objects_Regen, X

	LDA #$02
	STA Objects_ExpPoints, X
	RTS

Spike_Action = Objects_Data3
Spike_Frame = Objects_Data4
Spike_BallOffset = Objects_Data5

ObjNorm_Spike:
	LDA Objects_State, X
	CMP #OBJSTATE_KILLED
	BNE Spike_Norm1
	
	LDA Spike_Action, X
	BEQ Spike_Die

	LDA <Objects_XZ, X
	STA Debris_X

	LDA <Objects_YZ, X
	STA Debris_Y

	JSR Common_MakeDebris

	LDA #$99
	STA BrickBust_Tile, Y

	LDA #SPR_PAL1
	STA BrickBust_Pal, Y
	
Spike_Die:
	JMP ObjState_PoofDying

Spike_Norm1:
	LDA <Player_HaltGameZ
	BEQ Spike_Norm
	JMP Spike_Draw

Spike_Norm:
	JSR Object_DeleteOffScreen
	JSR Object_CalcBoundBox
	JSR Object_FacePlayer
	JSR Object_AttackOrDefeat

	LDA Spike_Action, X
	JSR DynJump

	.word SpikeWait
	.word SpikeOpenMouth
	.word SpikeThrowSpike

SpikeWait:
	LDA #$00
	STA Objects_Frame, X

	LDA Objects_Timer, X
	BNE SpikeWait1

	INC Spike_Action, X

	LDA #$60
	STA Objects_Timer, X

SpikeWait1:
	LDA Object_SpriteRAMOffset,X
	JMP Spike_Draw

SpikeOpenMouth:
	INC Spike_Frame, X
	INC Spike_BallOffset, X

	LDA Spike_BallOffset, X
	CMP #$20
	BCC SpikeOpenMouth0

	LDA #$20
	STA Spike_BallOffset, X

	LDA Objects_Timer, X
	BNE SpikeOpenMouth0

	INC Spike_Action, X

SpikeOpenMouth0:
	LDA Spike_Frame, X
	CMP #$20
	BCS SpikeOpenMouth1

	LSR A
	LSR A
	LSR A
	AND #$03
	STA Objects_Frame, X

SpikeOpenMouth1:
	JMP Spike_Draw
	
SpikeThrow_XVel:
	.byte $10, $18

SpikeThrow_YVel:
	.byte $D0, $C0

SpikeThrowSpike:
	LDA Objects_SpritesHorizontallyOffScreen,X
	ORA Objects_SpritesHorizontallyOffScreen,X
	BNE Spike_Draw

	JSR Object_FindEmptyX
	BCC Spike_Draw

	LDY <CurrentObjectIndexZ

	LDA #OBJ_SPIKEBALL
	STA Objects_ID, X

	LDA #OBJSTATE_FRESH
	STA Objects_State, X

	LDA Objects_YZ, Y
	SUB #$12
	STA <Objects_YZ, X

	LDA Objects_YHiZ, Y
	SBC #$00
	STA <Objects_YHiZ, X

	LDA Objects_XZ, Y
	STA <Objects_XZ, X

	LDA Objects_XHiZ, Y
	STA <Objects_XHiZ, X

	
	LDA RandomN, X
	AND #$01
	TAY

	LDA SpikeThrow_XVel, Y
	STA <Objects_XVelZ, X

	LDY CurrentObjectIndexZ

	LDA Objects_Orientation, Y
	AND #SPR_HFLIP
	BNE Spike_BallNoFlip

	LDA <Objects_XVelZ, X
	EOR #$FF
	ADD #$01
	STA <Objects_XVelZ, X

Spike_BallNoFlip:
	LDA RandomN, X
	AND #$10
	LSR A
	LSR A
	LSR A
	LSR A
	TAY

	LDA SpikeThrow_YVel, Y
	STA <Objects_YVelZ, X

	JSR Object_CalcBoundBox

	LDX <CurrentObjectIndexZ
	LDA #$00
	STA Spike_Action, X
	STA Spike_BallOffset, X
	STA Spike_Frame, X

	LDA #$40
	STA Objects_Timer, X

Spike_Draw:
	JSR Object_Draw
	
	LDA Spike_Action, X
	BEQ Spike_Draw1

	LDY Object_SpriteRAMOffset, X

	LDA #$95
	STA Sprite_RAMTile + 8, Y
	STA Sprite_RAMTile + 12, Y

	LDA #SPR_PAL1
	STA Sprite_RAMAttr + 8, Y

	LDA #(SPR_PAL1 | SPR_HFLIP)
	STA Sprite_RAMAttr + 12, Y

	LDA Spike_BallOffset, X
	LSR A
	STA <Temp_Var1

	LDX <CurrentObjectIndexZ
	LDA Objects_Orientation, X
	BEQ Spike_BallRight

	LDX <Temp_Var1

	LDA Sprite_RAMX, Y
	SUB Spike_XOff, X
 	BCC Spike_BallUnderflow2

	STA Sprite_RAMX + 8, Y
	
	LDA Sprite_RAMY, Y
	ADD Spike_YOff, X
	STA Sprite_RAMY + 8, Y

	LDA Sprite_RAMX + 8, Y
	ADD #$08
	BCS Spike_BallUnderflow2
	
	STA Sprite_RAMX + 12, Y

	LDA Sprite_RAMY, Y
	ADD Spike_YOff, X
	STA Sprite_RAMY + 12, Y

Spike_BallUnderflow2:
	RTS

Spike_BallRight:
	LDX <Temp_Var1

	LDA Sprite_RAMX, Y
	ADD Spike_XOff, X
	BCS Spike_Draw1
	STA Sprite_RAMX + 8, Y

	LDA Sprite_RAMY, Y
	ADD Spike_YOff, X
	STA Sprite_RAMY + 8, Y

	LDA Sprite_RAMX + 8, Y
	ADD #$08
	BCS Spike_Draw1
	
	STA Sprite_RAMX + 12, Y

	LDA Sprite_RAMY, Y
	ADD Spike_YOff, X
	STA Sprite_RAMY + 12, Y
Spike_Draw1:
	RTS


ObjInit_Snifit:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #$80
	STA Objects_Timer, X
	RTS

SnifitDirection:
	.byte $08, $F8

ObjNorm_Snifit:
	LDA <Player_HaltGameZ
	BNE DrawSnifit

	LDA #$00
	STA Objects_Data5, X
	LDA Objects_Data3, X
	BEQ ObjNorm_Snifit0

	JSR Object_YDistanceFromPlayer
	CPY #$01
	BNE ObjNorm_Snifit0

	LDA <Temp_Var16
	CMP #$E0
	BCS ObjNorm_Snifit0
	INC Objects_Data5, X

ObjNorm_Snifit0:

	JSR Object_InteractWithPlayer
	JSR Object_DeleteOffScreen	 
	JSR Object_Move
	JSR Object_InteractWithTiles
	JSR Object_FacePlayer
	TYA
	STA Objects_Data2, X
	LDA Objects_Data3, X
	BEQ ObjNorm_Snifit1

	LDA #$00
	STA Objects_XVelZ, X
	BEQ ObjNorm_Snifit2

ObjNorm_Snifit1:
	LDA Objects_Property, X
	BNE ObjNorm_Snifit2

	LDA SnifitDirection, Y
	STA Objects_XVelZ, X

ObjNorm_Snifit2:
	LDA  <Objects_TilesDetectZ, X
	AND #(HIT_GROUND)
	BEQ SnifitDontHop

	LDA RandomN
	AND #$1F
	BEQ Snifit_Hop

	LDA  <Objects_TilesDetectZ, X
	AND #(HIT_LEFTWALL | HIT_RIGHTWALL)
	BEQ SnifitDontHop

Snifit_Hop:

	LDA #$D4
	STA Objects_YVelZ, X

SnifitDontHop:
	LDA  <Objects_TilesDetectZ, X
	AND #(HIT_LEFTWALL | HIT_RIGHTWALL)
	BEQ SnifitDontHop1
	JSR Snifit_HitWall

SnifitDontHop1:
	JSR Snifit_Shoot

DrawSnifit:
	LDA Objects_XVelZ, X
	ORA Objects_Property, X
	BEQ DrawSnifit1

	INC Objects_Data4, X

DrawSnifit1:
	LDA Objects_Data4, X
	LSR A
	LSR A
	AND #$02
	ORA Objects_Data5, X
	STA Objects_Frame, X
	JMP Object_Draw

Snifit_Shoot:
	LDA Objects_Timer, X
	BNE Snifit_ShootRTS

	LDA Objects_Data3, X
	CMP #$03
	BNE Snifit_Shoot1

	LDA #$00
	STA Objects_Data3, X
	LDA RandomN
	AND #$03
	TAY
	LDA SnifitShootTimers, Y
	STA Objects_Timer, X
	RTS

Snifit_Shoot1:
	INC Objects_Data3, X
	JSR SpecialObject_FindEmpty
	TYA
	BMI Snifit_ShootRTS

	LDA Objects_SpritesHorizontallyOffScreen, X
	AND #$C0
	BNE Snifit_ShootRTS

	LDA #SOBJ_FIREBALL
	STA SpecialObj_ID,Y

	LDA #$01
	STA SpecialObj_Data2,Y

	LDA <Objects_YZ, X
	ADD #$02
	STA SpecialObj_Y, Y

	LDA <Objects_YHiZ, X
	ADC #$00
	STA SpecialObj_YHi, Y

	LDA Objects_Data2, X
	TAX

	LDA SnifitShootXVel, X
	STA SpecialObj_XVel, Y
	LDA SnifitShootOffset, X
	STA <Temp_Var1

	LDX <CurrentObjectIndexZ

	LDA Objects_Data5, X
	TAX
	LDA SnifitShootYVel, X
	STA SpecialObj_YVel, Y

	LDX <CurrentObjectIndexZ

	LDA #$10
	STA Objects_Timer, X

	LDA <Objects_XZ, X
	ADD <Temp_Var1
	STA SpecialObj_X, Y

	LDA #$00
	STA SpecialObj_Data1, Y

	LDA #$01
	STA SpecialObj_Data2, Y
	

Snifit_ShootRTS:
	RTS

SnifitShootTimers:
	.byte $40, $80, $40, $C0

SnifitShootOffset:
	.byte $0B, $01

SnifitShootXVel:
	.byte $18, $E8

SnifitShootYVel:
	.byte $00, $E8

Snifit_HitWall:
	LDA <Objects_XVelZ, X
	BEQ Snifit_HitWall1RTS
	BPL Snifit_HitWall1

	LDA  <Objects_TilesDetectZ, X
	AND #HIT_LEFTWALL
	BEQ Snifit_HitWall1RTS

	LDA <Objects_XZ, X
	AND #$F0
	ORA #$0E
	STA <Objects_XZ, X
	RTS

Snifit_HitWall1:
	LDA  <Objects_TilesDetectZ, X
	AND #HIT_RIGHTWALL
	BEQ Snifit_HitWall1RTS
	LDA <Objects_XZ, X
	AND #$F0
	ORA #$02
	STA <Objects_XZ, X

Snifit_HitWall1RTS:
	RTS
Spark_Direction = Objects_Data2
Spark_Speed = Objects_Data3
Spark_HitDetect = Objects_Data4

ObjInit_Spark:
	LDA #BOUND16x16BLOCK
	STA Objects_BoundBox, X

	LDA #(ATTR_FIREPROOF | ATTR_ICEPROOF | ATTR_HAMMERPROOF | ATTR_TAILPROOF | ATTR_STOMPPROOF)
	STA Objects_WeaponAttr, X

	LDA #$02
	STA Objects_Health, X

	LDA Objects_Property, X
	AND #$01
	STA Spark_Direction, X

	LDA Objects_Property, X
	AND #$FE
	LSR A
	STA Spark_Speed, X

	LDA #$00
	STA Spark_HitDetect, X
	RTS

; this basically detects certain corners based on current movement direction
SparkDetects:
	.byte (HIT_RIGHTWALL | HIT_GROUND), (HIT_LEFTWALL | HIT_GROUND), (HIT_CEILING | HIT_LEFTWALL), (HIT_RIGHTWALL | HIT_CEILING)
	.byte (HIT_LEFTWALL | HIT_GROUND), (HIT_RIGHTWALL | HIT_GROUND), (HIT_CEILING | HIT_RIGHTWALL), (HIT_LEFTWALL | HIT_CEILING)

SparkYVel:
	.byte $10, $10, $F0, $F0
	.byte $10, $10, $F0, $F0

SparkXVel:
	.byte $10, $F0, $F0, $10
	.byte $F0, $10, $10, $F0

ObjNorm_Spark:
	LDA <Player_HaltGameZ
	BEQ SparkNorm

	JMP Spark_Draw

SparkNorm:
	JSR Object_DeleteOffScreen

	LDA Spark_Speed, X
	STA TempA

ObjNorm_Spark1:
	JSR Spark_Move
	DEC TempA
	BPL ObjNorm_Spark1

	JSR Object_AttackOrDefeat
	JMP Spark_Animate

Spark_Move:
	LDA Spark_Direction, X
	ASL A
	ASL A
	ORA Spark_HitDetect, X
	TAY

	LDA SparkXVel, Y
	STA <Objects_XVelZ, X
	STA Objects_EffectiveXVel,X

	LDA SparkYVel, Y
	STA <Objects_YVelZ, X

	TYA
	AND #$01			; only odd numbered states move vertically, even move horzontally
	BNE NoSparkXVel

	LDA <Objects_YZ, X
	AND #$0F
	BNE ApplySparkX

	JSR Object_ApplyYVel_NoGravity

ApplySparkX:
	JSR Object_ApplyXVel
	JSR Object_CalcBoundBox
	JSR Object_DetectTiles

	LDA Objects_TilesDetectZ, X
	JSR Object_CheckForeground

	LDA <Objects_XZ, X
	AND #$0F
	CMP #$0F
	BEQ SparkHitDetection

	CMP #$01
	BEQ SparkHitDetection
	BNE KeepGoing

NoSparkXVel:
	LDA <Objects_XZ, X
	AND #$0F
	BNE ApplySparkY

	JSR Object_ApplyXVel

ApplySparkY:
	JSR Object_ApplyYVel_NoGravity
	JSR Object_CalcBoundBox
	JSR Object_DetectTiles

	LDA Objects_TilesDetectZ, X
	JSR Object_CheckForeground

	LDA <Objects_YZ, X
	AND #$0F
	CMP #$0E
	BEQ SparkHitDetection

	CMP #$01
	BEQ SparkHitDetection
	BNE KeepGoing

SparkHitDetection:
	LDA Spark_Direction, X		; var1 = 0 -> clockwise movement, var1 = 1 -> counter clockwise
	ASL A
	ASL A
	ORA Spark_HitDetect, X
	TAY

	LDA <Objects_TilesDetectZ, X
	AND SparkDetects, Y  
	BNE WallCeilGrndDet

	LDA Spark_HitDetect, X	; neither corner was detected (no ground or wall) so we need to wrap around the tile
	ADD #$01
	AND #$03
	STA Spark_HitDetect, X
	RTS

WallCeilGrndDet:
	CMP SparkDetects, Y
	BNE KeepGoing
	
	LDA Spark_HitDetect, X		; both corners were detected, we need to crawl against the tile
	SUB #$01
	AND #$03
	STA Spark_HitDetect, X

KeepGoing:						; if we only detected one ground or wall we keep going in the same direction
	RTS

Spark_Animate:
	LDA <Counter_1
	AND #$04
	LSR A
	LSR A
	STA Objects_Frame, X

Spark_Draw:
	JMP Object_DrawMirrored

Bank2_PiranhaSpikeHaltAction:

ObjNorm_GoombaInShoe:

ObjInit_NipperHopping:

NipperJump:

NipperMove:

ObjNorm_Nipper:

ObjNorm_Nipper2:
ObjNorm_Nipper2_2:

ObjNorm_Nipper3:
	
NipperDetermineFrame1:

ObjInit_Toad:
	LDA #BOUND16x24
	STA Objects_BoundBox, X

	LDA Objects_Property,X		 ; Otherwise, Y = 1 
	STA Objects_Data2,X	 ; -> Objects_Data2 (which message Toad gives)

	; Toad is always on the lower screen space
	LDA #$01
	STA <Objects_YHiZ,X

	; Halt the Player
	LDA #$ff
	STA Player_HaltTick

	LDA #$00
	STA <Map_UseItem	; Clear item usage flag
	STA Player_Behind	; Player is not behind anything
	STA ToadTalk_CPos	; Clear the Toad character position counter

	; Set the starting VRAM addresses
	LDA #$28
	STA ToadTalk_VH
	LDA #$c8
	STA ToadTalk_VL

	RTS		 ; Return

PRG002_B23D:
	.byte $08, $04, $02, $01

ObjNorm_Toad:
	STA Objects_Orientation,X
 
	LDA #$01
	STA Player_HaltTick
	LDA #$00
	STA Tile_Anim_Enabled

	; Do Toad's dialog message
	LDA Objects_Data4, X
	LSR A
	AND #$01
	STA Objects_Frame, X
	JSR Object_Draw
	
	LDA Sprite_RAM,Y
	STA Sprite_RAM+8,Y
	LDA Sprite_RAM+4,Y
	STA Sprite_RAM+12,Y

	LDA Sprite_RAM+3,Y
	STA Sprite_RAM+11,Y
	LDA Sprite_RAM+7,Y
	STA Sprite_RAM+15,Y

	LDA Objects_Orientation,X
	ORA #SPR_PAL1
	STA Sprite_RAM+10,Y
	STA Sprite_RAM+14,Y

	LDA #$A9
	STA Sprite_RAM+9,Y
	LDA #$AB
	STA Sprite_RAM+13,Y

	JSR Toad_Speak
	RTS


Toad_Speak:
	LDA Objects_Data1,X	 ; Get current dialog state
	JSR DynJump

	; THESE MUST FOLLOW DynJump FOR THE DYNAMIC JUMP TO WORK!!
	.word Toad_DrawDiagBox		; 0
	.word Toad_DoToadText		; 1
	.word Decide_What_Next		; 2
	.word Do_Shop_Controls		; 6
	.word Bank_Toad		; 7
	.word Do_BadgeShop_Controls

TDiagBox_R1:	.byte $65, $65, $65, $65, $65, $65, $65, $65, $65, $65, $65, $65, $65, $65, $65, $65, $65
TDiagBox_R2:	.byte $65, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $65
TDiagBox_R3:	.byte $65, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $65

TDiagBox_RowOffs:
	.byte (TDiagBox_R1 - TDiagBox_R1), (TDiagBox_R2 - TDiagBox_R1), (TDiagBox_R2 - TDiagBox_R1), (TDiagBox_R2 - TDiagBox_R1)
	.byte (TDiagBox_R2 - TDiagBox_R1), (TDiagBox_R2 - TDiagBox_R1), (TDiagBox_R2 - TDiagBox_R1), (TDiagBox_R3 - TDiagBox_R1)

TDiagBox_RowOffs_End

Toad_DrawDiagBox:
	LDX Graphics_BufCnt	 ; X = current graphics buffer counter

	; Store the current VRAM address into the buffer
	LDA ToadTalk_VH
	STA Graphics_Buffer,X
	LDA ToadTalk_VL
	STA Graphics_Buffer+1,X

	; Store the next row address (+32 bytes to next row)
	ADD #$20	; 32 bytes to next row
	STA ToadTalk_VL
	BCC PRG002_B2D5
	INC ToadTalk_VH	 ; Apply carry
PRG002_B2D5:

	LDA #(TDiagBox_R2 - TDiagBox_R1)	; run count per row
	STA Graphics_Buffer+2,X
	STA <Temp_Var1		 ; -> Temp_Var1

	LDY ToadTalk_CPos	 ; Y = current dialog box row
	LDA TDiagBox_RowOffs,Y
	TAY		 	; Y = offset to this row index

PRG002_B2E3:
	; Store next pattern in dialog box
	LDA TDiagBox_R1,Y
	STA Graphics_Buffer+3,X

	INY		 ; Y++ (next pattern for dialog box)
	INX		 ; X++ (next index in graphics buffer)

	DEC <Temp_Var1	 ; Temp_Var1--
	BNE PRG002_B2E3	 ; While Temp_Var1 > 0, loop!

	; Insert terminator
	LDA #$00
	STA Graphics_Buffer+3,X

	; X += 3
	INX
	INX
	INX
	STX Graphics_BufCnt

	LDX <CurrentObjectIndexZ	 ; X = object slot index

	INC ToadTalk_CPos	 ; Next row

	LDA ToadTalk_CPos
	CMP #(TDiagBox_RowOffs_End - TDiagBox_RowOffs)
	BLT PRG002_B325	 ; If row count < 8, jump to PRG002_B325 (RTS)

	; Dialog box is complete

	LDY Objects_Data2,X	 ; Y = Objects_Data2

	; Toad's Var1 and Var2 store the current pointer to the text he's reciting
	LDA ToadMsg_Low,Y
	STA Objects_Data4,X
	LDA ToadMsg_High,Y
	STA Objects_Data5,X

	; Reset the VRAM address for the dialog text
	LDA #$28
	STA ToadTalk_VH
	LDA #$e9
	STA ToadTalk_VL

	; Toad's timer = $10
	LDA #$10
	STA Objects_Timer,X

	INC Objects_Data1,X	 ; Objects_Data1 = 1 (next dialog state)

PRG002_B325:
	RTS		 ; Return
	
ToadMsg_Shop:
	.byte "WELCOME TO THE "
	.byte "SHOP. USE LEFT "
	.byte "AND RIGHT TO   "
	.byte "BROWSE, A TO   "
	.byte "BUY, B TO LEAVE"
	.byte "THE SHOP.      "

	
ToadMsg_Bank:
	.byte "USE UP AND DOWN"
	.byte "TO SET AMOUNT. "
	.byte "LEFT AND RIGHT "
	.byte "TO SET ACTION. "
	.byte "A TO ACCEPT.   "
	.byte "B TO LEAVE.    "

ToadMsg_Badge:
	.byte "NEED A BADGE? I"
	.byte "ONLY ACCEPT    "
	.byte "CHERRIES. PRESS"
	.byte "LEFT AND RIGHT "
	.byte "TO BROWSE, A TO"
	.byte "TAKE, B TO EXIT"

	; Pointer table to Toad's three messages
	; Warp Whistle
	; Standard
	; Anchor/P-Wing
ToadMsg_Low:	.byte LOW(ToadMsg_Shop), LOW(ToadMsg_Bank), LOW(ToadMsg_Badge)
ToadMsg_High:	.byte HIGH(ToadMsg_Shop), HIGH(ToadMsg_Bank), HIGH(ToadMsg_Badge)


Toad_DoToadText:
	LDA Objects_Timer,X
	BEQ DoNextLetter
	JMP PRG002_B4B1	 ; If timer not expired, jump to PRG002_B4B1

DoNextLetter:

	; Store address of text -> Temp_Var1/2
	LDA Objects_Data4,X
	STA <Temp_Var1
	LDA Objects_Data5,X
	STA <Temp_Var2

	INC Objects_Data4,X	; Next character
	BNE PRG002_B451
	INC Objects_Data5,X	; Apply carry
PRG002_B451:

	LDY #$00	 	; Y = 0
	LDA [Temp_Var1],Y	; Get character here
	TAY		 	; -> 'Y'
	CPY #$20
	BEQ PRG002_B468	 	; If this is a "space", jump to PRG002_B468

	; Play "blip" sound every other letter
	LDA ToadTalk_VL
	LSR A
	BCC PRG002_B468

	; Play text "blip" sound
	LDA Sound_QLevel1
	ORA #SND_LEVELBLIP
	STA Sound_QLevel1

PRG002_B468:
	TYA

	LDY Graphics_BufCnt	 ; Y = graphics buffer counter
	STA Graphics_Buffer+3,Y	 ; Store into buffer

	; Insert one character into graphics buffer
	LDA ToadTalk_VH
	STA Graphics_Buffer,Y	; address high
	LDA #$01	 
	STA Graphics_Buffer+2,Y	; run length
	LSR A
	STA Graphics_Buffer+4,Y	; terminator
	TYA
	ADD #$04
	STA Graphics_BufCnt	; count
	LDA ToadTalk_VL
	STA Graphics_Buffer+1,Y	; address low

	INC ToadTalk_VL	 ; Next VRAM byte
	AND #$1f	 	; Get current column
	CMP #$17
	BNE PRG002_B4AC	 	; If we're not in column 23, jump to PRG024_A25B

	; Line break!

	LDA ToadTalk_VL
	ADC #$10		; Add enough bytes to get to next row
	STA ToadTalk_VL
	BCC PRG002_B4A1
	INC ToadTalk_VH	; Apply carry
PRG002_B4A1:

	CMP #$a9
	BNE PRG002_B4AC	 ; If we haven't reached the last character, jump to PRG002_B4AC

	INC Objects_Data1,X	 ; Objects_Data1 = 2 (next dialog state)
	LDA #$08
	STA Pay_Toll_Timer

	LDA #$00
	STA ToadTalk_CPos

PRG002_B4AC:

	; Set timer to $04
	LDA #$04
	STA Objects_Timer,X

PRG002_B4B1:
	RTS		 ; Return

Platform_Draw:
	LDA #$00
	STA Objects_Orientation, X
	
	LDA Objects_SpritesVerticallyOffScreen,X
	BEQ Platform_DoDraw

	RTS

Platform_DoDraw:
	INC <Objects_YZ, X
	JSR Object_DrawMirrored

	DEC <Objects_YZ, X

	LDA Objects_SpritesHorizontallyOffScreen,X
	AND #SPRITE_2_HINVISIBLE
	BNE Platform_Draw1

	LDA <Objects_SpriteX, X
	ADD #$10
	STA Sprite_RAMX + 8, Y

	LDA <Objects_SpriteY, X
	STA Sprite_RAMY + 8, Y

	LDA Sprite_RAMAttr, Y
	STA Sprite_RAMAttr + 8, Y

	LDA Sprite_RAMTile, Y
	STA Sprite_RAMTile + 8, Y

Platform_Draw1:
	LDA Objects_SpritesHorizontallyOffScreen,X
	AND #SPRITE_3_HINVISIBLE
	BNE Platform_Draw2

	LDA <Objects_SpriteX, X
	ADD #$18
	STA Sprite_RAMX + 12, Y

	LDA <Objects_SpriteY, X
	STA Sprite_RAMY + 12, Y

	LDA Sprite_RAMAttr + 4, Y
	STA Sprite_RAMAttr + 12, Y

	LDA Sprite_RAMTile + 4, Y
	STA Sprite_RAMTile + 12, Y

Platform_Draw2:
	LDA Objects_SpritesHorizontallyOffScreen,X
	AND #SPRITE_4_HINVISIBLE
	BNE Platform_Draw3

	LDA <Objects_SpriteX, X
	ADD #$20
	STA Sprite_RAMX + 16, Y

	LDA <Objects_SpriteY, X
	STA Sprite_RAMY + 16, Y

	LDA Sprite_RAMAttr, Y
	STA Sprite_RAMAttr + 16, Y

	LDA Sprite_RAMTile, Y
	STA Sprite_RAMTile + 16, Y

Platform_Draw3:
	
	LDA Objects_SpritesHorizontallyOffScreen,X
	AND #SPRITE_5_HINVISIBLE
	BNE Platform_Draw4

	LDA <Objects_SpriteX, X
	ADD #$28
	STA Sprite_RAMX + 20, Y

	LDA <Objects_SpriteY, X
	STA Sprite_RAMY + 20, Y

	LDA Sprite_RAMAttr + 4, Y
	STA Sprite_RAMAttr + 20, Y

	LDA Sprite_RAMTile + 4, Y
	STA Sprite_RAMTile + 20, Y

Platform_Draw4:
	RTS		 ; Return

ObjNorm_NipperFireBreathe:
	

ObjInit_DryBones:
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	JSR ObjInit_TowardsPlayer

	LDA #(ATTR_FIREPROOF | ATTR_ICEPROOF | ATTR_TAILPROOF)
	STA Objects_WeaponAttr, X

	LDA #(ATTR_WINDAFFECTS | ATTR_CARRYANDBUMP | ATTR_BUMPNOKILL)

	RTS
	; While Dry Bones is reassembling, provides frame and timer values
DryBones_ReassembleFrames:	.byte $01, $02, $03, $03, $03, $03, $03, $02
DryBones_ReassembleTimers:	.byte $10, $0A, $06, $06, $06, $06, $FF, $0A

; #REDO
	
ObjNorm_DryBones:
	LDA Objects_State,X	  
	CMP #OBJSTATE_KILLED	
	BEQ ObjNorm_DryBones2	

	LDA <Player_HaltGameZ
	BNE ObjNorm_DryBones2	 ; If gameplay is not halted, jump to PRG002_A4C5

ObjNorm_DryBones0:

	JSR Object_DeleteOffScreen
	JSR Object_Move
	JSR Object_InteractWithTiles
	JSR Object_InteractWithPlayer
	BCS ObjNorm_DryBones2

ObjNorm_DryBones1:
	JSR DryBones_Draw		 ; Draw Dry Bones
	
	LDA Objects_Data2,X
	BNE PRG002_B6B2	 ; If Var5 <> 0 (Dry Bones is crumpled), jump to PRG002_B6B2

	JSR Object_InteractWithObjects
	
	INC Objects_Data5,X
	LDA Objects_Data5,X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame,X

ObjNorm_DryBones2:
	JSR DryBones_Draw
	RTS

PRG002_B6B2:

	; Crumpled Dry Bones...

	LDA Objects_Timer,X
	BNE PRG002_B6D0	 ; If timer not expired, jump to PRG002_B6D0 (RTS)

	DEC Objects_Data2,X	 ; Var5--
	BNE PRG002_B6C2	 ; If Var5 <> 0 (still reassembling), jump to PRG002_B6C2

	; Dry Bones gets back up and faces Player!
	JSR ObjInit_TowardsPlayer

	RTS		 ; Return

PRG002_B6C2:

	; Reassembling Dry Bones

	LDY Objects_Data2,X	; Y = Var5 (0 = fully reassembled, hence -1 used below)

	LDA DryBones_ReassembleFrames-1,Y
	STA Objects_Frame,X

	LDA DryBones_ReassembleTimers-1,Y
	STA Objects_Timer,X

PRG002_B6D0:
	RTS		 ; Return

	; Patterns used when Dry Bones is crumbling
DryBones_CrumblePats:	.byte (ObjP3F - ObjectGroup01_PatternSets + $08), (ObjP3F - ObjectGroup01_PatternSets + $0B)
	; Little head bounce when crumbled
DryBones_HeadYOff:	.byte 0, 0, 0, -1, -2, -1, 0, 0, 0

DryBones_Draw:
	LDA Objects_Frame,X
	CMP #$02
	BGE PRG002_B706	 ; If Dry Bones' frame >= 2 (crumbling), jump to PRG002_B706

	; Frame 0 or 1

	; Save Dry Bones' Y/Hi
	LDA <Objects_YHiZ,X
	PHA		
	LDA <Objects_YZ,X
	PHA		

	; Subtract 16 from Dry Bones' Y position
	SUB #16
	STA <Objects_YZ,X
	BCS PRG002_B6F2
	DEC <Objects_YHiZ,X
PRG002_B6F2:

	; Draw Dry Bones
	LDY #$01	 ; 32 pixels height for Object_DetermineVerticallyOffScreenY
	JSR Object_DetermineVerticallyOffScreenY
	JSR Object_Draw16x32

	; Restore Dry Bones' Y/Hi
	PLA
	STA <Objects_YZ,X
	PLA
	STA <Objects_YHiZ,X

	JSR Object_DetermineVerticallyOffScreen
	JMP Object_CalcSpriteXY_NoHi	 ; Calculate sprite X/Y and don't come back!

PRG002_B706:

	; Frame >= 2 (crumbling)...

	LDA Objects_Orientation,X
	ASL A
	ASL A	; Sets carry if horizontally flipped

	; Save Dry Bones' X/Hi
	LDA <Objects_XHiZ,X
	PHA
	LDA <Objects_XZ,X
	PHA

	BCS PRG002_B71C	 ; If Dry Bones is horizontally flipped, jump to PRG002_B71C

	; Subtract 8 from Dry Bones' X position
	SUB #$08
	STA <Objects_XZ,X
	BCS PRG002_B71C
	DEC <Objects_XHiZ,X
PRG002_B71C:

	LDY #$02	 ; Select width = 24 for Object_DetermineHorizontallyOffScreenY
	JSR Object_DetermineHorizontallyOffScreenY	 ; Determine horizontal visibility
	JSR Object_ShakeAndCalcSprite	 ; Calculate sprite X/Y

	LDX <CurrentObjectIndexZ	 	 ; X = object slot index
	LDY Objects_Frame,X	 	 ; Y = Dry Bones' frame

	LDX DryBones_CrumblePats-2,Y	 ; X = pattern start for this frame of Dry Bones (-2 because we start crumbling at frame 2)
	LDY <Temp_Var7			 ; Y = Sprite_RAM offset
	JSR Object_Draw24x16Sprite	 ; Draw wide sprite (crumbled Dry Bones)

	LDX <CurrentObjectIndexZ		 ; X = object slot index
	BIT <Temp_Var3
	BVC PRG002_B73C	 	; If Dry Bones is not horizontally flipped, jump to PRG002_B73C

	; Otherwise, 'Y' += 8 (two sprites over)
	TYA
	ADD #$08
	TAY

PRG002_B73C:
	LDA Objects_Data2,X
	TAX		 ; X = Var5 (head bounce index)

	; Apply bounce to his head after crumbling
	LDA Sprite_RAM+$00,Y
	ADD DryBones_HeadYOff,X	
	STA Sprite_RAM+$00,Y

	LDX <CurrentObjectIndexZ		 ; X = object slot index

	; Restore Dry Bones' X/Hi
	PLA
	STA <Objects_XZ,X
	PLA
	STA <Objects_XHiZ,X

	JSR Object_DetermineHorizontallyOffScreen	 ; Determine horizontal visibility of Dry Bones' sprites
	JMP Object_CalcSpriteXY_NoHi	 ; Calculate Sprite X/Y and don't come back!


ObjHit_DryBones:
	LDA Objects_Data2,X
	BNE PRG002_B77D	 ; If head bouncing, jump to PRG002_B77D (RTS)

	; Head not bouncing yet

	LDA <Temp_Var12
	LSR A
	BCC PRG002_B77E	 ; If not hit by Player jumping on head, jump to PRG002_B77E (Player_GetHurt)

	; Var5 = 9
	LDA #$09
	STA Objects_Data2,X

	; Dry Bones stop horizontal movement
	LDA #$00
	STA <Objects_XVelZ,X

	; Bounce Player
	LDA #-$40
	STA <Player_YVel

	; Crumble sound
	LDA Sound_QLevel2
	ORA #SND_LEVELCRUMBLE
	STA Sound_QLevel2

	INC Kill_Tally

PRG002_B77D:
	RTS		 ; Return

PRG002_B77E:
	JMP Player_GetHurt	 ; Hurt Player and don't come back!

Platform_Offset:
	.byte $00, $01

Platform_PlayerStand:
	LDA <Player_YVel
	BMI Platform_PlayerStand1

	LDA HitTest_Result
	AND #HITTEST_BOTTOM
	BEQ Platform_PlayerStand1

	LDA Player_BoundBottom
	SUB Objects_BoundTop, X
	CMP #$04
	BCS Platform_PlayerStand1

	LDA #$01
	STA Platform_SteppedOn, X
	STA Platform_MadeContact, X

Platform_PlayerStand1:	
	RTS

Platform_PlayerOffset:
	.byte $01, $00
	.byte $00, $00

Platform_ContactCheck:
	LDA Platform_MadeContact, X
	BEQ Platform_CheckRTS
	
	LDA <Objects_YZ,X	 
	SUB #30
	STA <Player_Y

	LDA <Objects_YHiZ,X
	SBC #$00
	STA <Player_YHi

	LDA #$00
	STA <Player_YVel
	STA Player_InAir

	LDA <Objects_XVelZ, X
	STA Player_CarryXVel
	
Platform_CheckRTS:
	RTS

PRG002_BABD:
	CLC
	RTS		 ; Return

	; Attribute by frame
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; #DAHRKDAIZ - Start goal card routine removed
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;	; Returns 'Y' as offset to Mario's or Luigi's inventory memory

Next_Toad_Routine: .byte  $03, $04, $05

; #REDO
Toad_Do_Nothing:
	RTS

Decide_What_Next:
	LDA Objects_Data2, X
	TAY
	LDA Next_Toad_Routine, Y
	STA Objects_Data1, X
	RTS

Do_Shop_Controls:
	STX DAIZ_TEMP1
	LDA #$08
	STA Player_HaltTick
	LDA Shop_Mode_Initialized
	BEQ Initialize_Shop_Mode
	LDA <Pad_Input
	AND #PAD_RIGHT
	BEQ Try_Shop_Left
	JSR Move_Items_Right
	JSR Draw_Current_Items
	JMP Shop_RTS

Try_Shop_Left:
	LDA <Pad_Input
	AND #PAD_LEFT
	BEQ Try_Leave_Shop
	JSR Move_Items_Left
	JSR Draw_Current_Items
	JMP Shop_RTS

Try_Leave_Shop:
	LDA <Pad_Input
	AND #PAD_B
	BEQ Try_Buy_Item
	INC Level_ExitToMap
	JMP Shop_RTS

Try_Buy_Item:
	LDA <Pad_Input
	AND #PAD_A
	BEQ Shop_RTS
	JSR Buy_Item
Shop_RTS:

	LDX DAIZ_TEMP1
	RTS

Item_Frame_Top:		.byte $D8, $D9, $D9, $DA
Item_Frame_Bottom:	.byte $E8, $E9, $E9, $EA

Initialize_Shop_Mode:
	LDA #$00 
	STA Item_Shop_Window + 1
	LDA #$01
	STA Item_Shop_Window + 2
	LDA #(Max_Item_Count - 1)
	STA Item_Shop_Window
	STA Shop_Mode_Initialized
	LDY Graphics_BufCnt
	LDA #$2A
	STA Graphics_Buffer, Y
	INY
	LDA #$2E
	STA Graphics_Buffer, Y
	INY
	LDA #$04
	STA Graphics_Buffer, Y
	INY
	LDX #$00

Top_Frame_Loop:
	LDA Item_Frame_Top, X
	STA Graphics_Buffer, Y
	INY
	INX
	CPX #$04
	BNE Top_Frame_Loop
	LDA #$2A
	STA Graphics_Buffer, Y
	INY
	LDA #$8E
	STA Graphics_Buffer, Y
	INY
	LDA #$04
	STA Graphics_Buffer, Y
	INY
	LDX #$00

Bottom_Frame_Loop:
	LDA Item_Frame_Bottom, X
	STA Graphics_Buffer, Y
	INY
	INX
	CPX #$04
	BNE Bottom_Frame_Loop
	LDA #$00
	STA Graphics_Buffer, Y
	LDA Graphics_BufCnt
	CLC
	ADC #$0E
	STA Graphics_BufCnt
	JSR Draw_Current_Items
	RTS

Move_Items_Right:
	LDA Sound_QLevel1
	ORA #SND_LEVELBLIP
	STA Sound_QLevel1
	INC Item_Shop_Window
	INC Item_Shop_Window + 1
	INC Item_Shop_Window + 2
	LDX #$02

Check_OverFlow_Item:
	LDA Item_Shop_Window, X
	CMP #Max_Item_Count
	BNE Next_Item_Please
	LDA #$00
	STA Item_Shop_Window, X
Next_Item_Please:
	DEX
	BPL Check_OverFlow_Item
	RTS

Move_Items_Left:
	LDA Sound_QLevel1
	ORA #SND_LEVELBLIP
	STA Sound_QLevel1
	DEC Item_Shop_Window
	DEC Item_Shop_Window + 1
	DEC Item_Shop_Window + 2
	LDX #$02

Check_UnderFlow_Item:
	LDA Item_Shop_Window, X
	CMP #$FF
	BNE Next_Item_Please2
	LDA #(Max_Item_Count - 1)
	STA Item_Shop_Window, X

Next_Item_Please2:
	DEX
	BPL Check_UnderFlow_Item
	RTS

Item_Tiles:
	.byte $68, $69, $78, $79
	.byte $6A, $6B, $7A, $7B
	.byte $6C, $6D, $7C, $7D
	.byte $6E, $6F, $7E, $7F
	.byte $86, $87, $96, $97
	.byte $A4, $A5, $A6, $A7
	.byte $DE, $DF, $EE, $EF	; ITEM_STAR2
	.byte $DE, $DF, $EE, $EF	; ITEM_STAR2


	
Item_Prices:
	.byte $00, $05, $00, $00
	.byte $01, $00, $00, $00
	.byte $00, $08, $00, $00
	.byte $02, $00, $00, $00
	.byte $01, $02, $00, $00
	.byte $02, $00, $00, $00
	.byte $02, $08, $00, $00
	.byte $03, $06, $00, $00

Draw_Current_Items:
	LDA #$00
	STA DAIZ_TEMP1
	LDY Graphics_BufCnt
	LDA #$2A
	STA Graphics_Buffer, Y
	INY
	LDA #$4C
	STA Graphics_Buffer, Y
	INY
	LDA #$08
	STA Graphics_Buffer, Y
	INY

Draw_Item_Window_Top:
	LDX DAIZ_TEMP1
	LDA Item_Shop_Window, X
	ASL A
	ASL A
	TAX
	LDA Item_Tiles, X
	STA Graphics_Buffer, Y
	INY
	LDA Item_Tiles + 1, X
	STA Graphics_Buffer, Y
	INY
	INY
	INC DAIZ_TEMP1
	LDA DAIZ_TEMP1
	CMP #$03
	BNE Draw_Item_Window_Top
	LDY Graphics_BufCnt
	LDA #$F8
	STA Graphics_Buffer + 5, Y
	LDA #$FA
	STA Graphics_Buffer + 8, Y

	LDA #$00
	STA DAIZ_TEMP1
	LDA Graphics_BufCnt
	CLC
	ADC #$0B
	STA Graphics_BufCnt
	TAY
	LDA #$2A
	STA Graphics_Buffer, Y
	INY
	LDA #$6C
	STA Graphics_Buffer, Y
	INY
	LDA #$08
	STA Graphics_Buffer, Y
	INY

Draw_Item_Window_Bottom:
	LDX DAIZ_TEMP1
	LDA Item_Shop_Window, X
	ASL A
	ASL A
	TAX
	INX
	INX
	LDA Item_Tiles, X
	STA Graphics_Buffer, Y
	INY
	LDA Item_Tiles + 1, X
	STA Graphics_Buffer, Y
	INY
	INY
	INC DAIZ_TEMP1
	LDA DAIZ_TEMP1
	CMP #$03
	BNE Draw_Item_Window_Bottom
	LDY Graphics_BufCnt
	LDA #$F8
	STA Graphics_Buffer + 5, Y
	LDA #$FA
	STA Graphics_Buffer + 8, Y
	LDA #$00
	STA Graphics_Buffer + 11, Y
	LDA Graphics_BufCnt
	CLC
	ADC #$0B
	STA Graphics_BufCnt

	LDA Item_Shop_Window + 1
	ASL A
	ASL A
	TAX
	LDA #$00
	STA DAIZ_TEMP1

	LDY Graphics_BufCnt
	LDA #$2A
	STA Graphics_Buffer, Y
	INY
	LDA #$AE
	STA Graphics_Buffer, Y
	INY
	LDA #$04
	STA Graphics_Buffer, Y
	INY

Next_Price_Digit:
	LDA Item_Prices, X
	CMP #$7F
	BEQ Skip_Digit
	CLC
	ADC #$22

Skip_Digit:
	STA Graphics_Buffer, Y
	INY
	INX
	INC DAIZ_TEMP1
	LDA DAIZ_TEMP1
	CMP #$04
	BNE Next_Price_Digit
	LDA #$00
	STA Graphics_Buffer, Y
	LDA Graphics_BufCnt
	CLC
	ADC #$08
	STA Graphics_BufCnt
	RTS

Buy_Item:
	;JSR Clear_Calc
	LDA Item_Shop_Window + 1
	ASL A
	ASL A
	TAX
	INX
	INX
	INX
	LDY #$07

Store_Next_Price:
	LDA Item_Prices, X
	;STA Calc_Value, Y
	DEX
	DEY
	CPY #$03
	BNE Store_Next_Price
	LDX #$03

Store_Next_Coin:
	LDA Player_Coins, X
	;STA Calc_From + 4, Y
	DEX
	DEY
	BPL Store_Next_Coin
	;JSR Subtract_Values
	;LDA Calc_From + 3
	BEQ Take_Item

Cannot_Take_Item:
	LDA Sound_QMap		; Not enough coins
	ORA #SND_MAPDENY
	STA Sound_QMap
	RTS

Take_Item:
	LDX Item_Shop_Window + 1
	INC Inventory_Items, X
	LDA Sound_QLevel1
	ORA #SND_LEVELCOIN
	STA Sound_QLevel1
	STA Force_Coin_Update
	LDX #$03

Store_New_Coin:
	;LDA Calc_From + 4, X
	STA Player_Coins, X
	DEX
	BPL Store_New_Coin
	RTS

Bank_Toad:
	LDA #$02
	STA Player_HaltTick
	LDA Shop_Mode_Initialized
	JSR DynJump
	
	.word Bank_Init1
	.word Bank_Init2
	.word Do_Bank

WithdrawDepositFrames:
	.byte $2E, $6A, $0E, $00, $01, $01, $01, $01, $02, $00, $01, $01, $01, $01, $01, $01, $02
	.byte $2E, $8A, $0E, $10, $7E, $7E, $7E, $7E, $12, $10, $7E, $7E, $7E, $7E, $7E, $7E, $12
	.byte $2E, $AA, $0E, $20, $21, $21, $21, $21, $22, $20, $21, $21, $21, $21, $21, $21, $22

ActionFrames:
	.byte $2E, $0A, $0E, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $02
	.byte $2E, $2A, $0E, $10, $7E, $C4, $C5, $D0, $CF, $D3, $C9, $D4, $7E, $7E, $7E, $7E, $12
	.byte $2E, $4A, $0E, $20, $21, $21, $21, $21, $21, $21, $21, $21, $21, $21, $21, $21, $22

Bank_Init1:
	JSR Draw_BankFrames
	INC Shop_Mode_Initialized
	RTS

Bank_Init2:
	JSR Draw_ActionFrames
	INC Shop_Mode_Initialized
	RTS

Draw_BankFrames:
	LDY Graphics_BufCnt
	LDX #$00

DoDrawBF:
	LDA WithdrawDepositFrames, X
	STA Graphics_Buffer, Y
	INY
	INX
	CPX #$33
	BNE DoDrawBF
	INY
	STY Graphics_BufCnt
	RTS

Draw_ActionFrames:
	LDY Graphics_BufCnt
	LDX #$00

DoDrawAct:
	LDA ActionFrames, X
	STA Graphics_Buffer, Y
	INY
	INX
	CPX #$33
	BNE DoDrawAct
	INY
	STY Graphics_BufCnt
	RTS

Do_Bank:
	;JSR Clear_Calc
	LDA <Pad_Input
	AND #(PAD_UP | PAD_DOWN)
	BNE Do_Small_Change

	LDA <Pad_Holding
	AND #(PAD_UP | PAD_DOWN)
	BEQ Update_Action

	INC SpinnerBlocksX + 5
	
	LDX SpinnerBlocksX + 5
	CPX #$07
	BNE Done_Bank

Do_Small_Change:
	LDX #$01
	STX SpinnerBlocksX + 5
	;STX Calc_Value + 6
	AND #PAD_UP
	BEQ Decrease_By_Ten
	JSR Add_To_DW
	JMP Update_Bank

Decrease_By_Ten:
	JSR Sub_From_DW

Update_Bank:
	JSR Update_DepositWithdraw
	JMP Done_Bank

Update_Action:
	LDA <Pad_Input
	AND #(PAD_LEFT | PAD_RIGHT)
	BEQ Update_Bank
	INC SpinnerBlocksX + 6
	JSR Draw_Action

Done_Bank:
	LDA <Pad_Input
	AND #PAD_B
	BEQ Try_Bank_Action
	INC Level_ExitToMap

Try_Bank_Action:
	LDA <Pad_Input
	AND #PAD_A
	BEQ Bank_RTS
	JSR Do_Action

Bank_RTS
	RTS

Action_Tiles:
	.byte "DEPOSIT "
	.byte "WITHDRAW"

Draw_Action:
	LDY Graphics_BufCnt
	LDA #$2A
	STA Graphics_Buffer, Y
	LDA #$2C
	STA Graphics_Buffer + 1, Y
	LDA #$08
	STA Graphics_Buffer + 2, Y
	LDA SpinnerBlocksX + 6
	AND #$01
	ASL A
	ASL A
	ASL A
	TAX
	LDA #$07
	STA <Temp_Var1

DrawAction:
	LDA Action_Tiles, X
	ADD #$80
	STA Graphics_Buffer + 3, Y
	INY
	INX
	DEC <Temp_Var1
	BPL DrawAction
	TYA
	ADD #$03
	TAY
	STY Graphics_BufCnt
	LDA #$00
	STA Graphics_Buffer, Y
	RTS

Set_DW_Amount:
	LDX #$00

CopyDWAmount:
	LDA SpinnerBlocksX, X
	;STA Calc_From + 4, X
	INX
	CPX #$04
	BNE CopyDWAmount
	RTS

Set_New_DW_Amount:
	LDX #$00

CopyNewDWAmount:
	;LDA Calc_From + 4, X
	STA SpinnerBlocksX, X
	INX
	CPX #$04
	BNE CopyNewDWAmount
	RTS

Add_To_DW:
	LDX #$02

TestMaxDWMax:
	
	LDA SpinnerBlocksX, X
	CMP #$09
	BCC Do_DW_Add
	DEX
	BPL TestMaxDWMax
	RTS

Do_DW_Add:
	JSR Set_DW_Amount
	;JSR Add_Values
	JSR Set_New_DW_Amount
	LDA Sound_QLevel1
	ORA #SND_LEVELBLIP
	STA Sound_QLevel1
	RTS

Sub_From_DW:
	LDX #$02
	LDA #$00

TestMaxDWMin:
	ADD SpinnerBlocksX, X
	DEX
	BPL TestMaxDWMin
	CMP #$00
	BNE Do_DW_Sub
	RTS

Do_DW_Sub:
	JSR Set_DW_Amount
	;JSR Subtract_Values
	JSR Set_New_DW_Amount
	LDA Sound_QLevel1
	ORA #SND_LEVELBLIP
	STA Sound_QLevel1
	RTS

Update_DepositWithdraw: ; - reusing spinner area for this part

	LDY Graphics_BufCnt
	LDA #$2A
	STA Graphics_Buffer, Y
	LDA #$8B
	STA Graphics_Buffer + 1, Y
	LDA #$04
	STA Graphics_Buffer + 2, Y
	LDA #$00
	STA Graphics_Buffer + 7, Y

	LDX #$00

DrawDWAmount:
	LDA SpinnerBlocksX, X
	ADD #$B0
	STA Graphics_Buffer + 3, Y
	INY
	INX
	CPX #$04
	BNE DrawDWAmount
	TYA
	ADD #$03
	TAY
	LDA #$2A
	STA Graphics_Buffer, Y
	LDA #$91
	STA Graphics_Buffer + 1, Y
	LDA #$06
	STA Graphics_Buffer + 2, Y
	
	LDX #$00
	

DrawBankAmount:
	LDA BankCoins, X
	ADD #$B0
	STA Graphics_Buffer + 3, Y
	INY
	INX
	CPX #$06
	BNE DrawBankAmount
	TYA
	ADD #$03
	TAY
	LDA #$00
	STA Graphics_Buffer, Y
	STY Graphics_BufCnt
	RTS

Do_Action:
	LDA SpinnerBlocksX + 6
	AND #$01
	BNE Do_Withdraw_Instead
	JSR Set_Player_Coins_From
	JSR Set_DW_Coins_Value
	;JSR Subtract_Values
	;LDA Calc_From
	BMI Cannot_Do_Action
	JSR Backup_From_Value
	JSR Set_Bank_Coins_From
	;JSR Add_Values
	;LDA Calc_From + 1
	CMP #$01
	BCS Cannot_Do_Action
	JSR Set_New_Bank_Value
	JSR Set_New_Player_Coins
	LDA Sound_QLevel1
	ORA #SND_LEVELCOIN
	STA Sound_QLevel1
	STA Force_Coin_Update
	RTS

Do_Withdraw_Instead:
	JSR Set_Player_Coins_From
	JSR Set_DW_Coins_Value
	;JSR Add_Values
	;LDA Calc_From + 3
	CMP #$01
	BCS Cannot_Do_Action
	JSR Backup_From_Value
	JSR Set_Bank_Coins_From
	;JSR Subtract_Values
	;LDA Calc_From
	BMI Cannot_Do_Action
	JSR Set_New_Bank_Value
	JSR Set_New_Player_Coins
	LDA Sound_QLevel1
	ORA #SND_LEVELCOIN
	STA Sound_QLevel1
	STA Force_Coin_Update
	RTS

Cannot_Do_Action:
	LDA Sound_QMap		; Not enough coins
	ORA #SND_MAPDENY
	STA Sound_QMap
	RTS

Set_Player_Coins_From:
	LDX #$03

SPCF:
	LDA Player_Coins, X
	;STA Calc_From + 4, X
	DEX
	BPL SPCF
	RTS

Set_Bank_Coins_From:
	LDX #$00

SBCF:
	LDA BankCoins, X
	;STA Calc_From + 2, X
	INX
	CPX #$06
	BNE SBCF
	RTS

Set_DW_Coins_Value:
	LDX #$03

SDWCV:
	LDA SpinnerBlocksX, X
	;STA Calc_Value + 4, X
	DEX
	BPL SDWCV
	RTS

Backup_From_Value:
	LDX #$03

BFV:
	;LDA Calc_From + 4, X
	STA SpinnerBlocksY, X
	DEX
	BPL BFV
	RTS

Set_New_Bank_Value:
	LDX #$05

SNBV:
	;LDA Calc_From + 2, X
	STA BankCoins, X
	DEX
	BPL SNBV
	RTS

Set_New_Player_Coins:
	LDX #$03

SNPC:
	LDA SpinnerBlocksY, X
	STA Player_Coins, X
	DEX
	BPL SNPC
	RTS


Player_Take_Coins:
	LDA <Counter_1
	AND #$03
	BNE No_More_Coins
	INC Coins_Lost
	;JSR Clear_Calc
	LDX #$03

Store_Next_Coin1:
	LDA Player_Coins, X
	;STA Calc_From + 4, X
	DEX
	BPL Store_Next_Coin1
	LDA #$01
	;STA Calc_Value + 7
	;JSR Subtract_Values
	;LDA Calc_From
	BMI No_More_Coins
	LDX #$03

Taking_Coins:
	;LDA Calc_From + 4, X
	STA Player_Coins, X
	DEX
	BPL Taking_Coins
	LDA Sound_QLevel1
	ORA #SND_LEVELCOIN
	STA Sound_QLevel1
	STA Force_Coin_Update

No_More_Coins:
	LDX DAIZ_TEMP1
	RTS

Do_BadgeShop_Controls:
	STX DAIZ_TEMP1
	LDA #$08
	STA Player_HaltTick
	LDA Shop_Mode_Initialized
	BEQ Initialize_BadgeShop_Mode
	LDA <Pad_Input
	AND #PAD_RIGHT
	BEQ Try_BadgeShop_Left
	JSR Move_Badges_Right
	JSR Draw_Current_Badges
	JMP BadgeShop_RTS

Try_BadgeShop_Left:
	LDA <Pad_Input
	AND #PAD_LEFT
	BEQ Try_Leave_BadgeShop
	JSR Move_Badges_Left
	JSR Draw_Current_Badges
	JMP BadgeShop_RTS

Try_Leave_BadgeShop:
	LDA <Pad_Input
	AND #PAD_B
	BEQ Try_Buy_Badge
	INC Level_ExitToMap
	JMP BadgeShop_RTS

Try_Buy_Badge:
	LDA <Pad_Input
	AND #PAD_A
	BEQ BadgeShop_RTS
	JSR Buy_Badge
BadgeShop_RTS:

	LDX DAIZ_TEMP1
	RTS

Initialize_BadgeShop_Mode:
	LDA #$00 
	STA Item_Shop_Window + 1
	LDA #$01
	STA Item_Shop_Window + 2
	LDA #(Max_Item_Count - 1)
	STA Item_Shop_Window
	STA Shop_Mode_Initialized
	LDY Graphics_BufCnt
	LDA #$2A
	STA Graphics_Buffer, Y
	INY
	LDA #$2E
	STA Graphics_Buffer, Y
	INY
	LDA #$04
	STA Graphics_Buffer, Y
	INY
	LDX #$00

Top_BadgeFrame_Loop:
	LDA Item_Frame_Top, X
	STA Graphics_Buffer, Y
	INY
	INX
	CPX #$04
	BNE Top_BadgeFrame_Loop
	LDA #$2A
	STA Graphics_Buffer, Y
	INY
	LDA #$8E
	STA Graphics_Buffer, Y
	INY
	LDA #$04
	STA Graphics_Buffer, Y
	INY
	LDX #$00

Bottom_BadgeFrame_Loop:
	LDA Item_Frame_Bottom, X
	STA Graphics_Buffer, Y
	INY
	INX
	CPX #$04
	BNE Bottom_BadgeFrame_Loop
	LDA #$00
	STA Graphics_Buffer, Y
	LDA Graphics_BufCnt
	CLC
	ADC #$0E
	STA Graphics_BufCnt
	JSR Draw_Current_Badges
	RTS


Move_Badges_Right:
	LDA Sound_QLevel1
	ORA #SND_LEVELBLIP
	STA Sound_QLevel1
	INC Item_Shop_Window
	INC Item_Shop_Window + 1
	INC Item_Shop_Window + 2
	LDX #$02

Check_OverFlow_Badge:
	LDA Item_Shop_Window, X
	CMP #Max_Item_Count
	BNE Next_Badge_Please
	LDA #$00
	STA Item_Shop_Window, X

Next_Badge_Please:
	DEX
	BPL Check_OverFlow_Badge
	RTS

Move_Badges_Left:
	LDA Sound_QLevel1
	ORA #SND_LEVELBLIP
	STA Sound_QLevel1
	DEC Item_Shop_Window
	DEC Item_Shop_Window + 1
	DEC Item_Shop_Window + 2
	LDX #$02

Check_UnderFlow_Badge:
	LDA Item_Shop_Window, X
	CMP #$FF
	BNE Next_Badge_Please2
	LDA #(Max_Item_Count - 1)
	STA Item_Shop_Window, X

Next_Badge_Please2:
	DEX
	BPL Check_UnderFlow_Badge
	RTS

Badge_Tiles:
	.byte $00, $01, $10, $11
	.byte $02, $03, $12, $13
	.byte $04, $05, $14, $15
	.byte $06, $07, $16, $17
	.byte $08, $09, $18, $19
	.byte $0A, $0B, $1A, $1B
	.byte $0C, $0D, $1C, $1D	
	.byte $0E, $0F, $1E, $1F	

	
Badge_Prices:
	.byte $01
	.byte $02
	.byte $03
	.byte $04
	.byte $05
	.byte $06
	.byte $07
	.byte $08

Draw_Current_Badges:
	LDA #$00
	STA DAIZ_TEMP1
	LDY Graphics_BufCnt
	LDA #$2A
	STA Graphics_Buffer, Y
	INY
	LDA #$4C
	STA Graphics_Buffer, Y
	INY
	LDA #$08
	STA Graphics_Buffer, Y
	INY

Draw_Badge_Window_Top:
	LDX DAIZ_TEMP1
	LDA Item_Shop_Window, X
	ASL A
	ASL A
	TAX
	LDA Badge_Tiles, X
	STA Graphics_Buffer, Y
	INY
	LDA Badge_Tiles + 1, X
	STA Graphics_Buffer, Y
	INY
	INY
	INC DAIZ_TEMP1
	LDA DAIZ_TEMP1
	CMP #$03
	BNE Draw_Badge_Window_Top
	LDY Graphics_BufCnt
	LDA #$F8
	STA Graphics_Buffer + 5, Y
	LDA #$FA
	STA Graphics_Buffer + 8, Y

	LDA #$00
	STA DAIZ_TEMP1
	LDA Graphics_BufCnt
	CLC
	ADC #$0B
	STA Graphics_BufCnt
	TAY
	LDA #$2A
	STA Graphics_Buffer, Y
	INY
	LDA #$6C
	STA Graphics_Buffer, Y
	INY
	LDA #$08
	STA Graphics_Buffer, Y
	INY

Draw_Badge_Window_Bottom:
	LDX DAIZ_TEMP1
	LDA Item_Shop_Window, X
	ASL A
	ASL A
	TAX
	INX
	INX
	LDA Badge_Tiles, X
	STA Graphics_Buffer, Y
	INY
	LDA Badge_Tiles + 1, X
	STA Graphics_Buffer, Y
	INY
	INY
	INC DAIZ_TEMP1
	LDA DAIZ_TEMP1
	CMP #$03
	BNE Draw_Badge_Window_Bottom
	LDY Graphics_BufCnt
	LDA #$F8
	STA Graphics_Buffer + 5, Y
	LDA #$FA
	STA Graphics_Buffer + 8, Y
	LDA #$00
	STA Graphics_Buffer + 11, Y
	LDA Graphics_BufCnt
	CLC
	ADC #$0B
	STA Graphics_BufCnt

	LDX Item_Shop_Window + 1
	LDA #$00
	STA DAIZ_TEMP1

	LDY Graphics_BufCnt
	LDA #$2A
	STA Graphics_Buffer, Y
	INY
	LDA #$AF
	STA Graphics_Buffer, Y
	INY
	LDA #$02
	STA Graphics_Buffer, Y
	INY
	LDA Badge_Prices, X
	;JSR ToThreeDigits

Next_BadgePrice_Digit:
	LDA <Temp_Var2
	ORA #$30
	STA Graphics_Buffer, Y
	INY
	LDA <Temp_Var3
	ORA #$30
	STA Graphics_Buffer, Y
	INY
	LDA #$00
	STA Graphics_Buffer, Y
	LDA Graphics_BufCnt
	CLC
	ADC #$08
	STA Graphics_BufCnt
	RTS

Buy_Badge:
	;JSR Clear_Calc
	LDX Item_Shop_Window + 1
	LDA Cherries
	SUB Badge_Prices, X
	BMI Cannot_Take_Badge
	BPL Take_Badge

Cannot_Take_Badge:
	LDA Sound_QMap		; Not enough coins
	ORA #SND_MAPDENY
	STA Sound_QMap
	RTS

Take_Badge:
	STA Cherries
	LDX Item_Shop_Window + 1
	INC Inventory_Items + 8, X
	LDA Sound_QLevel1
	ORA #SND_LEVELBLIP
	STA Sound_QLevel1
	RTS

Ricochet_Direction = Objects_Data4

Diagonal_PodoboInitXVel:
	.byte $F0, $F0, $10, $10

Diagonal_PodoboInitYVel:
	.byte $10, $F0, $F0, $10

Diagonal_PodoboSpriteFlips:
	.byte SPR_VFLIP, $00, SPR_HFLIP, SPR_VFLIP | SPR_HFLIP

ObjInit_DiagonalPodobo:
	LDA #(ATTR_FIREPROOF | ATTR_HAMMERPROOF | ATTR_NINJAPROOF | ATTR_TAILPROOF | ATTR_DASHPROOF | ATTR_STOMPPROOF)
	STA Objects_WeaponAttr, X

	LDA #(ATTR_SHELLPROOF | ATTR_NOICE )
	STA Objects_BehaviorAttr, X

	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA Objects_Property, X
	TAY

	LDA Diagonal_PodoboInitXVel, Y
	STA Objects_XVelZ, X

	LDA Diagonal_PodoboInitYVel, Y
	STA Objects_YVelZ, X

	LDA Diagonal_PodoboSpriteFlips, Y
	STA Objects_Orientation, X

	LDA #$01
	STA Objects_Health, X
	RTS

ObjNorm_DiagonalPodobo:
	LDA <Player_HaltGameZ
	BNE ObjNorm_DiagonalPodoboEnd

	JSR Object_DeleteOffScreen
	
	LDA Ricochet_Direction, X
	CMP #$0A
	BCS ObjNorm_DiagonalPodobo0

	INC Ricochet_Direction, X
	BNE ObjNorm_DiagonalPodobo01

ObjNorm_DiagonalPodobo0
	LDA #$00
	STA Ricochet_Direction, X
	
ObjNorm_DiagonalPodobo01:
	LDA Ricochet_Direction, X
	LSR A
	LSR A
	STA Objects_Frame, X

	INC Object_DisableWater
	JSR Object_ApplyXVel
	JSR Object_ApplyYVel_NoGravity
	
	JSR Object_CalcBoundBox
	JSR Object_DetectTiles
	JSR Object_CheckForeground

	LDA <Objects_YZ, X
	AND #$0F
	BNE Podobo_RichocetCheck

	LDA Object_BodyTileProp, X
	AND #TILE_PROP_WATER
	BNE Podobo_Richocet

Podobo_RichocetCheck:
	LDA <Objects_TilesDetectZ,X
	AND #(HIT_GROUND | HIT_CEILING)
	BEQ ObjNorm_DiagonalPodobo1
	

Podobo_Richocet:
	LDA <Objects_YVelZ,X	 
	
	EOR #$FF
	ADD #$01
	
	STA <Objects_YVelZ,X
	
	LDA Objects_Orientation, X
	EOR #SPR_VFLIP
	STA Objects_Orientation, X

ObjNorm_DiagonalPodobo1:
	LDA <Objects_TilesDetectZ,X
	AND #(HIT_LEFTWALL | HIT_RIGHTWALL)
	BEQ ObjNorm_DiagonalPodobo2
	
	LDA <Objects_XVelZ,X	 
	
	EOR #$FF
	ADD #$01
	
	STA <Objects_XVelZ, X

	LDA Objects_Orientation, X
	EOR #SPR_HFLIP
	STA Objects_Orientation, X

ObjNorm_DiagonalPodobo2:
	JSR Object_AttackOrDefeat

ObjNorm_DiagonalPodoboEnd:
	JMP Object_Draw

Birdo_WalkTicker = Objects_Data1
Birdo_Pause = Objects_Data2
Birdo_HurtTimer = Objects_Data3
Birdo_PrevHealth = Objects_Data4
Birdo_PalState = Objects_Data5
Birdo_TickIndex = Objects_Data6

Birdo_FireBallYVel:
	.byte $00, $03, $06, $09
	.byte $00, $FD, $FA, $F7

Birdo_Pal:
	.byte SPR_PAL1, SPR_PAL2

ObjInit_Birdo:
	LDA #$04
	STA Objects_SpritesRequested, X

	LDA #BOUND16x32TALL
	STA Objects_BoundBox, X

	LDA #(ATTR_ICEPROOF)
	STA Objects_WeaponAttr, X

	LDA #(ATTR_NOICE | ATTR_BUMPNOKILL)
	STA Objects_BehaviorAttr, X

	LDA RandomN
	AND #$03
	TAY

	LDA Birdo_ShootTimers, Y
	STA Objects_Timer, X

	LDA #$08
	STA Objects_ExpPoints, X

	LDA #$04
	STA Objects_Health, X
	STA Birdo_PrevHealth, X

	LDY Objects_Property, X

	LDA Birdo_Pal, Y
	STA Objects_SpriteAttributes, X
	STA Birdo_PalState, X
	RTS

Birdo_Walk:
	.byte $00, $0C, $00, $F4
	.byte $01, $01, $FF, $FF

Birdo_EggShoot:
	.byte $E0, $20

Birdo_ShootTimers:
	.byte $80, $C0, $A0, $E0

ObjNorm_Birdo:
	LDA <Player_HaltGameZ
	BEQ ObjNorm_Birdo1
	JMP Birdo_Draw

ObjNorm_Birdo1:
	LDA Objects_State, X
	CMP #OBJSTATE_KILLED
	BNE ObjNorm_Birdo2
	
	JMP Object_Draw16x32

ObjNorm_Birdo2:
	JSR Object_DeleteOffScreen

	LDA Objects_Health, X
	CMP Birdo_PrevHealth, X
	BEQ Birdo_NotHit

	LDA Birdo_HurtTimer, X
	BEQ Birdo_Hit
	
	LDA Birdo_PrevHealth, X
	STA Objects_Health, X
	JMP Birdo_NotHit

Birdo_Hit:
	LDA Objects_Health, X
	STA Birdo_PrevHealth, X
	
	LDA #$1F
	STA Birdo_HurtTimer, X
	STA Objects_Timer2, X

Birdo_NotHit:
	LDA Birdo_HurtTimer, X
	BEQ Birdo_CheckPause

	DEC Birdo_HurtTimer, X
	JMP ObjNorm_BirdoDraw

Birdo_CheckPause:
	LDA Birdo_Pause, X
	BNE Birdo_PauseShoot

Birdo_Waltz:
	INC Birdo_WalkTicker, X
	LDA Birdo_WalkTicker, X
	AND #$C0
	CLC
	ROL A
	ROL A
	ROL A
	TAY

	STA Birdo_TickIndex, X

	LDA Birdo_Walk, Y
	STA Objects_XVelZ, X 

	LDA Objects_Timer, X
	BEQ Birdo_ResetTimer
	
	JMP Birdo_Norm
	
Birdo_ResetTimer:
	LDA #$20
	STA Objects_Timer, X

	LDA #$00
	STA Objects_XVelZ, X

	LDA #$02
	STA Birdo_Pause, X
	JMP Birdo_Norm

Birdo_PauseShoot:
	LDA Objects_Timer, X
	BNE Birdo_TryShoot

	LDA RandomN
	AND #$03
	TAY

	LDA Birdo_ShootTimers, Y
	STA Objects_Timer, X

	LDA #$00
	STA Birdo_Pause, X

Birdo_TryShoot:
	CMP #$08
	BNE Birdo_Norm

	LDA Objects_SpritesVerticallyOffScreen,X
	ORA Objects_SpritesHorizontallyOffScreen,X
	BNE Birdo_Norm

	LDY #$00
	LDA Objects_Orientation, X
	BEQ Birdo_EggNoFlip
	
	INY

Birdo_EggNoFlip:
	LDA Birdo_EggShoot, Y
	STA <Temp_Var16

	JSR SpecialObject_FindEmpty
	CPY #$FF
	BEQ Birdo_Norm

	LDA #$00
	STA SpecialObj_YVel,Y

	LDA Objects_Property, X
	BEQ Birdo_ShootEgg
	 
	LDA RandomN
	AND #$07
	TAX

	LDA Birdo_FireBallYVel, X
	STA SpecialObj_YVel,Y

	LDX <CurrentObjectIndexZ

	LDA #SOBJ_BIGFIREBALL
	BNE Birdo_Shoot

Birdo_ShootEgg:
	LDA #SOBJ_EGG

Birdo_Shoot:
	STA SpecialObj_ID,Y

	LDA #$10
	STA SpecialObj_Timer,Y

	LDA #$00
	STA SpecialObj_HurtEnemies, Y
	
	STA Egg_HitWall, Y

	LDA <Objects_XZ,X
	STA SpecialObj_X,Y

	LDA <Objects_XHiZ,X
	STA SpecialObj_XHi,Y

	LDA <Objects_YZ,X
	ADD #$00
	STA SpecialObj_Y,Y

	LDA <Objects_YHiZ, X
	ADC #$00
	STA SpecialObj_YHi,Y

	LDA <Temp_Var16
	STA SpecialObj_XVel,Y

	LDA RandomN
	AND #$01
	BNE Birdo_Norm

	LDA #$28
	STA Objects_Timer, X

Birdo_Norm:
	JSR Object_Move
	JSR Object_CalcBoundBoxForced

	
	LDY Birdo_TickIndex, X
	LDA Birdo_Walk + 4,Y
	STA Objects_EffectiveXVel, X

	JSR Object_DetectTiles
	JSR Object_InteractWithTiles

	LDA <Objects_TilesDetectZ, X
	AND #(HIT_LEFTWALL | HIT_RIGHTWALL)
	BEQ Birdo_InteractPlayer

	LDA Birdo_WalkTicker, X
	ADD #$40
	AND #$C0
	STA Birdo_WalkTicker, X

Birdo_InteractPlayer:
	JSR Object_FacePlayer
	JSR Object_InteractWithPlayer

ObjNorm_BirdoDraw:
	LDA <Objects_XZ, X
	LSR A
	LSR A
	AND #$01
	ORA Birdo_Pause, X
	STA Objects_Frame, X

	LDA Birdo_HurtTimer, X
	BEQ Birdo_Draw

	EOR #$02
	AND #$02
	BEQ Birdo_Flash

	LDA Birdo_PalState, X

Birdo_Flash:
	STA Objects_SpriteAttributes, X

	LDA Objects_Frame, X
	AND #$01
	ORA #$04
	STA Objects_Frame, X
	JMP Object_Draw16x32

Birdo_Draw:
	JMP Object_Draw16x32

Birdo_HurtOrStand:
	LDA HitTest_Result
	AND #HITTEST_BOTTOM
	BEQ Birdo_Hurt

	LDA <Player_YVel
	BMI Birdo_StandRTS

	LDA Player_BoundBottom
	SUB Objects_BoundTop, X
	CMP #$04
	BCS Birdo_Hurt
	
	LDA <Objects_YZ,X	 
	SUB #$1D
	STA <Player_Y

	LDA <Objects_YHiZ,X
	SBC #$00
	STA <Player_YHi

	LDA #$00
	STA Player_InAir
	STA PlayerProj_YVelFrac
	STA <Player_YVel

	LDA <Objects_XVelZ, X
	STA Player_CarryXVel
	
Birdo_StandRTS:
	RTS

Birdo_Hurt:	
	JMP Player_GetHurt

ObjNorm_PacBooHome:
	
	LDA <Objects_XZ, X
	ADD #$08
	STA Objects_BoundLeft, X
	ADD #$20
	STA Objects_BoundRight, X

	LDA <Objects_XHiZ, X
	STA Objects_BoundLeftHi, X
	ADC #$00
	STA Objects_BoundRightHi, X

	LDA <Objects_YZ, X
	STA Objects_BoundTop, X
	ADD #$08
	STA Objects_BoundBottom, X
	ADD #$10

	LDA <Objects_YHiZ, X
	STA Objects_BoundTopHi, X
	ADC #$00
	STA Objects_BoundBottomHi, X
	RTS

PacBoo_HomeLeft = Objects_Data3
PacBoo_HomeLeftHi = Objects_Data4
PacBoo_HomeTop = Objects_Data5
PacBoo_HomeTopHi = Objects_Data6
PacBoo_Action = Objects_Data7
PacBoo_CurrentIndex = Objects_Data1

ObjInit_PacBoo:

ObjNorm_PacBoo:
	

PacBoo_Norm:
	

PacBoo_HomeVel:
PacBoo_HomeVelMax:


Grower_DrawAttributes:
	.byte $00, SPR_HFLIP, SPR_HFLIP, SPR_HFLIP, SPR_VFLIP, SPR_HFLIP | SPR_VFLIP, $00, $00


Grower_DrawFlip:
	.byte $02, $03, $00, $01

Grower_XVel:
	.byte $00, $20, $00, $E0

Grower_YVel:
	.byte $E0, $00, $20, $00


Grower_Frame = Objects_Data1
Grower_Direction = Objects_Data2
Grower_StartX = Objects_Data3
Grower_StartXHi = Objects_Data4
Grower_StartY = Objects_Data5
Grower_StartYHi = Objects_Data6
Grower_TilePropDetect = Objects_Data7
Grower_ReverseDraw = Objects_Data8

Grower_WeaponAttributes:
	.byte ATTR_STOMPPROOF, ATTR_ALLWEAPONPROOF

Grower_BehaviorAttributes:
	.byte 0, ATTR_EXPLOSIONPROOF | ATTR_SHELLPROOF

ObjInit_GoldenPiranhaGrower:
	LDA #ATTR_ALLWEAPONPROOF
	STA Objects_WeaponAttr, X

	LDA #(ATTR_EXPLOSIONPROOF | ATTR_SHELLPROOF)
	STA Objects_BehaviorAttr, X
	BNE ObjInit_PiranhaGrowerCommon

ObjInit_PiranhaGrower:
	LDA #ATTR_STOMPPROOF
	STA Objects_WeaponAttr, X

ObjInit_PiranhaGrowerCommon:	
	; which direction to start in 0 = up, 1 = right, 2 = down, 3 = left
	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA Objects_Property, X
	STA Grower_Direction, X


	 ; Grower_StartYHi = current tile to check for (Toggle sbeten #TILE_PROP_ENEMY and #TILE_PROP_HARMFUL)
	LDA #TILE_PROP_ENEMY
	STA Grower_TilePropDetect, X

	; back up original position
	LDA Objects_XZ, X
	STA Grower_StartX, X
	
	LDA Objects_XHiZ, X
	STA Grower_StartXHi, X
	
	LDA Objects_YZ, X
	STA Grower_StartY, X
	
	LDA Objects_YHiZ, X
	STA Grower_StartYHi, X
	RTS

ObjNorm_PiranhaGrower:
	LDA <Player_HaltGameZ
	BEQ Grower_Norm
	
	JMP Grower_Draw

Grower_Norm:
	LDA Objects_Timer, X
	BEQ Grower_Move
	
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat
	JSR Grower_Animate
	JSR Grower_TimerToggle
	RTS

Grower_Move:
	JSR Object_ApplyXVel
	JSR Object_ApplyYVel
	JSR Object_CalcBoundBox
	
	LDA <Objects_XZ, X
	ORA <Objects_YZ, X
	AND #$0F
	BNE Grower_Animate
	
	JSR Grower_AtStart
	BCC Grower_NoDelete
	
	JSR Grower_CheckOffScreen
	
Grower_NoDelete:

	JSR Object_DetectTiles	
	JSR Grower_InteractWithTiles
	JSR Object_AttackOrDefeat

Grower_Animate:
	INC Grower_Frame, X
	
	LDA Grower_Frame, X
	AND #$08
	LSR A
	LSR A
	LSR A
	STA <Temp_Var1
	LDA Grower_Direction, X
	EOR Grower_ReverseDraw, X
	ASL A
	STA <Temp_Var2
	ORA <Temp_Var1
	STA Objects_Frame, X

Grower_Draw:
	JSR Object_DrawAligned

	LDA Grower_Direction, X
	EOR Grower_ReverseDraw, X
	ASL A
	TAX
	LDA Grower_DrawAttributes, X
	ORA Sprite_RAM + 2, Y
	STA Sprite_RAM + 2, Y
	
	LDA Grower_DrawAttributes + 1, X
	ORA Sprite_RAM + 6, Y
	STA Sprite_RAM + 6, Y
	RTS

Grower_AtStart:
	LDA Grower_StartX, X
	CMP Objects_XZ, X
	BNE Grower_NotBeginning

	LDA Grower_StartXHi, X
	CMP Objects_XHiZ, X
	BNE Grower_NotBeginning

	LDA Grower_StartY, X
	CMP Objects_YZ, X
	BNE Grower_NotBeginning

	LDA Grower_StartYHi, X
	CMP Objects_YHiZ, X
	BNE Grower_NotBeginning
	SEC
	RTS
	
Grower_NotBeginning:
	CLC
	RTS

Grower_CheckOffScreen:
	LDA #$01
	STA TempA
	
	JSR Grower_DeleteOffScreen

	LDA TempA
	BEQ Grower_CheckOffScreen1
	JSR Object_DetectTileCenter

	LDA Block_NeedsUpdate
	BNE Grower_CheckOffScreen1
	
	LDA Tile_LastValue
	EOR #$01

	JSR Object_ChangeBlock
	PLA
	PLA

Grower_CheckOffScreen1:
	RTS

Grower_DeleteOffScreen:
	JSR Object_DeleteOffScreen
	LDA #$00
	STA TempA
	RTS

Grower_TimerToggle:
	LDA Objects_Timer, X
	BEQ Grower_TimerToggle1

	LDA Objects_Timer, X
	CMP #$01
	BNE Grower_TimerToggle1

	LDA Grower_ReverseDraw, X
	EOR #$02
	STA Grower_ReverseDraw, X

	LDA Grower_TilePropDetect, X
	CMP #TILE_PROP_ENEMY
	BEQ Grower_TimerToggle0

	LDA #TILE_PROP_ENEMY
	STA Grower_TilePropDetect, X
	RTS

Grower_TimerToggle0:
	LDA #(TILE_PROP_SOLID_ALL | TILE_PROP_HARMFUL)
	STA Grower_TilePropDetect, X

Grower_TimerToggle1:
	RTS



Grower_InteractWithTiles:

	LDA Block_NeedsUpdate
	BEQ Grower_InteractWithTiles2

Grower_InteractWithTiles1:
	RTS

Grower_InteractWithTiles2:
	JSR Object_DetectTileCenter

	LDA Tile_LastValue
	EOR #$01
	JSR Object_ChangeBlock

	LDA #$00
	STA <Temp_Var13
	JSR Grower_DetectBlockAbove
	CMP Grower_TilePropDetect, X
	BEQ Grower_SetVelocity

	INC <Temp_Var13
	JSR Grower_DetectBlockRight
	CMP Grower_TilePropDetect, X
	BEQ Grower_SetVelocity

	INC <Temp_Var13
	JSR Grower_DetectBlockBelow
	CMP Grower_TilePropDetect, X
	BEQ Grower_SetVelocity
	
	INC <Temp_Var13
	JSR Grower_DetectBlockLeft
	CMP Grower_TilePropDetect, X
	BEQ Grower_SetVelocity
	
	LDA #$00
	STA <Objects_XVelZ, X
	STA <Objects_YVelZ, X
	LDA #$80
	STA Objects_Timer, X

	RTS

Grower_SetVelocity:
	
	LDY <Temp_Var13
	LDA Grower_XVel, Y
	STA <Objects_XVelZ, X
	
	LDA Grower_YVel, Y
	STA <Objects_YVelZ, X
	
	TYA
	STA Grower_Direction, X
	LDY Grower_StartYHi, X
	CPY #(TILE_PROP_SOLID_ALL | TILE_PROP_HARMFUL)
	BNE DrawPiranhaGrow1

	TAY
	LDA Grower_DrawFlip, Y 
	STA Grower_Direction, X

DrawPiranhaGrow1:
	LDA #$00
	RTS

Grower_DetectBlockAbove:
	LDA <Objects_YZ, X
	SUB #$08
	STA Tile_DetectionY

	LDA <Objects_YHiZ, X
	SBC #$00
	STA Tile_DetectionYHi

	LDA <Objects_XZ, X
	STA Tile_DetectionX

	LDA <Objects_XHiZ, X
	STA Tile_DetectionXHi
	JSR Object_DetectTile
	LDA Tile_LastProp
	RTS

Grower_DetectBlockBelow:
	LDA <Objects_YZ, X
	ADD #$18
	STA Tile_DetectionY

	LDA <Objects_YHiZ, X
	ADC #$00
	STA Tile_DetectionYHi

	LDA <Objects_XZ, X
	STA Tile_DetectionX

	LDA <Objects_XHiZ, X
	STA Tile_DetectionXHi

	JSR Object_DetectTile
	LDA Tile_LastProp
	RTS

Grower_DetectBlockRight:
	LDA <Objects_YZ, X
	STA Tile_DetectionY

	LDA <Objects_YHiZ, X
	STA Tile_DetectionYHi

	LDA <Objects_XZ, X
	ADD #$18
	STA Tile_DetectionX

	LDA <Objects_XHiZ, X
	ADC #$00
	STA Tile_DetectionXHi

	JSR Object_DetectTile
	LDA Tile_LastProp
	RTS

Grower_DetectBlockLeft:
	LDA <Objects_YZ, X
	STA Tile_DetectionY

	LDA <Objects_YHiZ, X
	STA Tile_DetectionYHi

	LDA <Objects_XZ, X
	SUB #$08
	STA Tile_DetectionX

	LDA <Objects_XHiZ, X
	SBC #$00
	STA Tile_DetectionXHi

	JSR Object_DetectTile
	LDA Tile_LastProp
	RTS


Lightning_Action = Objects_Data1
Lightning_WaterColor = Objects_Data2


ObjInit_Lightning:
	JSR Object_NoInteractions
	LDA #BOUND16x16
	STA Objects_BoundBox, X
	RTS

ObjNorm_Lightning;
	LDA Lightning_Action, X
	JSR DynJump

	.word Lightning_Fall
	.word Lightning_Electricuting
	
Lightning_Fall:
	LDA <Player_HaltGameZ
	BEQ Lightning_Normal
	JMP Lightning_Draw

Lightning_Normal:
	JSR Object_DeleteOffScreen

	LDA #$00
	STA <Objects_XVelZ, X

	LDA #$30
	STA <Objects_YVelZ, X

	JSR Object_CalcBoundBox
	JSR Object_Move
	JSR Object_DetectTiles
	JSR Object_InteractWithPlayer

	LDA Objects_SpritesHorizontallyOffScreen,X
	ORA Objects_SpritesVerticallyOffScreen,X
	BNE Lightning_GroundCheck

	LDA Object_VertTileProp, X
	CMP #(TILE_PROP_SOLID_ALL | TILE_PROP_ENEMYSOLID)
	BNE Lightning_GroundCheck

	LDA Objects_BoundBottom, X
	STA Block_DetectY
	AND #$F0
	STA Debris_Y

	LDA Objects_BoundBottomHi, X
	STA Block_DetectYHi

	LDA <Objects_XZ, X
	ADD #$08
	STA Block_DetectX
	AND #$F0
	STA Debris_X

	LDA <Objects_XHiZ, X
	ADC #$00
	STA Block_DetectXHi

	LDA Object_VertTileValue, X
	ADD #$01
	JSR Object_ChangeBlock

	JSR Common_MakeBricks
	JMP Lightning_Draw

Lightning_GroundCheck:
	LDA <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ Lightning_CheckWater

	LDA Objects_SpritesHorizontallyOffScreen,X
	ORA Objects_SpritesVerticallyOffScreen,X
	BNE Lightning_Poof

	LDA <Objects_YZ, X
	AND #$F0
	ORA #$06
	STA <Objects_YZ, X

	JSR Object_PrepProjectile
	
	LDA #SOBJ_LIGHTNINGBOLT
	STA SpecialObj_ID, Y

	LDA #$C0
	STA SpecialObj_XVel,Y

	LDA <Objects_XZ, X
	STA SpecialObj_X,Y

	LDA <Objects_XHiZ, X
	STA SpecialObj_XHi,Y

	LDA <Objects_YZ, X
	STA SpecialObj_Y,Y

	LDA <Objects_YHiZ, X
	STA SpecialObj_YHi,Y

	JSR Object_PrepProjectile
	
	LDA #SOBJ_LIGHTNINGBOLT
	STA SpecialObj_ID, Y

	LDA #$30
	STA SpecialObj_XVel,Y

	LDA <Objects_XZ, X
	STA SpecialObj_X,Y

	LDA <Objects_XHiZ, X
	STA SpecialObj_XHi,Y

	LDA <Objects_YZ, X
	STA SpecialObj_Y,Y

	LDA <Objects_YHiZ, X
	STA SpecialObj_YHi,Y

	LDA #$02
	STA SpecialObj_Data1, Y

Lightning_Poof:
	JMP Object_PoofDie

Lightning_CheckWater:
	LDA Object_VertTileProp, X
	CMP #TILE_PROP_WATER
	BEQ Lightning_Electricute

	CMP #(TILE_PROP_WATER | TILE_PROP_FOREGROUND)
	BNE Lightning_Draw

Lightning_Electricute:
	LDA #$01
	STA Lightning_Action, X
	
	LDA #$20
	STA Objects_Timer, X

	LDA Palette_Buffer + $0F
	STA Lightning_WaterColor, X
	
Lightning_Draw:
	JSR Object_Draw

Lightning_RTS:
	RTS

Lightning_Electricuting:
	LDA Objects_Timer, X
	BNE Lightning_Flash

	JMP Object_Delete

Lightning_Flash:
	AND #$02
	BNE Lightning_FlashWhite

	LDA Lightning_WaterColor, X
	STA Palette_Buffer + $0F
	BNE Lightning_PlayerHurt

Lightning_FlashWhite:
	LDA #$30
	STA Palette_Buffer + $0F

Lightning_PlayerHurt:
	LDA Player_InWater
	BEQ Lightning_RTS

	JSR Player_GetHurt
	RTS