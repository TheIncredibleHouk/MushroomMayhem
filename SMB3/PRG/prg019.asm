; Super Mario Bros. 3 Full Disassembly by Southbird 2012
; For more info, see http://www.sonicepoch.com/sm3mix/
;
; PLEASE INCLUDE A CREDIT TO THE SOUTHBIRD DISASSEMBLY
; AND THE ABOVE LINK SOMEWHERE IN YOUR WORKS :)
;
; Original disassembler source generated by DCC6502 version v1.4
; (With labels, comments, and some syntax corrections for nesasm by Southbird)
; For more info about DCC6502, e-mail veilleux@ameth.org
;
; This source file last updated: 2012-01-04 18:49:10.560742630 -0600
; Distribution package date: Fri Apr  6 23:46:16 UTC 2012
;---------------------------------------------------------------------------
Tile_Layout_TS5_TS11_TS13:
	; This defines the individual 8x8 blocks used to construct one of the tiles
	; Referenced by Address_Per_Tileset, addressed by Level_Tileset
	; Stored by upper left, then lower left, then upper right, then lower right

	; Remember that palette is determined by the upper 2 bits of a TILE (not the PATTERN)
	; I.e. tiles starting at index $00, $40, $80, $C0 are each on that respective palette

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LevelLoad_TS5
;
; Entry point for loading level layout data for Level_Tileset = 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LevelLoad_TS5:
	LDY #00

PRG019_A40A:
	LDA #TILE5_SKY 	; Clear everything to sky
	JSR Tile_Mem_ClearB
	JSR Tile_Mem_ClearA
	CPY #$f0
	BNE PRG019_A40A

	JMP LevelLoad	; Begin actual level loading!

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LevelLoad_TS13
;
; Entry point for loading level layout data for Level_Tileset = 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LevelLoad_TS13:
	LDY #$00

PRG019_A41B:
	LDA #TILE13_SKY		; Clear everything to sky
	JSR Tile_Mem_ClearB
	JSR Tile_Mem_ClearA
	CPY #$f0
	BNE PRG019_A41B

	JMP LevelLoad	; Begin actual level loading!


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_Generator_TS051113
;
; Based on the values in Temp_Var15 and LL_ShapeDef, chooses an
; appropriate generator function to builds this piece of the
; level.  Tedious, but saves space and is paper-design friendly.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PRG019_A42A:
	.byte 0, 15, 30, 45, 60, 75, 90, 105

LoadLevel_Generator_TS051113:
	; From level loader function:
	; * Temp_Var15, Temp_Var16, and LL_ShapeDef are three bytes read from the data


	LDA <Temp_Var15
	AND #%11100000
	LSR A		
	LSR A		
	LSR A		
	LSR A		
	LSR A		
	TAX		 	; X = upper 3 bits of Temp_Var15 (0-7) (selects a multiple of 15 as the base)

	LDA LL_ShapeDef
	LSR A	
	LSR A	
	LSR A	
	LSR A			; A = upper 4 bits of LL_ShapeDef shifted down
	ADD PRG019_A42A,X	; Add multiple of 15
	TAX
	DEX
	TXA		 ; A = ((LL_ShapeDef >> 4) + PRG015_A419[X]) - 1


	; PRG019_A42A provides values well in excess of 51, but only 51
	; addresses are defined here; reserved for expansion...

	JSR DynJump

	; THESE MUST FOLLOW DynJump FOR THE DYNAMIC JUMP TO WORK!!
	.word LoadLevel_GiantBlock		;  0 - Generate run of giant Judgems Clouds
	.word LoadLevel_GiantBlock		;  1 - Generate run of giant Bricks
	.word LoadLevel_GiantBlock		;  2 - Generate run of giant [?] blocks (with a coin)
	.word LoadLevel_GiantBlock		;  3 - Generate run of giant [?] blocks (with a powerup, super leaf)
	.word LoadLevel_GiantBlock		;  4 - Generate run of giant wood blocks
	.word LoadLevel_GiantBlock		;  5 - Generate run of giant metal (post [?] block) blocks
	.word LoadLevel_GiantBlock		;  6 - Generate run of giant ground blocks
	.word LoadLevel_GiantPipe		;  7 - Generate giant pipe
	.word LoadLevel_GiantCoral		;  8 - Generate run of 2x2 giant coral blocks
	.word LoadLevel_MiniPipe_V		;  9 - Generates vertical mini pipe 1 (top only, height specified, Tileset 5 only)
	.word LoadLevel_MiniPipe_V		; 10 - Generates vertical mini pipe 2 (top only, height specified, Tileset 5 only)
	.word LoadLevel_LongCloud_WB		; 11 - Generate long cloud (blue sky background)
	.word LoadLevel_LongCloud_WB		; 12 - Generate long cloud (white cloud background)
	.word LoadLevel_DoubleCloud		; 13 - Generate rectangle of layered clouds
	.word LoadLevel_PointyCloud		; 14 - Generate pointy edge clouds
	.word LoadLevel_BlockRun		; 15 - Run of bricks
	.word LoadLevel_BlockRun		; 16 - Run of '?' blocks with a coin
	.word LoadLevel_BlockRun		; 17 - Run of bricks with a coin
	.word LoadLevel_BlockRun		; 18 - Run of wood blocks
	.word LoadLevel_BlockRun		; 19 - Run of green note blocks (?)
	.word LoadLevel_BlockRun		; 20 - Run of note blocks
	.word LoadLevel_BlockRun		; 21 - Run of bouncing wood blocks
	.word LoadLevel_BlockRun		; 22 - Run of coins
	.word LoadLevel_VGroundPipeRun		; 23 - Vertical ground pipe 1 (alt level)
	.word LoadLevel_VGroundPipeRun		; 24 - Vertical ground pipe 2 (Big [?] area)
	.word LoadLevel_VGroundPipeRun		; 25 - Vertical ground pipe 3 (no entrance)
	.word LoadLevel_VCeilingPipeRun		; 26 - Vertical ceiling pipe 1 (alt level)
	.word LoadLevel_VCeilingPipeRun		; 27 - Vertical ceiling pipe 2 (no entrance)
	.word LoadLevel_HRightWallPipeRun	; 28 - Horizontal right-hand wall pipe (alt level)
	.word LoadLevel_HRightWallPipeRun	; 29 - Horizontal right-hand wall pipe (no entrance)
	.word LoadLevel_HLeftWallPipeRun	; 30 - Horizontal left-hand wall pipe (alt level)
	.word LoadLevel_HLeftWallPipeRun	; 31 - Horizontal left-hand wall pipe (no entrance)
	.word LoadLevel_Cannon			; 32 - Bullet bill cannon
	.word LoadLevel_CCBridge		; 33 - Cheep-Cheep style 'oo' bridge
	.word LoadLevel_CCBridge		; 34 - Would result in empty tiles?  (form of 33)
	.word LoadLevel_TopDecoBlocks		; 35 - Top-Deco Rectangle Waterfall
	.word LoadLevel_TopDecoBlocks		; 36 - Top-Deco Rectangle Left waving water pool
	.word LoadLevel_TopDecoBlocks		; 37 - Top-Deco Rectangle No current waving water pool
	.word LoadLevel_TopDecoBlocks		; 38 - Top-Deco Rectangle Right waving water pool
	.word LoadLevel_TopDecoBlocks		; 39 - Top-Deco Rectangle Water wrong-way BG
	.word LoadLevel_TopDecoBlocks		; 40 - Top-Deco Rectangle Diamond blocks (not really any deco on top)
	.word LoadLevel_TopDecoBlocks		; 41 - Top-Deco Rectangle Sand ground 
	.word LoadLevel_TopDecoBlocks		; 42 - Top-Deco Rectangle orange block??
	.word LoadLevel_IceBricks		; 43 - Run of ice bricks
	.word LoadLevel_VTransitPipeRun		; 44 - Vertical in-level transit pipe
	.word LoadLevel_CloudGoal		; 45 - Generate long, thick cloud into goal area
	.word LoadLevel_RoundCloudTop		; 46 - Generate long run of round cloud tops
	.word LoadLevel_HPipeRun		; 47 - Generate a run of horizontal pipe (no ends)
	.word LoadLevel_CloudSpace		; 48 - Generate a rectangle of white cloud space
	.word LoadLevel_VGroundPipe5Run		; 49 - Vertical ground pipe 5 (exits to common end area)
	.word LoadLevel_HRightWallPipeRun3	; 50 - Horizontal right-hand wall pipe 3 (no entrance)
	.word LoadLevel_Lava			; 51 - Lava?  Not used in these modes I don't think... (it's green in Tileset 5/13!)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LeveLoad_FixedSizeGen_TS051113
;
; Much simpler generators that are fixed-size, commonly used for 
; just single tile placement styles (although a couple relatively 
; complex ones exist in here as well)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LeveLoad_FixedSizeGen_TS051113:
	; It is verified before calling this function that all of
	; the upper 4 bits of LL_ShapeDef are ZERO

	; So the upper 3 bits of Temp_Var15 serve as the most significant bits
	; to a value where LL_ShapeDef provide the 4 least significant bits

	LDA <Temp_Var15
	AND #%11100000
	LSR A		
	ADD LL_ShapeDef	
	TAX		 	; Resultant index is put into 'X'
	JSR DynJump	 

	; THESE MUST FOLLOW DynJump FOR THE DYNAMIC JUMP TO WORK!!
	.word LoadLevel_MuncherAlternators	;  0 - Alternating muncher 1
	.word LoadLevel_MuncherAlternators	;  1 - Alternating muncher 2
	.word LoadLevel_PrefabBGClouds		;  2 - 7x10 block of prefab background clouds
	.word LoadLevel_AltClearToCloud		;  3 - Alternate clear map to clouds
	.word LoadLevel_Stars			;  4 - Adds random stars to top (part of lost effect)
	.word LoadLevel_GiantHill		;  5 - Giant World background hill
	.word LoadLevel_PrefabBGClouds2		;  6 - 4x5 block of prefab background clouds
	.word LoadLevel_PrefabBGClouds2		;  7 - 3x5 block of prefab background clouds
	.word $0000				;  8 - NULL?
	.word $0000				;  9 - NULL?
	.word $0000				; 10 - NULL?
	.word $0000				; 11 - NULL?
	.word $0000				; 12 - NULL?
	.word $0000				; 13 - NULL?
	.word $0000				; 14 - NULL?
	.word $0000				; 15 - NULL?
	.word LoadLevel_PowerBlock		; 16 - ? block with flower
	.word LoadLevel_PowerBlock		; 17 - ? block with leaf 
	.word LoadLevel_PowerBlock		; 18 - ? block with star
	.word LoadLevel_PowerBlock		; 19 - ? block with coin OR star
	.word LoadLevel_PowerBlock		; 20 - ? block with coin (??)
	.word LoadLevel_PowerBlock		; 21 - Muncher Plant!
	.word LoadLevel_PowerBlock		; 22 - Brick with flower
	.word LoadLevel_PowerBlock		; 23 - Brick with leaf
	.word LoadLevel_PowerBlock		; 24 - Brick with star
	.word LoadLevel_PowerBlock		; 25 - Brick with coin OR star
	.word LoadLevel_PowerBlock		; 26 - Brick with 10-coin
	.word LoadLevel_PowerBlock		; 27 - Brick with 1-up
	.word LoadLevel_PowerBlock		; 28 - Brick with vine
	.word LoadLevel_PowerBlock		; 29 - Brick with P-Switch
	.word LoadLevel_PowerBlock		; 30 - Invisible coin
	.word LoadLevel_PowerBlock		; 31 - Invisible 1-up
	.word LoadLevel_PowerBlock		; 32 - Invisible note
	.word LoadLevel_PowerBlock		; 33 - Note block with flower
	.word LoadLevel_PowerBlock		; 34 - Note block with leaf
	.word LoadLevel_PowerBlock		; 35 - Note block with star
	.word LoadLevel_PowerBlock		; 36 - Wood block with flower
	.word LoadLevel_PowerBlock		; 37 - Wood block with leaf
	.word LoadLevel_PowerBlock		; 38 - Wood block with star
	.word LoadLevel_PowerBlock		; 39 - Invisible note to coin heaven
	.word LoadLevel_PowerBlock		; 40 - P-Switch
	.word LoadLevel_EndGoal			; 41 - The end goal


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_GiantBlock
;
; Generates Giant World common blocks, all 2x2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LL_GiantBlocks:
	.byte TILE11_JCLOUD_UL, TILE11_BRICK_UL, TILE11_QBLOCKC_UL, TILE11_QBLOCKP_UL, TILE11_WOOD_UL, TILE11_METAL_UL, TILE11_GROUND_UL
	.byte TILE11_JCLOUD_UR, TILE11_BRICK_UR, TILE11_QBLOCKC_UR, TILE11_QBLOCKP_UR, TILE11_WOOD_UR, TILE11_METAL_UR, TILE11_GROUND_UR
	.byte TILE11_JCLOUD_LL, TILE11_BRICK_LL, TILE11_QBLOCKC_LL, TILE11_QBLOCKP_LL, TILE11_WOOD_LL, TILE11_METAL_LL, TILE11_GROUND_LL
	.byte TILE11_JCLOUD_LR, TILE11_BRICK_LR, TILE11_QBLOCKC_LR, TILE11_QBLOCKP_LR, TILE11_WOOD_LR, TILE11_METAL_LR, TILE11_GROUND_LR

LoadLevel_GiantBlock:
	; Backup Map_Tile_AddrL/H into Temp_Var1/2 
	LDA <Map_Tile_AddrL 
	STA <Temp_Var1 
	LDA <Map_Tile_AddrH 
	STA <Temp_Var2
 
	LDA LL_ShapeDef 
	PHA		 ; Save LL_ShapeDef
 
	SUB #$10
	LSR A	 
	LSR A	 
	LSR A	 
	LSR A	 
	TAX		; X = relative index
 
	PLA		 ; Restore LL_ShapeDef
 
	AND #$0f 
	STA <Temp_Var3		; Temp_Var3 = lower 4 bits of LL_ShapeDef (width of run)
 
	LDY TileAddr_Off	 ; Y = TileAddr_Off

	LDA <Temp_Var3 
	STA <Temp_Var4		 ; Temp_Var4 = Temp_Var3
 
PRG019_A552:
	LDA LL_GiantBlocks,X	 ; Get tile for upper left
	STA [Map_Tile_AddrL],Y	 ; Store into tile mem
	JSR LoadLevel_NextColumn ; Next column

	LDA LL_GiantBlocks+7,X	 ; Get tile for upper right
	STA [Map_Tile_AddrL],Y	 ; Store into tile mem
	JSR LoadLevel_NextColumn ; Next column

	DEC <Temp_Var4		 ; Temp_Var4-- (width decrement)
	BPL PRG019_A552	 	; While Temp_Var4 >= 0, loop!

	
	JSR LL19_ReturnTileAndNextRow	 ; Return to beginning, then go to next row

PRG019_A569:
	LDA LL_GiantBlocks+14,X	 ; Get tile for lower left
	STA [Map_Tile_AddrL],Y	 ; Store into tile mem
	JSR LoadLevel_NextColumn ; Next column

	LDA LL_GiantBlocks+21,X	 ; Get tile for lower right
	STA [Map_Tile_AddrL],Y	 ; Store into tile mem
	JSR LoadLevel_NextColumn ; Next column

	DEC <Temp_Var3		 ; Temp_Var3-- (width decrement)
	BPL PRG019_A569	 	; While Temp_Var3 >= 0, loop!

	RTS		 ; Return



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_GiantPipe
;
; Generates a Giant World pipe, which is 3 x Height
; The height being what comes in with LL_ShapeDef
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LL_GiantPipe:
	.byte TILE11_PIPE_UL, TILE11_PIPE_ML, TILE11_PIPE_LL
	.byte TILE11_PIPE_UM, TILE11_PIPE_MM, TILE11_PIPE_LM
	.byte TILE11_PIPE_UR, TILE11_PIPE_MR, TILE11_PIPE_LR

LoadLevel_GiantPipe:
	; Backup Map_Tile_AddrL/H into Temp_Var1/2
	LDA <Map_Tile_AddrL
	STA <Temp_Var1	
	LDA <Map_Tile_AddrH
	STA <Temp_Var2	

	LDA LL_ShapeDef	
	AND #$0f	
	STA <Temp_Var3		 ; Temp_Var3 = lower 4 bits of LL_ShapeDef (height of thing)

	LDY TileAddr_Off	 ; Y = TileAddr_Off
	LDX #$00		 ; X = 0

PRG019_A59B:
	LDA LL_GiantPipe,X	 ; Get tile for pipe left
	STA [Map_Tile_AddrL],Y	 ; Store into tile mem
	JSR LoadLevel_NextColumn ; Next column

	LDA LL_GiantPipe+3,X	 ; Get tile for pipe middle
	STA [Map_Tile_AddrL],Y	 ; Store into tile mem
	JSR LoadLevel_NextColumn ; Next column

	LDA LL_GiantPipe+6,X	 ; Get tile for pipe right
	STA [Map_Tile_AddrL],Y	 ; Store into tile mem
	JSR LL19_ReturnTileAndNextRow	 ; Return to beginning, then go to next row

	CPX #$02	 
	BEQ PRG019_A5B8	 ; If X = 2, jump to PRG019_A5B8
	INX		 ; Otherwise, X++

PRG019_A5B8:
	DEC <Temp_Var3		 ; Temp_Var3-- (height decrement)
	BPL PRG019_A59B	 	; While Temp_Var3 >= 0, loop!

	RTS		 ; Return


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_GiantCoral
;
; Generates a run of Giant Coral blocks
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PRG019_A5BD:
	.byte TILE11_CORAL_UL, TILE11_CORAL_UR, TILE11_CORAL_LL, TILE11_CORAL_LR

LoadLevel_GiantCoral:
	; Backup Map_Tile_AddrL/H into Temp_Var1/2
	LDA <Map_Tile_AddrL
	STA <Temp_Var1	
	LDA <Map_Tile_AddrH
	STA <Temp_Var2	

	LDA LL_ShapeDef	
	AND #$0f	
	STA <Temp_Var3		 ; Temp_Var3 = lower 4 bits of LL_ShapeDef (width of things)

	LDY TileAddr_Off	 ; Y = TileAddr_Off

	LDX #$00	 ; X = 0

PRG019_A5D5:
	LDA <Temp_Var3 
	STA <Temp_Var4		 ; Temp_Var4 = Temp_Var3

PRG019_A5D9:
	LDA PRG019_A5BD,X	 ; Get tile for ??
	STA [Map_Tile_AddrL],Y	 ; Store into tile mem

	; Go to next row by adding 16
	TYA
	ADD #16
	TAY	
	LDA <Map_Tile_AddrH
	ADC #$00	 
	STA <Map_Tile_AddrH

	LDA PRG019_A5BD+2,X	 ; Get tile for ??
	STA [Map_Tile_AddrL],Y	 ; Store into tile mem

	; Go to next row by adding 16
	TYA
	ADD #16
	TAY	
	LDA <Map_Tile_AddrH
	ADC #$00	 
	STA <Map_Tile_AddrH

	DEC <Temp_Var4		 ; Temp_Var4--
	BPL PRG019_A5D9	 	; While Temp_Var4 >= 0, loop!

	; Restore Map_Tile_Addr from backup
	LDA <Temp_Var1
	STA <Map_Tile_AddrL
	LDA <Temp_Var2	
	STA <Map_Tile_AddrH

	LDY TileAddr_Off	 ; Y = TileAddr_Off
	JSR LoadLevel_NextColumn ; Next column

	STY TileAddr_Off	 ; TileAddr_Off = Y

	; Update backup
	LDA <Map_Tile_AddrL
	STA <Temp_Var1	
	LDA <Map_Tile_AddrH
	STA <Temp_Var2	

	INX		 ; X++
	CPX #$02
	BNE PRG019_A5D5	 ; If X <> 2, loop!

	RTS		 ; Return


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_MuncherAlternators
;
; Adds a single one of the two "alternating" munchers who come
; out of the mini pipes in alternation...
; Tileset 5 only
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LL_MuncherAlternators:
	.byte TILE5_MUNCHER_1, TILE5_MUNCHER_2

LoadLevel_MuncherAlternators
	LDA LL_ShapeDef
	SUB #$00	
	TAX		 ; X = relative index

	LDY TileAddr_Off	 	; Y = TileAddr_Off
	LDA LL_MuncherAlternators,X	; Get muncher tile
	STA [Map_Tile_AddrL],Y	 ; Store into tile mem
	RTS		 ; Return


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_MiniPipe_V
;
; Generates a vertical mini pipe of height specified (top only)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LL_MiniPipeV:
	.byte TILE5_MINIPIPE_TOP1, TILE5_MINIPIPE_TOP2

LoadLevel_MiniPipe_V:
	LDA LL_ShapeDef
	PHA		 ; Save LL_ShapeDef

	SUB #$a0
	LSR A	
	LSR A	
	LSR A	
	LSR A	
	TAX		 ; X = relative index

	PLA		 ; Restore LL_ShapeDef
	AND #$0f	
	STA <Temp_Var3		 ; Temp_Var3 = lower 4 bits of LL_ShapeDef (height of pipe)

	LDY TileAddr_Off	 ; Y = TileAddr_Off

	LDA LL_MiniPipeV,X	 ; Get proper top of mini pipe
	JMP PRG019_A64C	 	 ; Jump to PRG019_A64C

PRG019_A64A:
	LDA #TILE5_MINIPIPE_MID	 ; Mini pipe mid section

PRG019_A64C:
	STA [Map_Tile_AddrL],Y	 ; Store into tile mem

	; Go to next row by adding 16 
	TYA	
	ADD #16
	TAY	
	LDA <Map_Tile_AddrH
	ADC #$00	 
	STA <Map_Tile_AddrH

	DEC <Temp_Var3		 ; Temp_Var3--
	BPL PRG019_A64A	 	; While Temp_Var3 >= 0, loop!

	RTS		 ; Return


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_HPipeRun
;
; Generates a run of horizontal pipe (no ends, just pipe)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LL_HPipeTB:
	.byte TILE1_PIPEHT, TILE1_PIPEHB

LoadLevel_HPipeRun:
	
	RTS		 ; Return



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_PrefabBGClouds
;
; Intelligently inserts a 7x10 block of prefabricated 
; background clouds... the "intelligent" part is that it won't
; deliberately overwrite other tiles as it can help it...
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	; 7 rows of pregenerated background cloud patterns
	; The TILE13_SKY sky tiles are actually treated as skips!
	; $FFs are terminators
LL_LargeBGClouds:
	.byte TILE13_SKY, TILE13_SKY, TILE13_SKY, TILE13_SKY, TILE13_LARGEROUND_UL, TILE13_BALLCLOUD_UR, TILE13_SKY, TILE13_SKY, TILE13_SKY, TILE13_SKY, $FF
	.byte TILE13_SKY, TILE13_SKY, TILE13_SKY, TILE13_BALLCLOUD_UL, TILE13_CLOUD, TILE13_CLOUD, TILE13_LARGEROUND_UR, TILE13_SKY, TILE13_SKY, TILE13_SKY, $FF
	.byte TILE13_SKY, TILE13_SKY, TILE13_LARGEROUND_UL, TILE13_CLOUD, TILE13_CLOUD, TILE13_CLOUD, TILE13_CLOUD, TILE13_BALLCLOUD_UR, TILE13_SKY, TILE13_SKY, $FF
	.byte TILE13_SKY, TILE13_BALLCLOUD_UL, TILE13_CLOUD, TILE13_CLOUD, TILE13_CLOUD, TILE13_CLOUD, TILE13_CLOUD, TILE13_CLOUD, TILE13_LARGEROUND_UR, TILE13_SKY, $FF
	.byte TILE13_LARGEROUND_UL, TILE13_CLOUD, TILE13_CLOUD, TILE13_CLOUD, TILE13_CLOUD, TILE13_CLOUD, TILE13_CLOUD, TILE13_CLOUD, TILE13_CLOUD, TILE13_LARGEROUND_UR, $FF
	.byte TILE13_BALLCLOUD_LL, TILE13_CLOUD, TILE13_CLOUD, TILE13_CLOUD, TILE13_CLOUD, TILE13_CLOUD, TILE13_CLOUD, TILE13_CLOUD, TILE13_CLOUD, TILE13_LARGEROUND_LR, $FF
	.byte TILE13_SKY, TILE13_LARGEROUND_LL, TILE13_CLOUD, TILE13_CLOUD, TILE13_CLOUD, TILE13_CLOUD, TILE13_CLOUD, TILE13_CLOUD, TILE13_BALLCLOUD_LR, TILE13_SKY, $FF

LL_LargeBGCloudChecks:
	.byte TILE13_BALLCLOUD_UL, TILE13_LARGEROUND_UL, TILE13_BALLCLOUD_UR, TILE13_LARGEROUND_UR, TILE13_BALLCLOUD_LL, TILE13_LARGEROUND_LL, TILE13_BALLCLOUD_LR, TILE13_LARGEROUND_LR
LL_LBGCC_End


LoadLevel_PrefabBGClouds:
	
	RTS		 ; Return


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_AltClearToCloud
;
; Clears the entire tilespace to cloud space tiles (all white)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LoadLevel_AltClearToCloud:
	
	RTS		 ; Return

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_Stars
;
; Randomly adds some stars near the top of the level; appears to
; be part of a lost effect using gradients to have a level darken
; going upward until a starry sky is reached...
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LL_Stars:	.byte TILE13_STARS1, TILE13_STARS2, TILE13_STARS3
LL_DarkSky:	.byte TILE13_SKY_DARK, TILE13_SKY_DARKTOBLACK
LL_DarkSkyStar:	.byte TILE13_SKY_DARKSTAR, TILE13_SKY_DARKTOBLACKS

LoadLevel_Stars:

	RTS		 ; Return


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_LongCloud_WB
;
; Generates a long cloud platform of variable width in the middle,
; choice of blue sky or white cloud background; only for Tileset 13!
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LL_LongCloudWB:
	.byte TILE13_LONGCLOUDBLUE_UL, TILE13_LONGCLOUDBLUE_LL, TILE13_LONGCLOUDWHIT_UL, TILE13_LONGCLOUDWHIT_LL
	.byte TILE13_LONGCLOUDBLUE_UM, TILE13_LONGCLOUDBLUE_LM, TILE13_LONGCLOUDWHIT_UM, TILE13_LONGCLOUDWHIT_LM
	.byte TILE13_LONGCLOUDBLUE_UR, TILE13_LONGCLOUDBLUE_LR, TILE13_LONGCLOUDWHIT_UR, TILE13_LONGCLOUDWHIT_LR


LoadLevel_LongCloud_WB:

	RTS		 ; Return


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_DoubleCloud
;
; Generates a potentially large (1-256 x 1-8) rectangle of layered
; clouds; this is noted to be unused except in a lost level...
; Tileset 13 only
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LL_DoubleCloud:
	.byte TILE13_DBLCLOUD_UL, TILE13_DBLCLOUD_ML, TILE13_DBLCLOUD_LL, TILE13_DBLCLOUD_BL
	.byte TILE13_DBLCLOUD_UM, TILE13_DBLCLOUD_MM, TILE13_DBLCLOUD_LM, TILE13_DBLCLOUD_BM
	.byte TILE13_DBLCLOUD_UR, TILE13_DBLCLOUD_MR, TILE13_DBLCLOUD_LR, TILE13_DBLCLOUD_BR

LoadLevel_DoubleCloud:	
	
	RTS		 ; Return


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_PointyCloud
;
; Generates a variable width 1-16 "pointy edge" cloud, automatically
; switching between "blue sky" and "white cloud" versions of the
; tiles as appropriate (i.e. if it's overwriting sky or not)
; Tileset 13 only
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LoadLevel_PointyCloud:

	RTS		 ; Return


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_CloudGoal
;
; Generates a long (1-256), thick cloud designed to run into the 
; end goal area and patch in cloud tiles along the bottom of it
; Tileset 13 only
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LL_CloudGoal:
	.byte TILE13_DBLCLOUD_UM, TILE13_THICKCLOUD_LM, TILE13_GOALBLACK, TILE13_CHERRY, TILE13_GOALBLACKCLOUD, TILE13_CHERRYCLOUD

LoadLevel_CloudGoal:
	
	RTS		 ; Return


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_RoundCloudTop
;
; Generates a long (1-256), run of the round cloud tops, used as
; ground in some sky levels
; Tileset 13 only
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

LL_RoundCloudTops:
	.byte TILE13_ROUNDCLOUDBLU_T, TILE13_ROUNDCLOUDLAY_T

	; Search for the following tiles
LL_RoundCloudSearch:
	.byte TILE13_BALLCLOUD_LL, TILE13_LARGEROUND_LL, TILE13_LARGEROUND_LR, TILE13_BALLCLOUD_LR, TILE13_CLOUD

	; ... if match, replace with cooresponding tile from here
LL_RoundCloudReplace:
	.byte TILE13_ROUNDCLOUDLAR_LT, TILE13_ROUNDCLOUDLAR_LT, TILE13_ROUNDCLOUDLAR_RT, TILE13_ROUNDCLOUDLAR_RT, TILE13_ROUNDCLOUDWHT_T


LoadLevel_RoundCloudTop:

	RTS		 ; Return


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_GiantHill
;
; Builds a Giant World background hill that stretches from the
; start downward until it hits something "not sky"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LoadLevel_GiantHill:
	
	RTS		 ; Return


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_PrefabBGClouds2
;
; Inserts a 4x5 or 3x5 block of prefabricated cloud background.
; Unlike LoadLevel_PrefabBGClouds, does not check anything and
; just blindly overwrites!  
; Tileset 12 only
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LL_LargeBGClouds2:
	.byte TILE13_CLOUD, TILE13_CLOUD, TILE13_CLOUD, TILE13_BALLCLOUD_LR, TILE13_LARGEROUND_LL, $FF
	.byte TILE13_BALLCLOUD_LR, TILE13_LARGEROUND_LL, TILE13_LARGEROUND_LR, TILE13_SKY, TILE13_LARGEROUND_UL, $FF
	.byte TILE13_LARGEROUND_UR, TILE13_SKY, TILE13_SKY, TILE13_BALLCLOUD_UL, TILE13_CLOUD, $FF
	.byte TILE13_CLOUD, TILE13_BALLCLOUD_UR, TILE13_LARGEROUND_UL, TILE13_CLOUD, TILE13_CLOUD, $FF

LL_LargeBGClouds2B:
	.byte TILE13_BALLCLOUD_LR, TILE13_LARGEROUND_LL, TILE13_BALLCLOUD_LR, TILE13_LARGEROUND_LL, TILE13_CLOUD, $FF
	.byte TILE13_LARGEROUND_UR, TILE13_SKY, TILE13_SKY, TILE13_SKY, TILE13_BALLCLOUD_LL, $FF
	.byte TILE13_CLOUD, TILE13_BALLCLOUD_UR, TILE13_BALLCLOUD_UL, TILE13_LARGEROUND_UR, TILE13_LARGEROUND_UL, $FF
LL_LBGC2_StartIdx:	.byte 0, (LL_LargeBGClouds2B - LL_LargeBGClouds2)
LL_LBGC2_Rows:		.byte 3, 2


LoadLevel_PrefabBGClouds2:
	; Backup Map_Tile_AddrL/H into Temp_Var1/2
	LDA <Map_Tile_AddrL
	STA <Temp_Var1	
	LDA <Map_Tile_AddrH
	STA <Temp_Var2	

	LDA LL_ShapeDef
	SUB #$06	
	TAX		 ; X = relative index

	LDA LL_LBGC2_Rows,X
	STA <Temp_Var3		 ; Temp_Var3 = LL_LBGC2_Rows[X]

	LDA LL_LBGC2_StartIdx,X	
	TAX		 	; X = LL_LBGC2_StartIdx[X]

	LDY TileAddr_Off	 ; Y = TileAddr_Off
PRG019_A9E9:
	LDA LL_LargeBGClouds2,X	 ; Get next tile
	CMP #$ff	 
	BEQ PRG019_A9F9	 	; If it's a terminator, jump to PRG019_A9F9

	STA [Map_Tile_AddrL],Y	 ; Store into tile mem
	JSR LoadLevel_NextColumn ; Next column
	INX		 ; X++
	JMP PRG019_A9E9	 ; Jump to PRG019_A9E9

PRG019_A9F9:
	INX		 ; X++
	JSR LL19_ReturnTileAndNextRow	 ; Return to beginning, then go to next row

	DEC <Temp_Var3	 ; Temp_Var3--
	BPL PRG019_A9E9	 ; While Temp_Var3 >= 0, loop!

	RTS		 ; Return



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_CloudSpace
;
; Generates a rectangle (1-256 x 1-8) of white cloud space
; Tileset 13 only
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LoadLevel_CloudSpace:
	JSR LL19_GetLayoutByte_AndBackup	; Get byte from layout -> Temp_Var3, and backup Map_Tile_AddrL/H into Temp_Var1/2

	LDA LL_ShapeDef
	AND #$0f	
	TAX		 ; X = lower 4 bits of LL_ShapeDef (height of rectangle)

PRG019_AA0B:
	LDY TileAddr_Off	 ; Y = TileAddr_Off

	LDA <Temp_Var3
	STA <Temp_Var4		 ; Temp_Var4 = Temp_Var3 (width copy)

PRG019_AA12:
	LDA #TILE13_CLOUD	 ; White cloudspace
	STA [Map_Tile_AddrL],Y	 ; Store into tile mem
	JSR LoadLevel_NextColumn ; Next column

	DEC <Temp_Var4		 ; Temp_Var4-- (width decrement)
	LDA <Temp_Var4		
	CMP #$ff	 
	BNE PRG019_AA12	 	; While Temp_Var4 > 0, loop!

	JSR LL19_ReturnTileAndNextRow	 ; Return to beginning, then go to next row

	DEX		 ; X-- (height decrement)
	BPL PRG019_AA0B	 ; While X >= 0, loop!

	RTS		 ; Return



	; Routine to get a byte from the layout, put it into Temp_Var3,
	; and advance the Level_LayPtr_Addr pointer...
	; Also backup Map_Tile_AddrL/H into Temp_Var1/2
LL19_GetLayoutByte_AndBackup:
	LDY #$00	 		; Y = 0
	LDA [Level_LayPtr_AddrL],Y	; Get another byte from layout
	STA <Temp_Var3	 		; -> Temp_Var3

	LDA <Level_LayPtr_AddrL
	ADD #$01
	STA <Level_LayPtr_AddrL
	LDA <Level_LayPtr_AddrH
	ADC #$00
	STA <Level_LayPtr_AddrH

	; Backup Map_Tile_AddrL/H into Temp_Var1/2
	LDA <Map_Tile_AddrL
	STA <Temp_Var1	
	LDA <Map_Tile_AddrH
	STA <Temp_Var2	

	RTS		 ; Return

	; Goes to next row and updates backup variable Temp_Var2
LL19_ReturnTileAndNextRow:
	; Restore Map_Tile_Addr from backup
	LDA <Temp_Var1
	STA <Map_Tile_AddrL
	LDA <Temp_Var2
	STA <Map_Tile_AddrH

	; Go to next row by adding 16 to tile offset
	LDA TileAddr_Off
	ADD #16
	STA TileAddr_Off
	TAY
	LDA <Map_Tile_AddrH
	ADC #$00	 
	STA <Map_Tile_AddrH
	STA <Temp_Var2	; Update Map_Tile_AddrH backup

	RTS		 ; Return

	; Broken into another file for ease of integration in NoDice editor
	.include "PRG/levels/SkyGiPl.asm"


; Rest of ROM bank was empty!


BossFight:
	
	LDA Objects_Property, X
	JSR DynJump

	.word Colossal_Cheep
	.word Giant_Piranha

Colossal_CheepSprites:
	.byte $95, $97, $99, $9B, $B5, $B7, $B9, $BB
	.byte $95, $97, $9D, $9F, $B5, $B7, $BD, $BF

Colossal_CheepPassesNeeded:
	.byte $01, $02, $01, $03

Colossal_CheepJumpChances:
	.byte $00, $00, $00, $01, $00, $00, $01, $00
	.byte $01, $00, $00, $00, $01, $00, $00, $01

Colossal_CheepFrames = Objects_Data1
Colossal_CheepAction = Objects_Data2
Colossal_CheepThresholdChecked = Objects_Data3
Colossal_CheepHealth = Objects_Data4
Colossal_CheepPasses = Objects_Data5
Colossal_CheepWaterLevel = Objects_Data6

Colossal_Cheep:
	LDA <Player_HaltGameZ
	BEQ Colossal_CheepNorm

	JMP Colossal_CheepDraw

Colossal_CheepNorm:
	LDA Colossal_CheepAction, X
	JSR DynJump

	.word Colossal_CheepInit
	.word Colossal_CheepSwim
	.word Colossal_CheepBounce
	.word Colossal_CheepHit
	.word Colossal_CheepDie
	.word Colossal_FloodRoom
	.word Colossal_SwimFlooded
	.word Colossal_CheepDrainRoom
	.word Colossal_CheepReset

Colossal_CheepInit:
	LDA #$D8
	STA <Objects_XZ, X

	LDA #$FF
	STA <Objects_XZ, X

	LDA #$20
	STA <Objects_XVelZ, X

	LDA #$00
	STA Colossal_CheepHealth, X

	LDA #$04
	STA Objects_Health, X

	INC Colossal_CheepAction, X

	LDA #OAT_BOUNDBOX09
	STA Objects_BoundBox, X

	JMP Colossal_CheepResetPasses

Colossal_CheepJumpThreshold:
	.byte $E0, $10

Colossal_CheepXVel:
	.byte $E0, $20

Colossal_CheepSwim:
	LDA #$A8
	STA <Objects_YZ, X

	LDA #$00
	STA <Objects_YHiZ, X

	LDA #SPR_PAL1
	STA Objects_SpriteAttributes, X

	JSR Object_ApplyXVel
	JSR Object_FaceDirectionMoving
	JSR Object_CalcBoundBox
	JSR Object_DetectTiles

	JSR Object_CheckOffScreen
	BCC Keep_Swimming

	LDA #$00
	STA Colossal_CheepThresholdChecked, X

	JSR Object_XDistanceFromPlayer
	LDY <XDiffLeftRight

	DEC Colossal_CheepPasses, X

	LDA Colossal_CheepXVel, Y
	STA <Objects_XVelZ, X
	BNE CC_NoJump

Keep_Swimming:
	LDY #$00
	
	LDA Objects_Orientation, X
	AND #SPR_HFLIP
	BEQ CC_CheckThreshold

	INY

CC_CheckThreshold:
	LDA Colossal_CheepThresholdChecked, X
	BNE CC_NoJump

	LDA <Objects_XZ, X
	AND #$F0
	CMP Colossal_CheepJumpThreshold, Y
	BNE CC_NoJump

	LDA #$01
	STA Colossal_CheepThresholdChecked, X

	LDA RandomN
	AND #$07
	TAY

	LDA Colossal_CheepJumpChances, Y
	BNE CC_NoJump

	LDA #$B0
	STA <Objects_YVelZ, X

	LDA #$02
	STA Colossal_CheepAction, X

CC_NoJump:
	JMP Colossal_CheepAnimate

Colossal_CheepBounce:
	JSR Object_FaceDirectionMoving
	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_DetectPlayer
	BCC CC_NoHurtPlayer

	JSR Object_HurtPlayer

CC_NoHurtPlayer:
	LDA Objects_State, X
	CMP #OBJSTATE_KILLED
	BNE CC_CheckBounce

	LDA #OBJSTATE_NORMAL
	STA Objects_State, X

	JMP CC_CheckBounce

CC_HurtByShell:
	
	JSR DestroyAllEnemies
	LDA #OBJSTATE_NORMAL
	STA Objects_State, X

	INC Colossal_CheepHealth, X
	LDA Colossal_CheepHealth, X
	CMP #$03
	BNE CC_GoBackwards

	JSR DestroyAllEnemies

	LDA #$80
	STA Objects_Timer, X

	LDA #$04
	STA Colossal_CheepAction, X

	LDA #OBJSTATE_NORMAL
	STA Objects_State, X

	JMP Colossal_CheepDraw

CC_GoBackwards:

	LDA #$03
	STA Colossal_CheepAction, X
	BNE CC_NoSkyBounce

CC_CheckBounce:

	JSR Object_CheckOffScreen
	BCC CC_CheckFloor

	LDA #$01
	STA Colossal_CheepAction, X

	JSR Object_XDistanceFromPlayer
	LDY <XDiffLeftRight

	LDA Colossal_CheepXVel, Y
	STA <Objects_XVelZ, X

	LDA RandomN
	AND #$03
	BNE CC_NoSkyBounce

	LDA #$00
	STA <Objects_YZ, X
	STA <Objects_YHiZ, X

	LDA #$02
	STA Colossal_CheepAction, X

CC_NoSkyBounce:
	JMP CC_AnimateNorm

CC_CheckFloor:
	JSR Object_DetectTiles

	LDA <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ CC_KeepBouncing

	JSR Object_HitGround

	LDA #$20
	STA Level_Vibration

	LDA #SND_LEVELBABOOM
	STA Sound_QLevel1

	LDA #$C0
	STA <Objects_YVelZ, X
	
	LDA Colossal_CheepPasses, X
	BPL CC_KeepBouncing

	LDA Colossal_CheepHealth, X
	STA <Temp_Var10

CC_MakeObjects:
	JSR CC_MakeObject
	DEC <Temp_Var10
	BPL CC_MakeObjects

	JSR Colossal_CheepResetPasses

CC_KeepBouncing:
	JMP Colossal_CheepAnimate

Colosssal_Objects:
	.byte OBJ_GREENTROOPA, OBJ_GOOMBA, OBJ_POWERUP, OBJ_GREENTROOPA, OBJ_GOOMBA, OBJ_GREENTROOPA, OBJ_POWERUP, OBJ_GOOMBA

Colosssal_ObjectsData:
	.byte $00, $00, POWERUP_MUSHROOM, $00, $00, $00, POWERUP_MUSHROOM, $00

Colosssal_ObjectsPal:
	.byte $02, $03, $01, $02, $03, $02, $01, $03

Colosssal_ObjectsX:
	.byte $40, $C0, $70, $90
	.byte $78, $98, $48, $C8
	.byte $80, $30, $D0, $50
	.byte $10, $40, $C0, $F0

CC_MakeObject:
	JSR Object_FindEmptyX
	BCC CC_MakeObjectRTS

	LDA RandomN, X
	AND #$07
	TAY

	LDA Colosssal_Objects, Y
	STA Objects_ID, X

	LDA Colosssal_ObjectsData, Y
	STA Objects_Data1, X

	LDA #$FF
	STA <Objects_YHiZ, X

	LDA #$E0
	STA <Objects_YZ, X

	LDA #$00
	STA <Objects_XHiZ, X

	LDA Colosssal_ObjectsPal, Y
	STA Objects_SpriteAttributes, X

	STX <Temp_Var1

	LDA RandomN
	AND #$30
	ASL A
	ASL A
	
	ORA <Temp_Var1
	LDY <Temp_Var1

	LDA Colosssal_ObjectsX, Y
	STA <Objects_XZ, X

	JSR Object_CalcBoundBoxForced
	JSR Object_MoveTowardsPlayer

	LDX <CurrentObjectIndexZ

CC_MakeObjectRTS:
	RTS

Colosssal_CheepFlash:
	.byte SPR_PAL1, SPR_PAL3

Colossal_CheepHit:
	LDA #OBJSTATE_NORMAL
	STA Objects_State, X

	JSR Object_Move
	JSR Object_CalcBoundBox
	
	LDA Game_Counter
	LSR A
	LSR A
	AND #$01
	TAY
	
	LDA Colosssal_CheepFlash, Y
	STA Objects_SpriteAttributes, X

	JSR Object_CheckOffScreen
	BCC CC_KeepMovingBack

	LDA #$05
	STA Colossal_CheepAction, X

CC_KeepMovingBack:
	JMP CC_CheckFloor

Colossal_CheepDie:
	LDA Objects_Timer, X
	BEQ CC_Die

	LDA Game_Counter
	LSR A
	AND #$01
	TAY

	LDA Colosssal_CheepFlash, Y
	STA Objects_SpriteAttributes, X
	JMP CC_AnimateNorm

CC_Die:
	LDA #$80
	STA CompleteLevelTimer

	LDA <Objects_XZ, X
	ADD #$08
	STA <Objects_XZ, X

	LDA <Objects_XHiZ, X
	ADC #$00
	STA <Objects_XHiZ, X

	LDA <Objects_YZ, X
	ADD #$08
	STA <Objects_YZ, X

	LDA <Objects_YHiZ, X
	ADC #$00
	STA <Objects_YHiZ, X

	JMP Object_Explode

WaterFill_XOffsets:
	.byte $FC, $F8, $F4
	.byte $FC, $F8, $F4
	.byte $FC, $F8, $F4

WaterFill_YOffsets:
	.byte $7F, $6F, $5F
	.byte $4F, $3F, $2F
	.byte $1F, $0F, $00

Colossal_FloodRoom:
	LDA Objects_Timer, X
	BNE CCNo_Water

	LDA  Colossal_CheepWaterLevel, X
	CMP #$09
	BCC Create_Water

	INC Colossal_CheepAction, X
	
	LDA Colossal_CheepHealth, X
	STA Colossal_CheepPasses, X

	LDA <Objects_XVelZ, X
	EOR #$FF
	ADD #$01
	
	JSR Double_Value

	STA <Objects_XVelZ, X

	JSR Colossal_CheepReposition

	LDA #$00
	STA Colossal_CheepWaterLevel, X

CCNo_Water:
	RTS

Create_Water:
	LDA #$03
	STA <Temp_Var10

More_Water:
	LDY Colossal_CheepWaterLevel, X
	JSR Object_FindEmptyX

	LDA #OBJ_WATERFILLER
	STA Objects_ID, X

	LDA WaterFill_XOffsets, Y
	STA <Objects_XZ, X

	LDA #$FF
	STA <Objects_XHiZ, X

	LDA WaterFill_YOffsets, Y
	STA <Objects_YZ, X

	LDA #00
	STA <Objects_YHiZ, X

	LDA #$40
	STA <Objects_XVelZ, X

	LDA #SPR_PAL2
	STA Objects_SpriteAttributes, X

	LDA #SPR_HFLIP
	STA Objects_Orientation, X

	LDX <CurrentObjectIndexZ

	INC Colossal_CheepWaterLevel, X
	DEC <Temp_Var10
	BNE More_Water

	LDA #$50
	STA Objects_Timer, X
	RTS

Colossal_CheepYOffsets:
	.byte $08, $28, $48, $68

Colossal_CheepReposition:
	LDA RandomN, X
	AND #$03
	TAY

	LDA Colossal_CheepYOffsets, Y
	STA <Objects_YZ, X
	
	LDA #$00
	STA <Objects_YHiZ, X

	LDA Colossal_CheepAction, X
	CMP #$07
	BCS CC_NoBubble

	JSR Colossal_CheepMakeBubble

CC_NoBubble:
	RTS

Colossal_SwimFlooded:
	JSR Object_ApplyXVel
	JSR Object_FaceDirectionMoving
	JSR Object_CalcBoundBox
	JSR Object_DetectTiles
	JSR Object_AttackOrDefeat

	JSR Object_CheckOffScreen
	BCC CC_FloodKeepSwimming

	LDA <Objects_XVelZ, X
	EOR #$FF
	ADD #$01
	STA <Objects_XVelZ, X

	DEC Colossal_CheepPasses, X
	BNE CC_SwimAgain

	INC Colossal_CheepAction, X
	JSR DestroyAllEnemies

	LDA #OBJSTATE_NORMAL
	STA Objects_State, X
	RTS

CC_SwimAgain:
	JSR Colossal_CheepReposition

CC_FloodKeepSwimming:
	JMP Colossal_CheepAnimate

Colossal_CheepDrainRoom:
	JMP Colossal_FloodRoom

Colossal_CheepReset:
	LDA #$01
	STA Colossal_CheepAction, X

	JMP Colossal_CheepResetPasses

Colossal_CheepResetPasses:
	LDA RandomN, X
	AND #$03
	TAY 

	LDA Colossal_CheepPassesNeeded, Y
	STA Colossal_CheepPasses, X
	RTS

Colossal_CheepBubbleX:
	.byte $28, $48, $68, $88

Colossal_CheepMakeBubble:
	JSR Object_FindEmptyX

	LDA RandomN, X
	AND #$03
	TAY

	LDA #OBJ_BUBBLE
	STA Objects_ID, X

	LDA #$03
	STA Bubble_Action, X

	LDA Colossal_CheepBubbleX, Y
	STA <Objects_XZ, X

	LDA #$00
	STA <Objects_XHiZ, X
	STA <Objects_YHiZ, X
	STA Objects_Property, X

	LDA #$80
	STA <Objects_YZ, X

	LDA #SPR_PAL2
	STA Objects_SpriteAttributes, X

	LDX <CurrentObjectIndexZ
	RTS
	
Colossal_CheepAnimate:
	INC Colossal_CheepFrames, X
	
	LDA <Objects_YVelZ, X
	BPL CC_AnimateNorm

	LDA Colossal_CheepFrames, X
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame, X

	JMP Colossal_CheepDraw

CC_AnimateNorm:
	LDA Colossal_CheepFrames, X
	
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame, X

Colossal_CheepDraw:
	LDA #LOW(Colossal_CheepSprites)
	STA <Giant_TilesLow

	LDA #HIGH(Colossal_CheepSprites)
	STA <Giant_TilesHi

	LDA #$1B
	STA PatTable_BankSel + 4

	LDA Objects_Orientation, X
	AND #~SPR_VFLIP
	STA Objects_Orientation, X

	JSR Object_CheckForeground
	JMP Object_DrawGiant

Giant_PiranhaSprites:
	.byte $81, $83, $85, $87, $A1, $A3, $A5, $A7
	.byte $89, $8B, $8D, $8F, $A9, $AB, $AD, $AF

Giant_PiranhaAction = Objects_Data1
Giant_PiranhaFrames = Objects_Data2
Giant_PiranhaAttackTicker = Objects_Data3
Giant_PiranhaTicker = Objects_Data4

Giant_Piranha:
	LDA <Player_HaltGameZ
	BEQ Giant_PiranhaNorm

	JMP Giant_PiranhaDraw

Giant_PiranhaNorm:
	LDA Giant_PiranhaAction, X
	JSR DynJump

	.word Giant_PiranhaInit
	.word Giant_WaitUnder
	.word Giant_PiranhaAttackUp
	.word Giant_PiranhaAttackDown

Giant_PiranhaInit:
	LDA #SPR_PAL1
	STA Objects_SpriteAttributes, X

	LDA #SPR_BEHINDBG
	STA Objects_Orientation, X

	LDA #ATTR_STOMPPROOF
	STA Objects_WeaponAttr, X
	
	LDA #$C0
	STA <Objects_YZ, X

	LDA #$00
	STA <Objects_YHiZ, X

	LDA #$F0
	STA ChaseVel_LimitLo, X

	LDA #$10
	STA ChaseVel_LimitHi, X

	LDA #$04
	STA Objects_Health, X

	INC Giant_PiranhaAction, X

	LDA #$80
	STA Objects_Timer, X
	RTS

Giant_WaitUnder:
	LDA Objects_Timer, X
	BNE Giant_WaitUnder1

	INC Giant_PiranhaAction, X

	LDA Player_X
	AND #$F0

	STA <Objects_XZ, X

Giant_WaitUnder1:
	RTS

Giant_PiranhaAttackUp:
	LDA #$C0
	STA <Objects_YVelZ, X

	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat

	LDA <Objects_YZ, X
	CMP #$90
	BCS Giant_PiranhaAttackUpRTS

	LDA #$40
	STA Objects_Timer, X
	INC Giant_PiranhaAction, X

Giant_PiranhaAttackUpRTS:
	JMP Giant_PiranhaAnimate

Giant_PiranhaBurstBlocks:
	LDA <Objects_XZ, X
	ADD #$08
	STA Block_DetectX

	LDA #$00
	STA Block_DetectXHi


Giant_PiranhaAttackDown:
	LDA Objects_Timer, X
	BNE Giant_PiranhaAttackDownRTS

	LDA #$40
	STA <Objects_YVelZ, X

	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat

	LDA <Objects_YZ, X
	CMP #$C0
	BCC Giant_PiranhaAttackDownRTS

	LDA #$01
	STA  Giant_PiranhaAction, X

	LDA #$80
	STA Objects_Timer, X

Giant_PiranhaAttackDownRTS:
	JMP Giant_PiranhaAnimate

;
;	INC Thwomp_Ticker, X
;	LDA Thwomp_Ticker, X
;	AND #$01
;	TAY
;
;	LDA Objects_BoundLeft, X
;	ADD Thwomp_DetectXOffset, Y
;	STA Tile_DetectionX
;
;	LDA Objects_BoundLeftHi, X
;	ADC #$00
;	STA Tile_DetectionXHi
;
;	LDA Objects_BoundTop, X
;	STA Tile_DetectionY
;
;	LDA Objects_BoundTopHi, X
;	STA Tile_DetectionYHi
;
;	JSR Object_DetectTile
;	LDA Tile_LastProp
;	CMP #TILE_PROP_SOLID_TOP
;	BCC AngryThwomp_NoHit
;
;	JSR Object_HitCeiling
;
;	INC Thwomp_TilesDetected, X
;	LDA Thwomp_TilesDetected, X
;	CMP #$03
;	BCS AngryThwomp_DetectCeil
;
;	LDA #$E0
;	STA <Objects_YVelZ, X
;
;	LDA Tile_LastProp
;	CMP #TILE_ITEM_COIN
;	BCC AngryThwomp_NoBump
;
;	JSR Object_DirectBumpBlocks
;
;AngryThwomp_NoBump:
;	JMP Thwomp_Draw
;
;AngryThwomp_DetectCeil:
;	LDA #$20
;	STA Level_Vibration
;
;	LDA #$30
;	STA Objects_Timer, X
;
;	LDA #SND_LEVELBABOOM
;	STA Sound_QLevel1
;	INC Thwomp_Action, X
;	RTS

Giant_PiranhaAnimate:
	INC Giant_PiranhaFrames, X
	LDA Giant_PiranhaFrames, X
	AND #$08
	LSR A
	LSR A
	LSR A
	STA Objects_Frame, X

Giant_PiranhaDraw:
	LDA #LOW(Giant_PiranhaSprites)
	STA <Giant_TilesLow

	LDA #HIGH(Giant_PiranhaSprites)
	STA <Giant_TilesHi

	LDA #$58
	STA PatTable_BankSel + 4

	LDA Objects_Orientation, X
	AND #~SPR_VFLIP
	STA Objects_Orientation, X

	JMP Object_DrawGiant