; Super Mario Bros. 3 Full Disassembly by Southbird 2012
; For more info, see http://www.sonicepoch.com/sm3mix/
;
; PLEASE INCLUDE A CREDIT TO THE SOUTHBIRD DISASSEMBLY
; AND THE ABOVE LINK SOMEWHERE IN YOUR WORKS :)
;
; Original disassembler source generated by DCC6502 version v1.4
; (With labels, comments, and some syntax corrections for nesasm by Southbird)
; For more info about DCC6502, e-mail veilleux@ameth.org
;
; This source file last updated: 2012-02-13 22:44:39.225983982 -0600
; Distribution package date: Fri Apr  6 23:46:16 UTC 2012
;---------------------------------------------------------------------------
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Gameplay_UpdateAndDrawMisc
;
; Color rotation effects, lava, donut lifts, arrow platforms,
; brick busts, water/waterfall visual effects, bubbles, splashes,
; pop-up coins, Special Objects, Cannon Fires, Player Projectiles,
; and, last but not least (well, maybe least), "shell kill flashes"!
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Gameplay_UpdateAndDrawMisc:
	JSR BrickBusts_DrawAndUpdate	 ; Draw and update brick bust effects
	JSR CoinPUps_DrawAndUpdate	 ; Update and draw coins that have popped out of boxes
	JSR SpecialObjs_UpdateAndDraw	 ; Update and draw Special objects
	JSR ObjectGenerator_UpdateAndDraw	 ; Update and draw the Cannon Fires
	JSR PlayerProjs_UpdateAndDraw	 ; Update and draw Player's weapon projectiles
	
	LDA Player_HaltTick	; If Player is not halted ...
	ORA Player_IsDucking	; ... Player is ducking ...
	ORA Player_Kick	 	; ... Player is kicking ...
	ORA Player_InPipe	; ... Player is in a pipe ...
	ORA <Player_HaltGameZ	; ... gameplay is halted ...
	BNE PRG007_A268	 	; ... then jump to PRG007_A268

	BIT <Pad_Input
	BVC PRG007_A268	 ; If Player is NOT pressing B, jump to PRG007_A268

	JSR PlayerProj_ThrowWeapon	 ; Player throws weapon, whatever's appropriate

PRG007_A268:
	RTS		 ; Return

Player_Projectiles:
	.byte $00, $00, PLAYER_FIREBALL, $00, $00, $00, PLAYER_HAMMER, PLAYER_ICEBALL, $00, $00, $00, PLAYER_NINJASTAR

PlayerProj_ThrowWeapon:
	LDA Player_Vehicle
	BEQ PowerUp_Weapon

	LDA #PLAYER_BULLET
	BNE PlayerProj_ThrowWeapon1

PowerUp_Weapon:	
	LDA Wall_Jump_Enabled
	BNE PlayerProj_None

	LDY Player_EffectiveSuit
	LDA Player_Projectiles, Y
	BNE PlayerProj_ThrowWeapon1

PlayerProj_None:
	RTS

PlayerProj_ThrowWeapon1:
	TAY
	LDX #$09

PlayerProj_ThrowWeapon2:
	LDA SpecialObj_ID, X
	BEQ PlayerProj_ThrowWeapon3

	DEX
	LDA SpecialObj_ID, X
	BEQ PlayerProj_ThrowWeapon3
	RTS

PlayerProj_ThrowWeapon3:
	LDA Sound_QPlayer
	ORA #SND_PLAYERFIRE
	STA Sound_QPlayer

	LDA #$0B
	STA Player_FireCount

	TYA
	STA SpecialObj_ID, X

	JSR DynJump

	.word Throw_FireBall
	.word Throw_FireBall
	.word Throw_IceBall
	.word Throw_Hammer
	.word Throw_NinjaStar
	.word Throw_Bullet
	.word Throw_Bullet

IceFire_XVel:
	.byte $D0, $30, $E8, $18

IceFire_YVel:
	.byte $10, $C0

Throw_FireBall:
	JSR SetProjectilePosition8x16
	
	LDA IceFire_XVel, Y
	STA SpecialObj_XVel, X

	LDY #$00
	LDA <Pad_Holding
	AND #PAD_UP
	BEQ Throw_FireBall1
	
	INY

Throw_FireBall1:
	LDA IceFire_YVel, Y
	STA SpecialObj_YVel, X

	LDA #$00
	STA SpecialObj_Data2, X
	RTS

Throw_IceBall:
	JSR SetProjectilePosition8x16

	LDA IceFire_XVel + 2, Y
	STA SpecialObj_XVel, X

	LDA #$00
	STA SpecialObj_Data2, X
	STA SpecialObj_YVel, X
	RTS

Hammer_Vel:
	.byte $F0, $10

Throw_Hammer:
	JSR SetProjectilePosition16x16
	
	LDA <Player_XVelZ
	ADC Hammer_Vel, Y
	STA SpecialObj_XVel, X

	LDA #$C0
	STA SpecialObj_YVel, X
	RTS

PlayerNinja_YVel:
	.byte $00, $30, $D0, $D0

PlayerNinja_XVel:
	.byte $D0, $30, $00

Throw_NinjaStar:
	
	JSR SetProjectilePosition16x16

	LDA <Pad_Holding
	AND #$0C
	LSR A
	LSR A
	TAY

	LDA PlayerNinja_YVel, Y
	STA SpecialObj_YVel, X
	BEQ Throw_NinjaStar1

	LDA <Pad_Holding
	AND #(PAD_LEFT | PAD_RIGHT)
	BNE Throw_NinjaStar1

	LDA SpecialObj_YVel, X
	BPL Throw_NinjaStar1
	
	LDA #$00
	STA SpecialObj_XVel, X
	RTS

Throw_NinjaStar1:
	LDY Player_Direction
	LDA PlayerNinja_XVel, Y
	STA SpecialObj_XVel, X
	RTS		 ; Return

Throw_Bullet:
	
	JSR SetProjectilePosition8x16
	
	LDA #$40
	STA SpecialObj_XVel, X

	LDA SpecialObj_Y, X
	ADD #$05
	STA SpecialObj_Y, X
	RTS

Proj_BallPos:
	.byte $04, $0C, $FE, $04
	.byte $00, $00, $FF, $00

SetProjectilePosition16x16:
	LDY Player_Direction

	LDA <Player_X
	ADD Proj_BallPos + 2, Y
	STA SpecialObj_X, X

	LDA <Player_XHi
	ADC Proj_BallPos + 6, Y
	STA SpecialObj_XHi,X
	JMP SetProjectileYPos

SetProjectilePosition8x16:
	LDY Player_Direction

	LDA <Player_X
	ADD Proj_BallPos, Y
	STA SpecialObj_X,X

	LDA <Player_XHi
	ADC #$00
	STA SpecialObj_XHi,X

SetProjectileYPos:
	LDA <Player_YZ
	ADD #$08
	STA SpecialObj_Y,X

	LDA <Player_YHiZ
	ADC #$00
	STA SpecialObj_YHi,X
	RTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; PlayerProjs_UpdateAndDraw
;
; Update and draw Player Projectiles 
; (weapons, i.e. fireballs/hammers/fireball poofs)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PlayerProjs_UpdateAndDraw:
	LDX #$09
	STX <CurrentObjectIndexZ
	JSR Player_ProjDoState

	LDX #$08
	STX <CurrentObjectIndexZ
	
Player_ProjDoState:
	LDA SpecialObj_ID, X

	JSR DynJump

	.word Player_Nothing
	.word Player_FireBall
	.word Player_IceBall
	.word Player_Hammer
	.word Player_NinjaStar
	.word SpecialObj_Poof
	.word Player_Bullet

Player_Nothing
	RTS

SpecialObj_ObjectAttributes = Temp_Var16

Player_FireBall:
	LDA <Player_HaltGameZ
	BNE Player_FireBall5

	LDA Player_EffectiveSuit
	CMP #MARIO_FIRE
	BNE Player_FireBallNoKill

	JSR SObj_ApplyXYVelsWithGravity
	INC SpecialObj_YVel, X
	INC SpecialObj_YVel, X

	JSR SpecialObj_CalcBounds8x16
	JSR PlayerProj_HitEnemies
	BCC Player_FireBallTiles

	LDA #$01
	STA Proj_Attack

Player_HitFire:
	LDA #HIT_FIREBALL
	STA Objects_PlayerProjHit, Y

	LDA <SpecialObj_ObjectAttributes
	CMP #ATTR_ALLWEAPONPROOF
	BEQ Player_FireBallTiles

	AND #ATTR_FIREPROOF
	BNE Player_FireBallNoKill

	JSR SpecialObj_AttackEnemy
	JMP SpecialObj_ToPoofNoSound

Player_FireBallNoKill:
	JMP SpecialObj_ToPoof

Player_FireBallTiles:
	JSR SpecialObj_DetectWorld8x8
	JSR SpecialObj_FireTiles
	BCC Player_FireballNoHitIce

	JMP SpecialObj_ToPoofNoSound

Player_FireballNoHitIce:
	LDA SpecialObj_YVel, X
	BPL Player_FireBall1

	LDA Tile_LastProp
	CMP #TILE_PROP_SOLID_ALL
	BCC Player_FireBall4
	BCS Player_FireBall2

Player_FireBall1:
	LDA Tile_LastProp
	CMP #TILE_PROP_SOLID_TOP
	BCC Player_FireBall4

Player_FireBall2:
	INC SpecialObj_Data2, X
	LDA SpecialObj_Data2, X
	CMP #$02
	BNE Player_FireBall3

	LDA SpecialObj_X, X
	SUB #$08
	STA SpecialObj_X, X

	JMP SpecialObj_ToPoof

Player_FireBall3:
	LDA SpecialObj_YVel, X
	BMI Player_FireBall5

	LDA #-$2C
	STA SpecialObj_YVel, X
	BNE Player_FireBall5

Player_FireBall4:
	LDA #$00
	STA SpecialObj_Data2, X

Player_FireBall5:
	LDA #$63
	STA <SpecialObj_Tile

	LDA #SPR_PAL0
	STA <SpecialObj_Attributes
	
	JSR SpecialObj_CheckForeground
	JSR SpecialObj_CheckDirection
	JSR SpecialObj_Draw8x16
	RTS

SpecialObj_FireTiles:
	LDA Block_NeedsUpdate
	BNE SpecialObj_FireTiles1

	LDY #$07

SpecialObj_FireTiles0:
	LDA FireBallTransitions, Y
	BEQ Fire_Empty

	CMP Tile_LastValue
	BEQ Player_FireTiles2

Fire_Empty:
	DEY
	BPL SpecialObj_FireTiles0

SpecialObj_FireTiles1:
	CLC
	RTS

Player_FireTiles2:
	PHA
	ADD #$01
	
	JSR Object_ChangeBlock
	
	PLA
	STA Tile_LastValue

	JSR Projectile_TempChange

	LDA Tile_DetectionX
	AND #$F0
	STA SpecialObj_X, X

	LDA Tile_DetectionY
	AND #$F0
	STA SpecialObj_Y, X

SpecialObj_FireTiles2:
	SEC
	RTS

Player_IceBall:
	LDA <Player_HaltGameZ
	BEQ Player_IceBall0

	JMP Player_IceBall5

Player_IceBall0:
	LDA Player_EffectiveSuit
	CMP #MARIO_ICE
	BNE Player_IceBallNoKill

	JSR SObj_ApplyXYVelsWithGravity
	INC SpecialObj_YVel, X
	INC SpecialObj_YVel, X

	JSR SpecialObj_CalcBounds8x16

	JSR PlayerProj_HitEnemies
	BCC Player_IceBallTiles

Player_HitIce:
	LDA #HIT_ICEBALL
	STA Objects_PlayerProjHit, Y

	LDA #$01
	STA Proj_Attack

	LDA <SpecialObj_ObjectAttributes
	CMP #ATTR_ALLWEAPONPROOF
	BEQ Player_IceBallTiles

	AND #ATTR_ICEPROOF
	BNE Player_IceBallNoKill

	JSR SpecialObj_AttackEnemy
	LDA Objects_State, Y
	CMP #OBJSTATE_KILLED
	BNE Player_IceBallNoKill

	LDA Objects_BehaviorAttr, Y
	AND #ATTR_NOICE
	BEQ Make_Ice
	JMP SpecialObj_ToPoofNoSound

Make_Ice:
	LDA #OBJSTATE_FROZEN
	STA Objects_State,Y
	
	LDA #$00
	STA Explosion_Timer, Y
	STA Objects_Timer3, Y

	LDA #$FF
	STA Objects_Timer, Y

	TYA
	TAX

	JSR Object_FallAwayFromPlayer
	
	LDX <CurrentObjectIndexZ
	JMP SpecialObj_ToPoofNoSound

Player_IceBallNoKill:

	JMP SpecialObj_ToPoof

Player_IceBallTiles:
	JSR SpecialObj_DetectWorld8x8
	JSR SpecialObj_IceTiles
	BCC Player_IceballNoHitIce

	JMP SpecialObj_ToPoofNoSound	

Player_IceballNoHitIce:
	LDA SpecialObj_YVel, X
	BPL Player_IceBall1

	LDA Tile_LastProp
	CMP #TILE_PROP_SOLID_ALL
	BCC Player_IceBall4
	BCS Player_IceBall2

Player_IceBall1:
	LDA Tile_LastProp
	AND #$F0
	CMP #TILE_PROP_SOLID_BOTTOM
	BEQ Player_IceBall4

	CMP #TILE_PROP_SOLID_TOP
	BCC Player_IceBall4

Player_IceBall2:
	INC SpecialObj_Data2, X
	LDA SpecialObj_Data2, X
	CMP #$02
	BNE Player_IceBall3

	LDA SpecialObj_X, X
	SUB #$08
	STA SpecialObj_X, X

	JMP SpecialObj_ToPoof

Player_IceBall3:
	LDA SpecialObj_YVel, X
	BMI Player_IceBall5

	LDA #-$4C
	STA SpecialObj_YVel, X
	BNE Player_IceBall5

Player_IceBall4:
	LDA #$00
	STA SpecialObj_Data2, X

Player_IceBall5:
	LDA #$59
	STA <SpecialObj_Tile

	LDA #SPR_PAL2
	STA <SpecialObj_Attributes
	JSR SpecialObj_CheckForeground
	JSR SpecialObj_CheckDirection
	JSR SpecialObj_Draw8x16
	RTS


SpecialObj_IceTiles:
	LDA Block_NeedsUpdate
	BNE SpecialObj_IceTiles1

	LDY #$07

SpecialObj_IceTiles0:
	LDA IceBallTransitions, Y
	BEQ Ice_Empty

	CMP Tile_LastValue
	BEQ SpecialObj_IceTiles2

Ice_Empty:
	DEY
	BPL SpecialObj_IceTiles0

	CLC

SpecialObj_IceTiles1:
	RTS

SpecialObj_IceTiles2:
	PHA
	SUB #$01
	
	JSR Object_ChangeBlock
	
	PLA
	TAY
	
	LDA TileProperties, Y
	CMP #TILE_PROP_WATER
	BEQ  IceTiles_YesTemp

	CMP #(TILE_PROP_WATER | TILE_PROP_FOREGROUND)
	BNE IceTiles_NoTemp

IceTiles_YesTemp:
	JSR Tile_WriteTempChange
	BCC IceTiles_NoTemp

	LDA #$40
	STA SpinnerBlocksTimers, Y
	STA SpinnerBlocksPoof, Y

IceTiles_NoTemp:
	SEC
	LDA SpecialObj_Data3, X
	BNE SpecialObj_IceTiles1

	LDA Tile_DetectionX
	AND #$F0
	STA SpecialObj_X, X

	LDA Tile_DetectionY
	AND #$F0
	STA SpecialObj_Y, X

	JMP SpecialObj_ToPoofNoSound

SpecialObj_ToPoof:
	LDA #SND_PLAYERBUMP
	STA Sound_QPlayer

SpecialObj_ToPoofNoSound:
	LDA Player_StarInv
	BNE SpecialObj_ToPoofNoSound1

SpecialObj_ForcedPoof:
	LDA #PLAYER_POOF
	STA SpecialObj_ID, X

	LDA #$00
	STA SpecialObj_XVel, X
	STA SpecialObj_YVel, X
	STA SpecialObj_Data2, X

	LDA #SPR_PAL2
	STA SpecialObj_Data3, X

	LDA #$10
	STA SpecialObj_Timer, X

	LDA #$00
	STA SpecialObj_Data1, X

SpecialObj_ToPoofNoSound1:
	RTS

Player_Hammer:
	LDA <Player_HaltGameZ
	BNE Player_HammerDraw

	LDA Player_EffectiveSuit
	CMP #MARIO_HAMMER
	BNE Player_HammerPoof

	JSR SObj_ApplyXYVelsWithGravity
	JSR SpecialObj_CalcBounds16x16
	
	JSR PlayerProj_HitEnemies
	BCC Player_HammerNoKill

	LDA <SpecialObj_ObjectAttributes
	CMP #ATTR_ALLWEAPONPROOF
	BEQ Player_HammerNoKill

	AND #ATTR_HAMMERPROOF
	BNE Player_HammerPoof

	LDA #HIT_HAMMER
	STA Objects_PlayerProjHit, Y

	LDA #$02
	STA Proj_Attack

	JSR SpecialObj_AttackEnemy


Player_HammerPoof:
	JMP SpecialObj_ForcedPoof

Player_HammerNoKill:
	JSR SpecialObj_DetectWorld16x16
	JSR Player_HammerTilesInteraction

Player_HammerDraw:
	LDA #$6D
	STA <SpecialObj_Tile

	LDA #$6F
	STA <SpecialObj_Tile + 1

	LDA #SPR_PAL3
	STA <SpecialObj_Attributes
	STA <SpecialObj_Attributes + 1
	JSR SpecialObj_CheckForeground
	JSR SpecialObj_CheckDirection16x16
	JSR SpecialObj_Draw16x16
	RTS

Player_HammerTilesInteraction:
	LDA Block_NeedsUpdate
	BNE Player_HammerTilesInteraction1

	LDY #$02

Player_HammerTilesInteraction0:
	LDA Tile_LastProp
	CMP #(TILE_PROP_SOLID_ALL | TILE_PROP_STONE) 
	BNE Hammer_NotStone

	LDA #(TILE_PROP_ITEM | TILE_ITEM_BRICK)
	STA Tile_LastProp

Hammer_NotStone:
	CMP #TILE_PROP_ITEM
	BCS Player_HammerTilesInteraction2

Player_HammerTilesInteraction1:
	RTS

Player_HammerTilesInteraction2:
	JSR Object_DirectBumpBlocks

	JMP Player_HammerPoof

Player_NinjaStar:
	LDA <Player_HaltGameZ
	BNE Player_StarNoKill

	LDA Player_EffectiveSuit
	CMP #MARIO_NINJA
	BNE Player_StarPoof

	JSR SObj_ApplyXYVels
	JSR SpecialObj_CalcBounds16x16
	JSR PlayerProj_HitEnemies
	BCC Player_StarNoKill

	LDA <SpecialObj_ObjectAttributes
	CMP #ATTR_ALLWEAPONPROOF
	BEQ Player_StarNoKill

	AND #ATTR_NINJAPROOF
	BNE Player_StarPoof

	LDA #HIT_NINJASTAR
	STA Objects_PlayerProjHit, Y

	LDA #$01
	STA Proj_Attack

	JSR SpecialObj_AttackEnemy


Player_StarPoof:
	JMP SpecialObj_ForcedPoof

Player_StarNoKill:

	LDA #$4D
	STA <SpecialObj_Tile
	STA <SpecialObj_Tile + 1

	LDA #SPR_PAL3
	STA <SpecialObj_Attributes
	STA <SpecialObj_Attributes + 1
	JSR SpecialObj_SetMirrorFlipped
	JSR SpecialObj_CheckForeground
	JSR SpecialObj_Draw16x16
	RTS

Player_Bullet:
	LDA <Player_HaltGameZ
	BNE Player_BulletNoKill

	JSR SObj_ApplyXYVels
	JSR SpecialObj_CalcBounds8x16

	LDA #$01
	STA Proj_Attack

	JSR PlayerProj_HitEnemies
	BCC Player_BulletNoKill

	LDA <SpecialObj_ObjectAttributes
	CMP #ATTR_ALLWEAPONPROOF
	BEQ Player_BulletNoKill

	AND #ATTR_NINJAPROOF
	BNE Player_BulletPoof

	LDA #HIT_NINJASTAR
	STA Objects_PlayerProjHit, Y

	LDA #$01
	STA Proj_Attack

	JSR SpecialObj_AttackEnemy


Player_BulletPoof:
	LDA #$00
	STA SpecialObj_ID,X
	RTS

Player_BulletNoKill:
	JSR SpecialObj_DetectWorld8x8
	JSR Player_HammerTilesInteraction

	LDA Tile_LastProp
	CMP #TILE_PROP_SOLID_ALL
	BCC Bull_NoSolid

	JMP SpecialObj_Delete

Bull_NoSolid:	
	LDA #$15
	STA <SpecialObj_Tile

	LDA #SPR_PAL3
	STA <SpecialObj_Attributes
	JSR SpecialObj_CheckForeground
	JSR SpecialObj_Draw8x16
	RTS

SpecialObj_SetMirrorFlipped:
	LDA SpecialObj_XVel, X
	BPL SpecialObj_SetMirrorFlipped1

	LDA #(SPR_VFLIP | SPR_HFLIP)
	ORA <SpecialObj_Attributes
	STA <SpecialObj_Attributes + 1
	BNE SpecialObj_SetMirrorFlipped2

SpecialObj_SetMirrorFlipped1:
	LDA <SpecialObj_Attributes + 1
	ORA #(SPR_HFLIP)
	STA <SpecialObj_Attributes + 1

	LDA <SpecialObj_Attributes
	ORA #(SPR_VFLIP)
	STA <SpecialObj_Attributes

SpecialObj_SetMirrorFlipped2:
	RTS

SpecialObj_Poof:
	LDA <Player_HaltGameZ
	BNE Poof_DoDraw

	JSR SObj_ApplyXYVels

	DEC SpecialObj_Timer, X
	BEQ SpecialObj_Poof1

Poof_DoDraw:
	LDA SpecialObj_Data1, X
	BEQ Poof_DrawNorm

	LDA SpecialObj_Timer, X
	LSR A
	LSR A
	LSR A
	AND #$03
	TAY
	JMP Poof_DrawTiles 

Poof_DrawNorm:
	LDA SpecialObj_Timer, X
	LSR A
	LSR A
	AND #$03
	TAY

Poof_DrawTiles:
	LDA SpecialObj_Data2, X
	BEQ Poof_AnimateNorma

	TYA
	ADD #$04
	TAY

Poof_AnimateNorma:
	LDA Poof_Patterns, Y
	STA <SpecialObj_Tile
	STA <SpecialObj_Tile2

	LDA SpecialObj_Timer, X
	LSR A
	LSR A
	AND #$01
	BNE SpecialObj_PoofMirrored

	LDA SpecialObj_Data3, X
	STA SpecialObj_Attributes

	ORA #(SPR_VFLIP | SPR_HFLIP)
	STA SpecialObj_Attributes + 1
	BNE SpecialObj_Poof0

SpecialObj_PoofMirrored:
	LDA SpecialObj_Data3, X
	ORA #SPR_VFLIP
	STA SpecialObj_Attributes

	LDA SpecialObj_Data3, X
	ORA #SPR_HFLIP
	STA SpecialObj_Attributes + 1

SpecialObj_Poof0:
	JSR SpecialObj_Draw16x16
	RTS


SpecialObj_Poof1:
	JMP SpecialObj_Delete

Detect16x16:
	.byte $06, $0A

SpecialObj_DetectWorld16x16:
	LDA Game_Counter
	AND #$01
	TAY
	STA <Temp_Var16

	LDA SpecialObj_X,X
	ADD Detect16x16, Y
	STA Tile_DetectionX

	LDA SpecialObj_XHi,X
	ADC #$00
	STA Tile_DetectionXHi

	LDA Game_Counter
	AND #$02
	ORA <Temp_Var16
	STA <Temp_Var16
	LSR A
	TAY

	LDA SpecialObj_Y,X
	ADD Detect16x16, Y
	STA Tile_DetectionY

	LDA SpecialObj_YHi,X
	ADC #$00
	STA Tile_DetectionYHi

	JMP Object_DetectTile


Detect16x16Big:
	.byte $01, $10

SpecialObj_DetectWorld16x16Side:
	LDY #$00
	
	LDA SpecialObj_XVel, X
	BMI Special_Obj16x6HitLeft

	INY

Special_Obj16x6HitLeft:
	LDA SpecialObj_X,X
	ADD Detect16x16Big, Y
	STA Tile_DetectionX

	LDA SpecialObj_XHi,X
	ADC #$00
	STA Tile_DetectionXHi

	LDA SpecialObj_Y,X
	ADD #$0C
	STA Tile_DetectionY

	LDA SpecialObj_YHi,X
	ADC #$00
	STA Tile_DetectionYHi

	JMP Object_DetectTile

SpecialObj_DetectWorld16x16Bottom:
	LDA SpecialObj_X,X
	ADD #$08
	STA Tile_DetectionX

	LDA SpecialObj_XHi,X
	ADC #$00
	STA Tile_DetectionXHi

	LDA SpecialObj_Y,X
	ADD #$10
	STA Tile_DetectionY

	LDA SpecialObj_YHi,X
	ADC #$00
	STA Tile_DetectionYHi

	JMP Object_DetectTile	

Detect8x8:
	.byte $00, $08, $04, $0C

SpecialObj_DetectWorld8x8:
	LDY #$00
	LDA SpecialObj_YVel,X
	BMI DW81

	INY

DW81:
	LDA SpecialObj_Y,X
	ADD Detect8x8 + 2, Y
	STA Tile_DetectionY

	LDA SpecialObj_YHi,X
	ADC #$00
	STA Tile_DetectionYHi

	LDY #$00
	LDA SpecialObj_XVel,X
	BMI DW82

	INY

DW82:
	LDA SpecialObj_X,X
	ADD Detect8x8, Y
	STA Tile_DetectionX

	LDA SpecialObj_XHi,X
	ADC #$00
	STA Tile_DetectionXHi

	JMP Object_DetectTile

SpecialObj_Delete:
	
	LDA #$00
	STA SpecialObj_ID, X
	RTS

SpecialObj_CheckForeground:
	LDA Tile_LastProp
	CMP #TILE_PROP_SOLID_TOP
	BCS SpecialObj_CheckForeground1

	AND #TILE_PROP_FOREGROUND
	BEQ SpecialObj_CheckForeground1

	LDA <SpecialObj_Attributes
	ORA #SPR_BEHINDBG
	STA <SpecialObj_Attributes 

	LDA <SpecialObj_Attributes + 1
	ORA #SPR_BEHINDBG
	STA <SpecialObj_Attributes + 1

SpecialObj_CheckForeground1:
	RTS

SpecialObj_CheckDirection16x16:
	LDA SpecialObj_XVel, X
	BMI SpecialObj_CheckDirection16x161

SpecialObj_Flip:
	LDA <SpecialObj_Attributes + 1
	PHA

	LDA <SpecialObj_Attributes
	EOR #SPR_HFLIP
	STA <SpecialObj_Attributes + 1

	PLA
	EOR #SPR_HFLIP
	STA <SpecialObj_Attributes

	LDA <SpecialObj_Tile
	PHA

	LDA <SpecialObj_Tile + 1
	STA <SpecialObj_Tile

	PLA
	STA  <SpecialObj_Tile + 1

SpecialObj_CheckDirection16x161:
	RTS

SpecialObj_CheckDirection:
	LDA SpecialObj_XVel, X
	BMI SpecialObj_CheckDirection1

	LDA <SpecialObj_Attributes
	ORA #SPR_HFLIP
	STA <SpecialObj_Attributes

SpecialObj_CheckDirection1:
	RTS


SpecialObj_Tile = Temp_Var9
SpecialObj_Tile2 = Temp_Var10
SpecialObj_Attributes = Temp_Var11
SpecialObj_Attributes2 = Temp_Var12

SpecialObj_Draw8x16:
	JSR Object_GetUnusedSprite

	LDA SpecialObj_Y,X
	SUB Level_VertScroll
	CMP #$F0
	BCS SpecialObj_Draw8x160

	CMP #$C0
	BCS SpecialObj_Draw8x161

SpecialObj_Draw8x160:
	STA Sprite_RAM+$00,Y

	LDA SpecialObj_X,X
	SUB <Horz_Scroll
	CMP #$08

	BCC SpecialObj_Draw8x161
	CMP #$F8

	BCS SpecialObj_Draw8x161
	STA Sprite_RAM+$03,Y

	LDA <SpecialObj_Attributes
	STA Sprite_RAM + 2, Y

	LDA <SpecialObj_Tile
	STA Sprite_RAM + 1, Y
	RTS

SpecialObj_Draw8x161
	LDA #$F8
	STA Sprite_RAM, Y
	JMP SpecialObj_Delete

SpecialObj_Draw16x16:
	JSR Object_GetUnusedSprite

	LDA SpecialObj_Y,X
	SUB Level_VertScroll
	CMP #$C0
	BCC SpecialObj_NotDelete
	CMP #$D0
	BCC SpecialObj_Draw16x16Delete

SpecialObj_NotDelete:
	STA <Temp_Var1
	STA Sprite_RAM+$00,Y

	LDA SpecialObj_X,X
	SUB <Horz_Scroll
	CMP #$08

	BCC SpecialObj_Draw16x16Delete
	CMP #$F8

	BCS SpecialObj_Draw16x16Delete
	STA <Temp_Var2
	STA Sprite_RAM+$03,Y
	
	LDA <SpecialObj_Attributes
	STA Sprite_RAM + 2, Y

	LDA <SpecialObj_Tile
	STA Sprite_RAM + 1, Y

	JSR Object_GetUnusedSprite

	LDA <SpecialObj_Attributes2
	STA Sprite_RAM + 2, Y

	LDA <SpecialObj_Tile + 1
	STA Sprite_RAM + 1, Y

	LDA <Temp_Var1
	STA Sprite_RAM+$00,Y

	LDA <Temp_Var2
	ADD #$08
	STA Sprite_RAM+$03,Y
	RTS

SpecialObj_Draw16x16Delete:
	LDA #$F8
	STA Sprite_RAM, Y
	JMP SpecialObj_Delete

SpecialObj_CalcBounds8x16:
	LDA SpecialObj_X, X
	STA SpecialObj_BoundLeft

	LDA SpecialObj_XHi, X
	STA SpecialObj_BoundLeftHi

	LDA SpecialObj_BoundLeft
	ADD #$08
	STA SpecialObj_BoundRight

	LDA SpecialObj_BoundLeftHi
	ADC #$00
	STA SpecialObj_BoundRightHi

	LDA SpecialObj_Y, X
	ADD #$04
	STA SpecialObj_BoundTop

	LDA SpecialObj_YHi, X
	ADC #$00
	STA SpecialObj_BoundTopHi

	LDA SpecialObj_BoundTop
	ADD #$08
	STA SpecialObj_BoundBottom

	LDA SpecialObj_BoundTopHi
	ADC #$00
	STA SpecialObj_BoundBottomHi
	RTS

SpecialObj_CalcBounds16x16:
	LDA SpecialObj_X, X
	ADD #$04
	STA SpecialObj_BoundLeft

	LDA SpecialObj_XHi, X
	ADC #$00
	STA SpecialObj_BoundLeftHi

	LDA SpecialObj_BoundLeft
	ADD #$0A
	STA SpecialObj_BoundRight

	LDA SpecialObj_BoundLeftHi
	ADC #$00
	STA SpecialObj_BoundRightHi

	LDA SpecialObj_Y, X
	ADD #$04
	STA SpecialObj_BoundTop

	LDA SpecialObj_YHi, X
	ADC #$00
	STA SpecialObj_BoundTopHi

	LDA SpecialObj_BoundTop
	ADD #$0B
	STA SpecialObj_BoundBottom

	LDA SpecialObj_BoundTopHi
	ADC #$00
	STA SpecialObj_BoundBottomHi
	RTS
	

PlayerProj_HitEnemies:
	LDY #$04	 ; Y = 4 (enemies only exist in the lower slots)

PlayerProj_HitEnemies1:
	LDA Objects_Timer2, Y
	BNE PlayerProj_HitEnemies2

	LDA Objects_ToggleDetect, Y
	BNE PlayerProj_HitEnemies2
	
	LDA Objects_SpritesHorizontallyOffScreen,Y
	ORA Objects_SpritesVerticallyOffScreen,Y
	BNE PlayerProj_HitEnemies2	 ; If object has sprites horizontally or vertically off-screen, jump to PRG007_A667 (Forget it!)

	LDA #OBJSTATE_KICKED
	SUB Objects_State,Y	; X = object's State
	CMP #$03
	BCS PlayerProj_HitEnemies2

	LDA Objects_WeaponAttr,Y
	STA <SpecialObj_ObjectAttributes		; Object attribute flags -> Temp_Var1

	JSR SpecialObj_DetectObject	 ; See if Player Project hit an object and respond!
	BCC PlayerProj_HitEnemies2
	LDX <CurrentObjectIndexZ
	RTS

PlayerProj_HitEnemies2:
	DEY		 ; Y--
	BPL PlayerProj_HitEnemies1	; While Y >= 0, loop

	LDX <CurrentObjectIndexZ	 ; X = Player Projectile slot index
	CLC
	RTS		 ; Return

	; A Y range per bounding box index

SpecialObj_AttackEnemy:
	LDA Objects_Timer2, Y
	BNE SpecialObj_AttackEnemyRTS

	LDA Objects_Health,Y
	SUB Proj_Attack
	STA Objects_Health,Y
	BMI ProjEnemyDead	 ; If enemy has no hits left, jump to PRG007_A6DD
	
	JSR SpecialObj_ToPoof
	LDA #SND_PLAYERKICK
	STA Sound_QPlayer

SpecialObj_AttackEnemyRTS:
	RTS


ProjEnemyDead:
	
	TYA
	TAX
	JSR Object_GetKilled

	TXA
	TAY

	LDX <CurrentObjectIndexZ

	; Set object's velocity based on Player's velocity (sort of works)
	LDA SpecialObj_XVel,X
	BMI ProjEnemyDead_Left


	LDA #$0C
	BNE ProjEnemyDead_XVel

ProjEnemyDead_Left:
	LDA #-$0C

ProjEnemyDead_XVel:
	STA Objects_XVelZ,Y

	LDA #SND_PLAYERKICK
	STA Sound_QPlayer
	RTS


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; BrickBusts_DrawAndUpdate
;
; Draws and updates the brick bust debris/poof effects
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
BrickBusts_DrawAndUpdate:
	LDX #$01	 ; X = 1

PRG007_ABC7:
	STX <CurrentObjectIndexZ	; -> CurrentObjectIndexZ

	JSR BrickBust_DrawAndUpdate	 ; Draw and update this brick bust

	DEX		 ; X--
	BPL PRG007_ABC7	 ; While X >= 0, loop

PRG007_ABCF:
	RTS		 ; Return

BrickBust_SprRAMOff:	.byte $C8, $D8	; Four sprites required here
BrickPoof_SprRAMOff:	.byte $C8, $D0	; Only two sprites required here

	; Draw and update the specific brick bust
BrickBust_DrawAndUpdate:
	LDA BrickBust_En,X
	BEQ PRG007_ABCF	 ; If this brick bust slot is not active, jump to PRG007_ABCF

	CMP #$02
	BEQ PRG007_ABE0	 ; If the bust type is 2 (typical), jump to PRG007_ABE0

	JMP PRG007_AD27	 ; Otherwise, jump to PRG007_AD27

PRG007_ABE0:
	LDA <Player_HaltGameZ
	BNE PRG007_ABED	 ; If gameplay halted, jump to PRG007_ABED

	LDA <Counter_1
	AND #$03
	BNE PRG007_ABED	 ; 1:4 proceed, otherwise jump to PRG007_ABED

	INC BrickBust_YVel,X	 ; BrickBust_YVel++ (gravity)

PRG007_ABED:
	LDA Brick_DebrisYHi,X
	PHA		 ; Save upper chunk Y

	CLC		 ; Clear carry (no point?)
	SUB Level_ScrollDiffV	 ; Adjust Y based on vertical screen scroll

	LDY <Player_HaltGameZ
	BNE PRG007_ABFE	 ; If gameplay is halted, jump to PRG007_ABFE

	ADD BrickBust_YVel,X	 ; Apply brick bust Y velocity

PRG007_ABFE:
	STA Brick_DebrisYHi,X	 ; -> upper chunk Y

	PLA		 ; Restore original Y
	EOR Brick_DebrisYHi,X
	BPL PRG007_AC1F	 ; If the sign hasn't changed, jump to PRG007_AC1F

	; Sign changed; need to make sure the block bust debris didn't wrap

	LDA Level_ScrollDiffV

	LDY <Player_HaltGameZ
	BNE PRG007_AC12	 ; If gameplay halted, jump to PRG007_AC12

	SUB BrickBust_YVel,X	 ; Apply velocity in reverse

PRG007_AC12:
	EOR Brick_DebrisYHi,X
	BPL PRG007_AC1F	 ; If the sign didn't change, jump to PRG007_AC1F

	; Otherwise, toggle the upper chunk disable
	LDA BrickBust_HEn,X
	EOR #$08
	STA BrickBust_HEn,X

PRG007_AC1F:
	LDA Brick_DebrisY,X
	PHA		 ; Save lower chunk Y

	CLC		 ; Clear carry (no point?)
	SUB Level_ScrollDiffV	 ; Adjust Y based on vertical screens croll

	LDY <Player_HaltGameZ
	BNE PRG007_AC36	 ; If gameplay is halted, jump to PRG007_AC36

	INC Brick_DebrisXDist,X	 ; Increase the chunk separation

	ADD BrickBust_YVel,X	 ; Apply Y velocity

	ADD #$02		; More impact on lower chunk
PRG007_AC36:
	STA Brick_DebrisY,X

	PLA		 ; Restore lower chunk Y

	EOR Brick_DebrisY,X
	BPL PRG007_AC5A	 ; If the sign hasn't changed, jump to PRG007_AC5A

	; Sign changed; need to make sure the block bust debris didn't wrap

	LDA Level_ScrollDiffV

	LDY <Player_HaltGameZ
	BNE PRG007_AC4D	 ; If gameplay halted, jump to PRG007_AC4D

	SUB BrickBust_YVel,X	 ; Apply velocity in reverse
	SUB #$02	 ; With the greater impact

PRG007_AC4D:
	EOR Brick_DebrisY,X
	BPL PRG007_AC5A	 ; If sign didn't change, jump to PRG007_AC5A

	; Otherwise, toggle the lower chunk disable
	LDA BrickBust_HEn,X
	EOR #$04
	STA BrickBust_HEn,X

PRG007_AC5A:

	; Scroll brick bust debris horizontally with screen
	LDA Brick_DebrisX,X
	SUB Level_ScrollDiffH
	STA Brick_DebrisX,X

	TXA		 ; Keeps things interesting
	EOR <Counter_1
	AND #$01
	TAY		 ; Y = 0 or 1

	LDA BrickBust_SprRAMOff,Y
	TAY		 ; Y = sprite RAM offset
	CPY #$08	 
	BNE PRG007_AC7A	 ; If NOT using the offset $08, jump to PRG007_AC7A

	LDA Sprite_RAM+$08
	CMP #$f8
	BEQ PRG007_AC7A	 ; If this sprite is not in use, jump to PRG007_AC7A

	RTS		 ; Return

PRG007_AC7A:
	LDA BrickBust_HEn,X
	STA <Temp_Var4	 ; Horizontal enable flag -> Var4

	CMP #$0c
	BLT PRG007_AC91	 ; If at least one of upper or lower are enabled, jump to PRG007_AC91

	; Upper and lower are both disabled!

	LDA <Player_HaltGameZ
	BNE PRG007_AC8E	 ; If gameplay halted, jump to PRG007_AC8E

	LDA BrickBust_YVel,X
	CMP #$08
	BLS PRG007_AC91	 ; If brick bust Y velocity < $08, jump to PRG007_AC91

PRG007_AC8E:
	JMP PRG007_AD21	 ; Otherwise, jump to PRG007_AD21 (disable this brick bust)

PRG007_AC91:
	LDA <Temp_Var4
	AND #$08
	BNE PRG007_ACA0	 ; If upper bust chunks are disabled, jump to PRG007_ACA0

	; Otherwise set sprite Y for left and right uppers
	LDA Brick_DebrisYHi,X
	STA Sprite_RAM+$00,Y
	STA Sprite_RAM+$04,Y

PRG007_ACA0:
	LDA <Temp_Var4
	AND #$04
	BNE PRG007_ACAF	 ; If lower bust chunks are disabled, jump to PRG007_ACAF

	; Otherwise set sprite Y for left and right lowers
	LDA Brick_DebrisY,X
	STA Sprite_RAM+$08,Y
	STA Sprite_RAM+$0C,Y

PRG007_ACAF:
	LSR <Temp_Var4
	BCC PRG007_ACBB	 ; If right bust chunks are NOT disabled, jump to PRG007_ACBB

	; Hide right-hand bust chunks
	LDA #$f8
	STA Sprite_RAM+$00,Y
	STA Sprite_RAM+$08,Y

PRG007_ACBB:
	LSR <Temp_Var4
	BCC PRG007_ACC7	 ; If left bust chunks are NOT disabled, jump to PRG007_ACC7

	; Hide left-hand bust chunks
	LDA #$f8
	STA Sprite_RAM+$04,Y
	STA Sprite_RAM+$0C,Y

PRG007_ACC7:

	; Pattern for bust chunks
	LDA BrickBust_Tile, X
	STA Sprite_RAM+$01,Y
	STA Sprite_RAM+$05,Y
	STA Sprite_RAM+$09,Y
	STA Sprite_RAM+$0D,Y

	LDA Brick_DebrisX,X
	PHA		 ; Save chunk X
	ADD Brick_DebrisXDist,X	; Add the distance
	ADD #$08	 	; +8
	STA Sprite_RAM+$03,Y	; Set right upper chunk X
	STA Sprite_RAM+$0B,Y	; Set right lower chunk X

	CMP #248
	BLT PRG007_ACF2	 ; If bust chunk X < 248, jump to PRG007_ACF2

	; Otherwise, disable right chunks
	LDA BrickBust_HEn,X
	ORA #$01
	STA BrickBust_HEn,X

PRG007_ACF2:
	PLA		 ; Restore chunk X
	SUB Brick_DebrisXDist,X	 ; Subtract the distance
	STA Sprite_RAM+$07,Y	 ; Set left upper chunk X
	STA Sprite_RAM+$0F,Y	 ; Set left lower chunk X

	; Seems like this should be a >= 8 check??
	CMP #244
	BLT PRG007_AD09	 ; If bust chunk X < 244 (??), jump to PRG007_AD09

	; Otherwise, disable left chunks
	LDA BrickBust_HEn,X
	ORA #$02
	STA BrickBust_HEn,X

PRG007_AD09:

	; Rotate the horizontal / vertical flips
	LDA BrickBust_Pal, X
	STA Sprite_RAM+$06,Y

	ORA #SPR_VFLIP
	STA Sprite_RAM+$0E,Y

	ORA #SPR_HFLIP
	STA Sprite_RAM+$0A,Y

	LDA BrickBust_Pal, X
	ORA #SPR_HFLIP
	STA Sprite_RAM+$02,Y

	RTS		 ; Return

PRG007_AD21:

	; Disable this brick bust
	LDA #$00
	STA BrickBust_En,X
	LDA #$4B
	STA BrickBust_Tile, X
	LDA #SPR_PAL3
	STA BrickBust_Pal, X

	RTS		 ; Return

PRG007_AD27:

	; Brick bust type non-2 ("poof" away the tile)

	LDA BrickBust_HEn,X
	BEQ PRG007_AD21	 ; If BrickBust_HEn = 0 (poof expired), jump to PRG007_AD21 (disable this brick bust)

	LDA <Player_HaltGameZ
	BNE PRG007_AD33	 ; If gameplay is halted, jump to PRG007_AD33

	DEC BrickBust_HEn,X	 ; BrickBust_HEn-- (used as a counter here)

PRG007_AD33:
	LDA Brick_DebrisYHi,X

	LDY Level_AScrlConfig
	BNE PRG007_AD42	 ; If raster enabled, jump to PRG007_AD42

	; Otherwise, just be screen-scroll relative
	SUB Level_ScrollDiffV
	STA Brick_DebrisYHi,X

PRG007_AD42:
	CMP #208
	BGE PRG007_AD21	 ; If the poof effect Y >= 208 (too low), jump to PRG007_AD21 (disable this brick bust)

	CPY #$00
	BNE PRG007_AD54	 ; If raster effects enabled, jump to PRG007_AD54

	; Scroll poof horizontally
	LDA Brick_DebrisX,X
	SUB Level_ScrollDiffH
	STA Brick_DebrisX,X

PRG007_AD54:
	CMP #240
	BGE PRG007_AD21	 ; If the poof effect X >= 24, jump to PRG007_AD21 (disable this brick bust)

	TXA		 ; Keep it interesting
	EOR <Counter_1	 
	AND #$01	 
	TAY		 ; Y = 0 or 1

	LDA BrickPoof_SprRAMOff,Y
	TAY		 ; Y = Sprite RAM offset

	LDA Sprite_RAM+$00,Y
	CMP #$f8
	BNE PRG007_ADA7	 ; If this sprite is not free, jump to PRG007_ADA7 (RTS)

	; Set left sprite X
	LDA Brick_DebrisX,X
	STA Sprite_RAM+$03,Y

	; Set right sprite X
	ADD #$08	 ; +8
	STA Sprite_RAM+$07,Y

	; Set left/right sprite Y
	LDA Brick_DebrisYHi,X
	STA Sprite_RAM+$00,Y
	STA Sprite_RAM+$04,Y

	LDA Game_Counter
	LSR A
	LSR A
	LSR A
	ROR A
	AND #SPR_VFLIP
	STA <Temp_Var1	 ; Periodically vertically flip

	; Form attribute with sprite palette 1 for left half
	LDA #SPR_PAL1
	ORA <Temp_Var1
	STA Sprite_RAM+$02,Y

	; Right half uses opposite flips
	EOR #(SPR_HFLIP | SPR_VFLIP)
	STA Sprite_RAM+$06,Y

	LDA BrickBust_HEn,X
	LSR A
	LSR A
	LSR A
	TAX	; X = 0 to 3

	LDA Poof_Patterns,X	 ; Get appropriate "poof" pattern
	STA Sprite_RAM+$01,Y	 ; Left
	STA Sprite_RAM+$05,Y	 ; Right

	LDX <CurrentObjectIndexZ	 ; X = restore slot index

PRG007_ADA7:
	RTS		 ; Return

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; CoinPUp_DrawAndUpdate
;
; Draws and updates the coins which have popped out of blocks
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

CoinPUp_Patterns:	.byte $49, $49, $49, $49
CoinPUp_Attributes:	.byte SPR_PAL3, SPR_PAL3, SPR_PAL3, SPR_PAL3

CoinPUps_DrawAndUpdate:
	LDX #$03	 ; X = 3 (all "power up" coin slots)

PRG007_ADB2: 
	STX <CurrentObjectIndexZ	 ; -> slot index backup

	LDA CoinPUp_State,X
	BEQ PRG007_ADBC	 ; If there's no active "powerup coin" here, jump to PRG007_ADBC

	JSR CoinPUp_UpdateAndDraw	 ; Update and draw powerup coin

PRG007_ADBC:
	DEX		 ; X--
	BPL PRG007_ADB2	 ; While X >= 0, loop!

	RTS		 ; Return

CoinPUp_UpdateAndDraw:
	LDA <Player_HaltGameZ		 
	BNE PRG007_ADF0	 ; If gameplay is halted, jump to PRG007_ADF0

	INC CoinPUp_Counter,X	 ; counter++

	; Apply coin's Y velocity
	LDA CoinPUp_Y,X
	ADD CoinPUp_YVel,X
	STA CoinPUp_Y,X

	LDA CoinPUp_Counter,X
	AND #$03
	BNE PRG007_ADE2	 ; 1:4 ticks proceed, otherwise jump to PRG007_ADE2

	INC CoinPUp_YVel,X	 ; coin YVel ++

	LDA CoinPUp_YVel,X
	CMP #$05
	BEQ PRG007_AE28	 ; If coin's Y velocity = 5, jump to PRG007_AE28

PRG007_ADE2:
	LDA CoinPUp_X,X
	SUB Level_ScrollDiffH	; Make relative coin X

	CMP #248
	BGE PRG007_AE4A	 ; If coin X >= 248, jump to PRG007_AE4A (remove coin)

	STA CoinPUp_X,X	 ; Update coin X

PRG007_ADF0:
	LDA <Player_HaltGameZ
	BEQ PRG007_AE02	 ; If gameplay is not halted, jump to PRG007_AE02

	; Move coin Y with vertical scroll
	LDA CoinPUp_Y,X	 
	SUB Level_ScrollDiffV
	STA CoinPUp_Y,X	 

	CMP #197
	BGE PRG007_AE4A	 ; If coin Y >= 197, jump to PRG007_AE4A (remove coin)

PRG007_AE02:
	JSR Object_GetUnusedSprite

	; Set coin Y
	LDA CoinPUp_Y,X
	STA Sprite_RAM+$00,Y

	; Set coin X
	LDA CoinPUp_X,X
	STA Sprite_RAM+$03,Y

	LDA CoinPUp_Counter,X
	LSR A
	LSR A
	AND #$03
	TAX		 ; X = 0 to 3 by coin counter

	; Set pattern
	LDA CoinPUp_Patterns,X
	STA Sprite_RAM+$01,Y

	; Set attribute
	LDA CoinPUp_Attributes,X
	STA Sprite_RAM+$02,Y

	LDX <CurrentObjectIndexZ	; X = power up coin slot index

	RTS		 ; Return

PRG007_AE28:
PRG007_AE4A:

	; Remove coin
	LDA #$00
	STA CoinPUp_State,X

	JSR SpecialObject_FindEmpty
	
	LDA #SOBJ_COINSPARKLE
	STA SpecialObj_ID, Y

	LDA #$0C
	STA SpecialObj_Timer, Y

	LDA CoinPUp_Y,X
	ADD <Vert_Scroll
	STA SpecialObj_Y, Y

	LDA CoinPUp_X,X
	ADD <Horz_Scroll
	STA SpecialObj_X, Y
	RTS		 ; Return


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SpecialObjs_UpdateAndDraw
;
; Updates Special Objects and they draw as they will
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SpecialObjs_UpdateAndDraw:
	LDX #$07	 ; X = 7
PRG007_AF1B:
	STX <CurrentObjectIndexZ ; Store current checked index -> CurrentObjectIndexZ

	JSR SpecialObj_UpdateAndDraw	 ; Does the update and draw routines of Special OBjects

	LDX <CurrentObjectIndexZ
	DEX		 ; X--
	BPL PRG007_AF1B	 ; While X >= 0, loop!

SObj_DoNothing:
PRG007_AF23:
	RTS		 ; Return

SpecialObj_UpdateAndDraw:	

	LDA SpecialObj_ID,X
	JSR DynJump

	; THESE MUST FOLLOW DynJump FOR THE DYNAMIC JUMP TO WORK!!
	.word SObj_DoNothing	; 00: EMPTY / NOT USED (should never get here anyway)
	.word Enemy_Hammer	; 01: Hammer Bro hammer
	.word Enemy_Veggie	; 02: Boomerangs
	.word Enemy_Oil	; 03: 
	.word Enemy_FireBall	; 04: 
	.word SpecialObj_Poof	; 05: 
	.word Enemy_IceBall	; 06: Micro goombas
	.word Enemy_NinjaStar	; 07: Spike/Patooie's spike ball
	.word Enemy_Egg	; 08: Koopaling wand blast
	.word Enemy_OilOoze	; 09: Lost Kuribo shoe
	.word Enemy_BigFireball	; 0A: Rocky's Wrench
	.word Enemy_Cannonball	; 0B: Cannonball
	.word Enemy_LightningBolt	; 0C: Fire bro bouncing fireball
	.word SObj_ExplodeStar	; 0D: Explosion star
	.word Enemy_Flame	; 0E: Bubble
	.word Enemy_ProjSkull; 0F: Lava Lotus fire
	.word Enemy_Frost		; 10: Recovered wand
	.word SObj_CoinOrDebris	; 11: Popped out coin
	.word Enemy_Barrel	; 12: Fire Chomp's fire
	.word SObj_CoinOrDebris	; 13: Brick debris (e.g. from Piledriver Microgoomba)
	.word Enemy_Fireblob	; 14: Blooper kid
	.word Enemy_SpinyEgg	; 15: Laser
	.word SpecialObj_Poof		; 16: Poof
	.word Coin_Sparkle	; 17 
	.word Enemy_Plunger ; 18


SpecialObj_DetectObject:
	STX TempX
	LDX #$09
	JSR Object_DetectObjects
	LDX TempX
	RTS

SpecialObj_DetectPlayer:
	STX TempX
	LDX #$09
	JSR Object_SpecialDetectPlayer
	LDX TempX
	RTS

PUpCoin_Patterns:	.byte $49, $4F, $4D, $4F
PUpCoin_Attributes:	.byte SPR_PAL3, SPR_PAL3 | SPR_HFLIP, SPR_PAL3, SPR_PAL3

PRG007_B058:
	RTS		 ; Return


DebrisPattern:
	.byte $4B, $59, $55

DebrisPalette:
	.byte SPR_PAL3, SPR_PAL1, SPR_PAL1

SObj_CoinOrDebris:
	LDA <Player_HaltGameZ
	BNE PRG007_B11F	 ; If gameplay halted, jump to PRG007_B11F

	INC SpecialObj_Data2,X	 ; Var1++

	JSR SObj_ApplyXYVelsWithGravity	 ; Apply X and Y velocities with gravity

	LDA SpecialObj_ID,X
	CMP #SOBJ_BRICKDEBRIS
	BNE PRG007_B11F	 ; If this is not brick debris, jump to PRG007_B11F

	; Brick debris only...

	LDA SpecialObj_YVel,X
	BMI PRG007_B114	 ; If brick debris is moving upward, jump to PRG007_B114

	CMP #$70
	BGE PRG007_B11F	 ; If brick debris is falling >= $70, jump to PRG007_B11F

PRG007_B114:
	LDA SpecialObj_Data1,X
	BNE PRG007_B11C	 ; If data <> 0, jump to PRG007_B11C (fall slower)

	INC SpecialObj_YVel,X	 ; YVel++

PRG007_B11C:
	INC SpecialObj_YVel,X	 ; YVel++

PRG007_B11F:
	JSR SObj_GetSprRAMOffChkVScreen

	LDA SpecialObj_ID,X
	CMP #SOBJ_BRICKDEBRIS
	BNE PRG007_B169	 ; If this is not brick debris, jump to PRG007_B169

	; Brick debris only...

	LDA SpecialObj_Data1,X
	BEQ PRG007_B153	 ; If data = 0 (full giant world style brick rather than chunks), jump to PRG007_B153

	JSR SObj_SetSpriteXYRelative	 ; Special Object X/Y put to sprite, scroll-relative

	; Brick debris chunk pattern
	LDA SpecialObj_Data3,X
	STA TempA
	TAX
	LDA DebrisPattern, X
	STA Sprite_RAM+$01,Y
	LDX TempA
	LDA DebrisPalette, X
	STA <Temp_Var1
	LDX <CurrentObjectIndexZ
	

	; Temp_Var1 = SPR_PAL3

	; Rotating effect
	LDA Game_Counter
	ASL A
	ASL A
	ASL A
	ASL A
	AND #(SPR_HFLIP | SPR_VFLIP)

	; Set attributes
	ORA <Temp_Var1		 ; OR'd with palette

KeepDrawingDebris:
	STA Sprite_RAM+$02,Y
	RTS		 ; Return

PRG007_B153:
	JSR SObj_Draw16x16	 ; Draw full brick

	; Set petterns
	LDA #$75
	STA Sprite_RAM+$01,Y
	STA Sprite_RAM+$05,Y

	; Set attributes on left sprite
	LDA #SPR_PAL3
	STA Sprite_RAM+$02,Y

	; Set attributes on right sprite
	LDA #(SPR_PAL3 | SPR_HFLIP)
	STA Sprite_RAM+$06,Y

	RTS		 ; Return

PRG007_B169:

	; Popped out coin only

	LDA SpecialObj_YVel,X
	CMP #$20
	BMI PRG007_B17E	 ; If Y Velocity < $20, jump to PRG007_B17E

PRG007_B17E:
	JSR SObj_SetSpriteXYRelative	 ; Special Object X/Y put to sprite, scroll-relative

	; Set coin sprite Y
	LDA Sprite_RAM+$03,Y
	ADD #$04
	STA Sprite_RAM+$03,Y

	LDA SpecialObj_Data2,X
	LSR A
	LSR A
	AND #$03
	TAX		 ; X = 0 to 3

	; Set pattern
	LDA PUpCoin_Patterns,X
	STA Sprite_RAM+$01,Y	

	; Set attributes
	LDA PUpCoin_Attributes,X
	STA Sprite_RAM+$02,Y	

	LDX <CurrentObjectIndexZ	 ; X = special object slot index

	RTS		 ; Return

	; Velocity gets applied at different rates (slower as timer decreases)
ExplodeStar_VelMask:
	.byte $07, $03, $01, $00


SObj_ExplodeStar:
	LDA SpecialObj_Data1,X
	BNE PRG007_B1DD	 ; If star's data <> 0, jump to PRG007_B1DD (RTS)

	LDA SpecialObj_Timer,X
	BEQ PRG007_B1DE	 ; If timer expired, jump to PRG007_B1DE (RTS)

	LSR A
	LSR A
	LSR A
	LSR A
	AND #$03
	TAY		 ; Y = 0 to 3, by timer

	; Apply velocities at lower rates as timer decreases
	LDA <Counter_1
	AND ExplodeStar_VelMask,Y
	BNE PRG007_B1C3

	JSR SObj_AddXVelFrac	 ; Apply X velocity
	JSR SObj_AddYVelFrac	 ; Apply Y velocity

PRG007_B1C3:
	JSR SObj_GetSprRAMOffChkVScreen
	JSR SObj_SetSpriteXYRelative	 ; Special Object X/Y put to sprite, scroll-relative

	; Set Explosion Star pattern
	LDA #$71
	STA Sprite_RAM+$01,Y

	; Apply cycling palette attribute
	LDA Game_Counter
	LSR A
	LSR A
	NOP
	ADD <CurrentObjectIndexZ
	AND #$03	 ; A = 0 to 3 (palette select)
	STA Sprite_RAM+$02,Y

	RTS		 ; Return


PRG007_B1DD:
	RTS		 ; Return

PRG007_B1DE:
	JMP SpecialObj_Remove	 ; Remove special object and don't come back!

EnemyFlame_Frames:
	.byte $97, $99, $93, $95, $8F, $91, $8B, $8D
	.byte $D7, $D9, $D3, $D5, $CF, $D1, $CB, $CD

Flame_FrameTimer = SpecialObj_Data1
Flame_Attributes:
	.byte SPR_PAL1, SPR_PAL1 | SPR_HFLIP

Enemy_Flame:
	LDA <Player_HaltGameZ
	BNE Flame_NoTimer

	LDA SpecialObj_Data2, X
	ADD SpecialObj_Y, X
	STA SpecialObj_Y, X

	DEC SpecialObj_Timer, X

Flame_NoTimer:
	LDA SpecialObj_Timer, X
	BEQ Enemy_FlameDelete

	LSR A
	LSR A
	AND #$06

	TAY

	LDA PatTable_BankSel + 5
	CMP #$36
	BNE Flame_UpperTable

	TYA
	ADD #$08
	TAY

Flame_UpperTable:
	LDA EnemyFlame_Frames, Y
	STA <SpecialObj_Tile

	LDA EnemyFlame_Frames + 1, Y
	STA <SpecialObj_Tile2
	STA <SpecialObj_Attributes
	
	LDA #SPR_PAL1

	LDY SpecialObj_Data2, X
	BMI Flame_SetAttr

	LDA #(SPR_PAL1 | SPR_VFLIP)

Flame_SetAttr:
	STA <SpecialObj_Attributes
	STA <SpecialObj_Attributes2

	LDA SpecialObj_Timer, X
	AND #$01
	STA SpecialObj_XVel, X

	LDA SpecialObj_Timer, X
	AND #$01
	BNE Flame_NoFlip

	JSR SpecialObj_Flip

Flame_NoFlip:	
	JSR SpecialObj_Draw16x16
	RTS

Enemy_FlameDelete:
	JMP SpecialObj_Delete


EnemyFrost_Frames:
	.byte  $B7, $B9, $B3, $B5, $AF, $B1, $AB, $AD
	.byte  $F7, $F9, $F3, $F5, $EF, $F1, $EB, $ED

Frost_FrameTimer = SpecialObj_Data1

Frost_Attributes:
	.byte SPR_PAL1, SPR_PAL1 | SPR_HFLIP

Enemy_Frost:
	LDA <Player_HaltGameZ
	BNE Frost_NoTimer

	LDA SpecialObj_Data2, X
	ADD SpecialObj_Y, X
	STA SpecialObj_Y, X

	DEC SpecialObj_Timer, X

Frost_NoTimer:
	LDA SpecialObj_Timer, X
	BEQ Enemy_FrostDelete

	
	LSR A
	LSR A
	AND #$06

	TAY
	
	LDA PatTable_BankSel + 5
	CMP #$36
	BNE Frost_UpperTable

	TYA
	ADD #$08
	TAY

Frost_UpperTable:
	LDA EnemyFrost_Frames, Y
	STA <SpecialObj_Tile

	LDA EnemyFrost_Frames + 1, Y
	STA <SpecialObj_Tile2
	
	LDA #SPR_PAL2

	LDY SpecialObj_Data2, X
	BMI Frost_SetAttr

	LDA #(SPR_PAL2 | SPR_VFLIP)

Frost_SetAttr:

	STA <SpecialObj_Attributes
	STA <SpecialObj_Attributes2

	LDA SpecialObj_Timer, X
	AND #$01
	STA SpecialObj_XVel, X

	LDA SpecialObj_Timer, X
	AND #$01
	BNE Frost_NoFlip

	JSR SpecialObj_Flip

Frost_NoFlip:	
	JSR SpecialObj_Draw16x16
	RTS

Enemy_FrostDelete:
	JMP SpecialObj_Delete



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SObj_ApplyXYVelsWithGravity
;
; Apply the special object X and Y velocity with gravity
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SObj_ApplyXYVels:
	JSR SObj_AddXVelFrac
	JSR SObj_AddYVelFrac
	RTS

SObj_ApplyXYVelsWithGravity:
	JSR SObj_AddXVelFrac	 ; Apply X velocity

SObj_ApplyYVelWithGravity:	
	JSR SObj_AddYVelFrac	 ; Apply Y velocity

	LDA SpecialObj_YVel,X
	BMI PRG007_B39D	 ; If special object is moving upward, jump to PRG007_B39D

	CMP #$40
	BCS PRG007_B3A3	 ; If special object Y velocity >= $6E, jump to PRG007_B3A3 (RTS)

PRG007_B39D:

	; Apply gravity
	INC SpecialObj_YVel,X
	INC SpecialObj_YVel,X
	INC SpecialObj_YVel,X

PRG007_B3A3:
	RTS		 ; Return

Enemy_Cannonball:
	LDA <Player_HaltGameZ
	BNE Enemy_CannonDraw

	LDA SpecialObj_Stompable, X
	BNE Cannonball_Norm

	JSR SObj_ApplyXYVelsWithGravity
	JMP Enemy_CannonDraw

Cannonball_Norm:
	JSR SObj_ApplyXYVels
	JSR SpecialObj_CalcBounds16x16
	JSR EnemyProj_HitPlayer
	
	JSR SpecialObj_DetectWorld16x16
	JSR CannonBall_TilesInteraction

Enemy_CannonDraw:
	LDA #$AB
	STA <SpecialObj_Tile

	LDA #$AB
	STA <SpecialObj_Tile + 1

	LDA #SPR_PAL3
	STA <SpecialObj_Attributes

	LDA #(SPR_PAL3 | SPR_VFLIP | SPR_HFLIP)
	STA <SpecialObj_Attributes + 1

	JSR SpecialObj_CheckForeground
	JSR SpecialObj_Draw16x16
	RTS


CannonBall_TilesInteraction:
	LDA SpecialObj_Timer, X
	BEQ CannonBall_TilesInteractioNoTime

	DEC SpecialObj_Timer, X
	RTS

CannonBall_TilesInteractioNoTime:
	LDA Tile_LastProp
	CMP #TILE_PROP_SOLID_ALL
	BCS CannonBall_Solid

CannonBall_TilesInteractionRTS:
	RTS

CannonBall_Solid:
	LDA Block_NeedsUpdate
	BNE CannonBall_TilesInteraction1

	LDY #$03

CannonBall_TilesInteraction0:
	LDA Cannon_Tiles, Y
	BEQ Cannon_Empty

	CMP Tile_LastProp
	BEQ CannonBall_TilesInteraction2

Cannon_Empty:
	DEY
	BPL CannonBall_TilesInteraction0

	LDA SpecialObj_XVel, X
	JSR Half_Value
	EOR #$FF
	ADD #$01
	STA SpecialObj_XVel, X

	LDA #$00
	STA SpecialObj_YVel, X
	STA SpecialObj_Stompable, X

	LDA Sound_QPlayer
	ORA #SND_PLAYERBUMP
	STA Sound_QPlayer

CannonBall_TilesInteraction1:
	RTS

Cannon_Tiles:
	.byte (TILE_PROP_SOLID_TOP | TILE_PROP_STONE), (TILE_PROP_SOLID_ALL | TILE_PROP_STONE), (TILE_ITEM_BRICK), (TILE_PROP_SOLID_ALL | TILE_PROP_HARMFUL)

CannonBall_TilesInteraction2:
	LDA Tile_LastValue
	AND #$C0
	ORA #$01
	JSR Object_ChangeBlock

	LDA Tile_DetectionX
	AND #$F0
	STA Debris_X

	LDA Tile_DetectionY
	AND #$F0
	STA Debris_Y
	JMP Common_MakeBricks

Enemy_LightningBolt:
	LDA <Player_HaltGameZ
	BNE Enemy_LightningBoltDraw

	JSR SObj_ApplyXYVels
	JSR SpecialObj_CalcBounds16x16
	JSR EnemyProj_HitPlayer

	JSR PlayerProj_HitEnemies
	BCC Enemey_LightningWorld

	LDA <SpecialObj_ObjectAttributes
	CMP #ATTR_ALLWEAPONPROOF
	BEQ Enemey_LightningWorld

	LDA #$10
	STA Proj_Attack
	JSR SpecialObj_AttackEnemy

Enemey_LightningWorld:
	JSR SpecialObj_DetectWorld16x16

	LDA <Temp_Var16
	CMP #$02
	BCS Enemy_LightngingBoltGrnd

	LDA Tile_LastProp
	CMP #TILE_PROP_SOLID_ALL
	BCC Enemy_LightningBoltDraw

	LDA Tile_LastProp
	CMP #(TILE_PROP_SOLID_ALL | TILE_PROP_SOLID_OBJECTINTERACT)
	BNE Enemy_LightningBoltPoof

	LDA Tile_LastValue
	ADD #$01
	JSR Object_ChangeBlock

	LDA SpecialObj_X, X
	STA Debris_X

	LDA SpecialObj_Y, X
	STA Debris_Y
	JSR Common_MakeBricks

	JMP Enemy_LightningBoltDraw

Enemy_LightngingBoltGrnd:
	
	LDA Tile_LastProp
	CMP #TILE_PROP_SOLID_TOP
	BCS Enemy_LightningBoltDraw

Enemy_LightningBoltPoof:
	JMP SpecialObj_ForcedPoof

LightningBolt_Tiles:
	.byte $AD, $AF, $95, $97

Enemy_LightningBoltDraw:

	LDA SpecialObj_Data1, X
	AND #$02
	TAY

	INC SpecialObj_Data1, X

	LDA LightningBolt_Tiles, Y
	STA <SpecialObj_Tile

	LDA LightningBolt_Tiles + 1, Y
	STA <SpecialObj_Tile + 1

	LDA #SPR_PAL3
	STA <SpecialObj_Attributes
	STA <SpecialObj_Attributes + 1

	JSR SpecialObj_CheckForeground
	JSR SpecialObj_CheckDirection16x16
	JSR SpecialObj_Draw16x16
	RTS

SObj_OffsetYForRaster:
	
	RTS		 ; Return

SObj_SetSpriteXYRelative:
	LDA SpecialObj_Y,X
	SUB Level_VertScroll
	STA Sprite_RAM+$00,Y

	LDA SpecialObj_X,X
	SUB <Horz_Scroll
	STA Sprite_RAM+$03,Y

PRG007_B4EB:
	RTS		 ; Return


	; In the Japanese original, there were other power ups that "flew off"
	; when you lost them, and those are the additional values.  None of
	; them display correctly anymore, however, because:
	;
	; The graphics for the fly-off sprite only exist with small Mario, 
	; meaning when they added the "American" rule of returning to "super"
	; state, it didn't have the suit sprite graphics available!

Egg_HitWall = SpecialObj_Data1

Enemy_Egg:
	LDA <Player_HaltGameZ
	BNE Enemy_EggDraw

	LDA Egg_HitWall, X
	BEQ Egg_Normal

	JSR SObj_ApplyXYVelsWithGravity
	JMP Enemy_EggDraw

Egg_Normal:
	JSR SObj_ApplyXYVels
	JSR SpecialObj_CalcBounds16x16
	JSR SpecialObj_DetectWorld16x16
	
	LDA Tile_LastProp
	CMP #TILE_PROP_SOLID_ALL
	BCC Egg_NotHitWall

	INC Egg_HitWall, X
	
	LDA SpecialObj_XVel, X
	EOR #$FF
	ADD #$01
	JSR Half_Value

	STA SpecialObj_XVel, X

Egg_NotHitWall:
	JSR Enemy_ProjYolk

Enemy_EggDraw:

	LDA #$97
	STA <SpecialObj_Tile

	LDA #$99
	STA <SpecialObj_Tile + 1

	LDA #SPR_PAL1
	STA <SpecialObj_Attributes
	STA <SpecialObj_Attributes + 1

	JSR SpecialObj_CheckForeground
	JSR SpecialObj_CheckDirection16x16

	LDA Egg_HitWall, X
	BEQ Enemey_EggDraw1

	JSR SpecialObj_Flip

Enemey_EggDraw1:
	JSR SpecialObj_Draw16x16
	RTS

OilOoze_Frames:
	.byte $A1, $A3, $A3, $A3

Enemy_OilOoze:
	LDA <Player_HaltGameZ
	BNE Enemy_OilOozeDraw

	LDA SpecialObj_Data2, X
	BNE Oil_Change

	INC SpecialObj_Data1, X

	LDA SpecialObj_Data1, X
	CMP #$08
	BCC Enemy_OilOozeDraw

Oil_Change:
	JSR SpecialObj_CalcBounds16x16
	JSR SpecialObj_DetectWorld16x16

	LDA Block_NeedsUpdate
	BNE Enemy_OilOozeDraw

	LDA Tile_LastValue
	ADD #$01

	JSR Object_ChangeBlock
	
	LDA SpecialObj_Data2, X
	BEQ Oil_DelayDelete

	JMP SpecialObj_Delete

Oil_DelayDelete:
	INC SpecialObj_Data2, X

	LDA SpecialObj_Y, X
	SUB #$10
	STA SpecialObj_Y, X

	LDA SpecialObj_YHi, X
	SBC #$00
	STA SpecialObj_YHi, X
	RTS
	

Enemy_OilOozeDraw:
	LDA SpecialObj_Data1, X
	
	LSR A
	LSR A

	AND #$03
	TAY

	LDA OilOoze_Frames, Y
	STA <SpecialObj_Tile
	STA <SpecialObj_Tile + 1

	LDA #SPR_PAL1
	STA <SpecialObj_Attributes
	STA <SpecialObj_Attributes + 1

	JSR SpecialObj_CheckDirection16x16
	JSR SpecialObj_Draw16x16
	RTS

Enemy_BigFireballAnimate = SpecialObj_Data1
Enemy_BigFireballAttr:
	.byte SPR_PAL1, (SPR_PAL1 | SPR_VFLIP)

Enemy_BigFireball:
	LDA <Player_HaltGameZ
	BNE Enemy_BigFireballDraw

	JSR SObj_ApplyXYVels
	JSR SpecialObj_CalcBounds16x16
	JSR SpecialObj_DetectWorld16x16
	BCS Fireball_NotHitWall
	
	LDA Tile_LastProp
	CMP #TILE_PROP_SOLID_ALL
	BCC Fireball_NotHitWall


	LDA SpecialObj_X, X
	PHA

	LDA SpecialObj_Y, X
	PHA

	JSR SpecialObj_FireTiles
	BCS Fireball_HitIce

	PLA
	PLA
	JMP SpecialObj_ToPoofNoSound

Fireball_HitIce:
	PLA
	STA SpecialObj_Y, X

	PLA
	STA SpecialObj_X, X

	JSR SpecialObject_FindEmpty
	BCC Fireball_NotHitWall

	LDA Tile_DetectionX
	AND #$F0
	STA SpecialObj_X, Y

	LDA Tile_DetectionY
	AND #$F0
	STA SpecialObj_Y, Y

	LDA #PLAYER_POOF
	STA SpecialObj_ID, Y

	LDA #$10
	STA SpecialObj_Timer, Y

	LDA #$00
	STA SpecialObj_Data1, Y
	STA SpecialObj_YVel, Y
	STA SpecialObj_XVel, Y
	
	LDA #SPR_PAL3
	STA SpecialObj_Data3, Y

Fireball_NotHitWall:
	LDA #$01
	STA Proj_Attack

	JSR EnemyProj_HitPlayer
	INC Enemy_BigFireballAnimate, X

Enemy_BigFireballDraw:
	LDA Enemy_BigFireballAnimate, X
	LSR A
	LSR A
	AND #$01
	TAY

	LDA #$A1
	STA <SpecialObj_Tile

	LDA #$A3
	STA <SpecialObj_Tile + 1

	LDA Enemy_BigFireballAttr, Y
	STA <SpecialObj_Attributes
	STA <SpecialObj_Attributes + 1

	JSR SpecialObj_CheckForeground
	JSR SpecialObj_CheckDirection16x16
	JSR SpecialObj_Draw16x16
	RTS


SObj_KuriboShoe:
	JSR SObj_ApplyXYVelsWithGravity	 ; Apply X and Y velocities with gravity

	JSR SObj_GetSprRAMOffChkVScreen

	LDA SpecialObj_Data1,X
	TAX		 ; SpecialObj_Data1 -> 'X' (NOTE: Will always be zero in US version, see notes at LostShoe_Pattern)

	; Set left sprite attribute
	
	STA Sprite_RAM+$02,Y

	CPX #$00
	BEQ PRG007_B54F	 ; For the lost Kuribo's shoe only: Do not mirror sprite, jump to PRG007_B54F

	ORA #SPR_HFLIP	 ; Mirror sprite (NOTE: Used only in Japanese version for the "fly off" super suits!)

PRG007_B54F:
	STA Sprite_RAM+$06,Y	 ; Set attributes on right sprite

	; X *= 2 (two patterns per suit, again generally unused in US version)
	TXA
	ASL A
	TAX

	; Pattern for left fly off sprite

	STA Sprite_RAM+$01,Y

	; Pattern for right fly off sprite
	STA Sprite_RAM+$05,Y

	LDX <CurrentObjectIndexZ	; X = special object slot index

SObj_Draw16x16:
	JSR SObj_SetSpriteXYRelative	 

	; Copy sprite Y into right sprite
	LDA Sprite_RAM+$00,Y
	STA Sprite_RAM+$04,Y

	; Right sprite is X + 8
	LDA Sprite_RAM+$03,Y
	ADD #$08
	STA Sprite_RAM+$07,Y

	RTS		 ; Return


Enemy_NinjaStar:
	LDA <Player_HaltGameZ
	BNE Enemy_NinjaStarDraw

	JSR SObj_ApplyXYVels
	JSR SpecialObj_CalcBounds16x16
	JSR SpecialObj_DetectWorld16x16
	
	LDA #$02
	STA Proj_Attack
	
	JSR EnemyProj_HitPlayer
	BCC Enemy_NinjaStarDraw

Enemy_StarPoof:
	JMP SpecialObj_ForcedPoof

Enemy_NinjaStarDraw:

	LDA #$4D
	STA <SpecialObj_Tile
	STA <SpecialObj_Tile + 1

	LDA #SPR_PAL3
	STA <SpecialObj_Attributes
	STA <SpecialObj_Attributes + 1
	JSR SpecialObj_SetMirrorFlipped
	JSR SpecialObj_CheckForeground
	JSR SpecialObj_Draw16x16
	RTS


SObj_PlayerCollide:
	RTS

SpecialObj_Remove:

	; Remove special object
	LDA #$00
	STA SpecialObj_ID,X

PRG007_B843:
	RTS		 ; Return

PRG007_B844:

	; Player is invincible; destroy the special object!

	; Play "kick" sound
	LDA Sound_QPlayer
	ORA #SND_PLAYERKICK
	STA Sound_QPlayer

PRG007_B84C:
	; Change to a "poof"
	LDA #SOBJ_POOF
	STA SpecialObj_ID,X

	; SpecialObj_Data1 = $1F
	LDA #$1f
	STA SpecialObj_Data1,X

	RTS		 ; Return

Enemy_Veggie:
	LDA <Player_HaltGameZ
	BNE Enemy_VeggieDraw

	JSR SObj_ApplyXYVelsWithGravity
	JSR SpecialObj_CalcBounds16x16
	JSR EnemyProj_HitPlayer

Enemy_VeggieDraw:
	LDA #$B3
	STA <SpecialObj_Tile
	STA <SpecialObj_Tile + 1

	LDA #SPR_PAL2
	STA <SpecialObj_Attributes

	ORA #SPR_HFLIP
	STA <SpecialObj_Attributes + 1
	
	JSR SpecialObj_CheckForeground
	JSR SpecialObj_Draw16x16
	RTS		 ; Return
	
Enemy_Oil:
	LDA <Player_HaltGameZ
	BEQ Enemy_OilNorm

	JMP Enemy_OilDraw

Enemy_OilNorm:
	JSR SObj_ApplyXYVels
	JSR SObj_ApplyXYVels

	JSR SpecialObj_CalcBounds16x16
	JSR Enemy_OilPlayer
	JSR SpecialObj_DetectWorld16x16

	CMP #(TILE_PROP_SOLID_ALL | TILE_PROP_SOLID_OBJECTINTERACT)
	BNE Enemy_OilSolid

	LDA #SOBJ_OILOOZE
	STA SpecialObj_ID, X

	LDA #$00
	STA SpecialObj_Data1, X

	LDA Tile_DetectionX
	STA SpecialObj_X, X

	LDA Tile_DetectionXHi
	STA SpecialObj_XHi, X

	LDA Tile_DetectionY
	STA SpecialObj_Y, X

	LDA Tile_DetectionYHi
	STA SpecialObj_YHi, X
	RTS

Enemy_OilSolid:
	CMP #TILE_PROP_SOLID_ALL
	BCS Enemy_OilSplash

Enemy_NotInteract:
	LDA SpecialObj_YVel, X
	BMI Enemy_OilDraw

	LDA Tile_LastProp
	CMP #TILE_PROP_SOLID_TOP
	BCS Enemy_OilSplash

Enemy_OilDraw:
	LDA #$4F
	STA <SpecialObj_Tile
	STA <SpecialObj_Tile + 1

	LDA #SPR_PAL2
	STA <SpecialObj_Attributes
	STA <SpecialObj_Attributes + 1

	JSR SpecialObj_SetMirrorFlipped
	JSR SpecialObj_CheckForeground
	JSR SpecialObj_Draw16x16
	RTS

Enemy_OilSplash:

	LDA Tile_DetectionY
	SUB #$10
	STA Tile_DetectionY

	LDA Tile_DetectionYHi
	SBC #$00
	STA Tile_DetectionYHi
	
	LDY #$00
	LDA SpecialObj_YVel, X
	BPL Enemy_OilMakeSplash

	INY

Enemy_OilMakeSplash:
	LDA #$01
	STA Splash_IsOil
	JSR Object_WaterSplashNorm
	
	JMP SpecialObj_Delete
	
Enemy_FireBall:
	LDA <Player_HaltGameZ
	BNE Enemy_FireBall5

	LDA SpecialObj_Data3, X
	BNE Enemy_FireBallNoGravity

	LDA SpecialObj_Data1, X
	BNE Enemy_FireBallNoGravity

	JSR SObj_ApplyXYVelsWithGravity
	INC SpecialObj_YVel, X
	INC SpecialObj_YVel, X
	JMP Enemy_FireBallCalcBounds

Enemy_FireBallNoGravity:
	JSR SObj_ApplyXYVels

Enemy_FireBallCalcBounds:
	JSR SpecialObj_CalcBounds8x16

	LDA #$01
	STA Proj_Attack
	JSR EnemyProj_HitPlayer

Enemy_FireBallTiles:
	JSR SpecialObj_DetectWorld8x8
	JSR SpecialObj_FireTiles
	BCC Enemy_FireBallNoIce

	JMP SpecialObj_ToPoofNoSound

Enemy_FireBallNoIce:
	LDA SpecialObj_Data3, X
	BNE Enemy_FireBall5

	LDA SpecialObj_YVel, X
	BPL Enemy_FireBall1

	LDA Tile_LastProp
	CMP #TILE_PROP_SOLID_ALL
	BCC Enemy_FireBall4
	BCS Enemy_FireBall2

Enemy_FireBall1:
	LDA Tile_LastProp
	CMP #TILE_PROP_SOLID_TOP
	BCC Enemy_FireBall4

Enemy_FireBall2:
	INC SpecialObj_Data2, X
	LDA SpecialObj_Data2, X
	CMP #$02
	BNE Enemy_FireBall3

	LDA SpecialObj_X, X
	SUB #$08
	STA SpecialObj_X, X

	JMP SpecialObj_ToPoof

Enemy_FireBall3:
	LDA SpecialObj_Data1, X
	BNE Enemy_FireBall5

	LDA SpecialObj_YVel, X
	BMI Enemy_FireBall5

	LDA #-$2C
	STA SpecialObj_YVel, X
	BNE Enemy_FireBall5

Enemy_FireBall4:
	LDA #$00
	STA SpecialObj_Data2, X

Enemy_FireBall5:
	LDA #$65
	STA <SpecialObj_Tile

	LDA #SPR_PAL1
	STA <SpecialObj_Attributes
	JSR SpecialObj_CheckForeground
	JSR SpecialObj_CheckDirection
	JSR SpecialObj_Draw8x16
	RTS


Enemy_IceBall:
	LDA <Player_HaltGameZ
	BNE Enemy_IceBall5

	LDA SpecialObj_Data3, X
	BNE Enemy_IceBallCalcBounds

	LDA SpecialObj_Data1, X
	BNE Enemy_IceBallNoGravity

	JSR SObj_ApplyXYVelsWithGravity
	INC SpecialObj_YVel, X
	INC SpecialObj_YVel, X
	JMP Enemy_IceBallCalcBounds

Enemy_IceBallNoGravity:
	JSR SObj_ApplyXYVels

Enemy_IceBallCalcBounds:
	JSR SpecialObj_CalcBounds8x16
	
	LDA #$01
	STA Proj_Attack

	JSR EnemeyProj_Enemy_FreezePlayer

Enemy_IceBallTiles:
	JSR SpecialObj_DetectWorld8x8
	JSR SpecialObj_IceTiles

	LDA SpecialObj_YVel, X
	BPL Enemy_IceBall1

	LDA SpecialObj_Data3, X
	BNE Enemy_IceBall5

	LDA Tile_LastProp
	CMP #TILE_PROP_SOLID_ALL
	BCC Enemy_IceBall4
	BCS Enemy_IceBall2

Enemy_IceBall1:
	LDA Tile_LastProp
	CMP #TILE_PROP_SOLID_TOP
	BCC Enemy_IceBall4

Enemy_IceBall2:
	INC SpecialObj_Data2, X
	LDA SpecialObj_Data2, X
	CMP #$02
	BNE Enemy_IceBall3

	LDA SpecialObj_X, X
	SUB #$08
	STA SpecialObj_X, X

	JMP SpecialObj_ToPoof

Enemy_IceBall3:
	LDA SpecialObj_Data1, X
	BNE Enemy_IceBall5

	LDA SpecialObj_YVel, X
	BMI Enemy_IceBall5

	LDA #-$50
	STA SpecialObj_YVel, X
	BNE Enemy_IceBall5

Enemy_IceBall4:
	LDA #$00
	STA SpecialObj_Data2, X

Enemy_IceBall5:
	LDA #$59
	STA <SpecialObj_Tile

	LDA #SPR_PAL2
	STA <SpecialObj_Attributes

	JSR SpecialObj_CheckForeground
	JSR SpecialObj_CheckDirection
	JSR SpecialObj_Draw8x16
	RTS

Poof_Patterns:	.byte $47, $45, $43, $41
				.byte $41, $43, $45, $47

Enemy_Hammer:
	LDA <Player_HaltGameZ
	BNE Enemy_HammerDraw

	JSR SObj_ApplyXYVelsWithGravity
	JSR SpecialObj_CalcBounds16x16

	LDA #$02
	STA Proj_Attack
	JSR EnemyProj_HitPlayer
	
	JSR SpecialObj_DetectWorld16x16
	JSR Player_HammerTilesInteraction

Enemy_HammerDraw:
	LDA #$6D
	STA <SpecialObj_Tile

	LDA #$6F
	STA <SpecialObj_Tile + 1

	LDA #SPR_PAL3
	STA <SpecialObj_Attributes
	STA <SpecialObj_Attributes + 1
	JSR SpecialObj_CheckForeground
	JSR SpecialObj_CheckDirection16x16
	JSR SpecialObj_Draw16x16
	RTS


Enemy_HammerTilesInteraction2:
	LDA Tile_LastValue
	AND #$C0
	ORA #$01
	JSR Object_ChangeBlock
	LDA Tile_DetectionX
	AND #$F0
	STA SpecialObj_X, X

	LDA Tile_DetectionY
	AND #$F0
	STA SpecialObj_Y, X

	LDA SpecialObj_X, X
	STA Debris_X

	LDA SpecialObj_Y, X
	STA Debris_Y
	JSR Common_MakeBricks

	JMP SpecialObj_ToPoofNoSound

Enemy_FireblobTiles:
	.byte $9D, $9F, $9D, $9F

Enemy_FireblobAttr:
	.byte SPR_PAL1, SPR_PAL1, SPR_PAL1 | SPR_HFLIP, SPR_PAL1 | SPR_HFLIP	

Enemy_FireblobFrames = SpecialObj_Data1

Enemy_Fireblob:
	LDA <Player_HaltGameZ
	BEQ FireBlob_Norm
	JMP Enemy_FireblobDraw

FireBlob_Norm:
	LDA SpecialObj_Timer, X
	BEQ Fireblob_Normal

	DEC SpecialObj_Timer, X

	JSR SpecialObj_CalcBounds8x16
	JSR EnemyProj_HitPlayer

	LDA SpecialObj_HurtEnemies, X
	BMI Fireblob_Poof

	LDA SpecialObj_Timer, X
	CMP #$01
	BNE Enemy_FireBlobAnimate

Fireblob_Poof:
	LDA SpecialObj_X, X
	SUB #$04
	STA SpecialObj_X, X

	JMP SpecialObj_ForcedPoof

Fireblob_Normal:	

	JSR SObj_ApplyXYVelsWithGravity
	JSR SpecialObj_CalcBounds8x16

	LDA #$01
	STA Proj_Attack

	JSR EnemyProj_HitPlayer
	JSR SpecialObj_DetectWorld8x8
	JSR SpecialObj_FireTiles
	BCC Enemy_FireblobNoIce

	JMP SpecialObj_ToPoofNoSound

Enemy_FireblobNoIce:
	LDA SpecialObj_YVel, X
	BPL Enemy_FireblobDetectTops

	LDA Tile_LastProp
	CMP #TILE_PROP_SOLID_ALL
	BCC Enemy_FireBlobAnimate
	BCS Enemy_FireblobHitSolid

Enemy_FireblobDetectTops:
	LDA Tile_LastProp
	CMP #TILE_PROP_SOLID_TOP
	BCC Enemy_FireBlobAnimate

Enemy_FireblobHitSolid:
	LDA #$80
	STA SpecialObj_Timer, X

	LDA SpecialObj_YVel, X
	BPL Enemy_FireBlobOffset

	LDA SpecialObj_Y, X
	EOR #$FF
	SUB #$01
	AND #$0F
	ADD SpecialObj_Y, X
	STA SpecialObj_Y, X

	LDA SpecialObj_YHi, X
	ADC #$00
	STA SpecialObj_YHi, X
	JMP Enemy_FireBlobAnimate

Enemy_FireBlobOffset:
	LDA SpecialObj_Y, X
	AND #$0F
	STA <Temp_Var1
	
	LDA SpecialObj_Y, X
	SUB <Temp_Var1
	STA SpecialObj_Y, X

	LDA SpecialObj_YHi, X
	SBC #$00
	STA SpecialObj_YHi, X
	
Enemy_FireBlobAnimate:
	INC Enemy_FireblobFrames, X

Enemy_FireblobDraw:
	LDA Enemy_FireblobFrames, X
	LSR A
	LSR A
	AND #$03
	TAY

	LDA Enemy_FireblobTiles, Y
	STA <SpecialObj_Tile

	LDA Enemy_FireblobAttr, Y
	STA <SpecialObj_Attributes

	LDA SpecialObj_YVel, X
	BPL Enemy_FireblobDown

	LDA <SpecialObj_Attributes
	ORA #SPR_VFLIP
	STA <SpecialObj_Attributes

Enemy_FireblobDown:	

	JSR SpecialObj_CheckForeground
	JSR SpecialObj_Draw8x16
	RTS

	
Enemy_Barrel:
	LDA <Player_HaltGameZ
	BEQ Enemy_BarrelNorm
	JMP Enemy_BarrelDraw

Enemy_BarrelNorm:
	LDA SpecialObj_Data2, X
	BEQ Barrel_NormMove

	JSR SObj_ApplyYVelWithGravity
	JMP Barrel_ExtraWeight

Barrel_NormMove:	
	JSR SObj_ApplyXYVelsWithGravity

Barrel_ExtraWeight:	
	INC SpecialObj_YVel, X
	INC SpecialObj_YVel, X
	
	JSR SpecialObj_CalcBounds16x16

	LDA #$01
	STA Proj_Attack
	JSR EnemyProj_HitPlayer

Enemy_BarrelTiles:
	JSR SpecialObj_DetectWorld16x16Side

	LDA Tile_LastProp
	CMP #TILE_PROP_SOLID_ALL
	BCC Enemy_BarrelGround

	INC SpecialObj_Data1, X
	LDA SpecialObj_Data1, X
	CMP #$02
	BCC Enemy_BarrelGround

	LDA SpecialObj_X, X
	STA <Debris_X

	LDA SpecialObj_Y, X
	STA <Debris_Y

	JSR Common_MakeBricks

	LDA #BARREL_DEBRIS
	STA BrickBust_Tile, Y

	LDA #$00
	STA SpecialObj_ID, X
	RTS

Enemy_BarrelGround:
	JSR SpecialObj_DetectWorld16x16Bottom

	LDA #$00
	STA SpecialObj_Data2, X

	LDA Tile_LastProp
	CMP #(TILE_PROP_SOLID_TOP | TILE_PROP_CLIMBABLE)
	BEQ Barrel_Ladder

	CMP #TILE_PROP_CLIMBABLE
	BNE Enemy_CheckGround

Barrel_Ladder:
	LDA SpecialObj_X, X
	AND #$0F
	BNE Barrel_HitGround

	LDA #$10
	STA SpecialObj_YVel, X

	LDA #$01
	STA SpecialObj_Data2, X

Enemy_CheckGround:	
	CMP #TILE_PROP_SOLID_TOP
	BCC Enemy_BarrelDraw

Barrel_HitGround:
	LDA SpecialObj_Y, X
	ADD #$08
	AND #$F0
	STA SpecialObj_Y, X

	LDA SpecialObj_YHi, X
	ADC #$00
	STA SpecialObj_YHi, X

	LDA #$00
	STA SpecialObj_Data2, X
	STA SpecialObj_YVel, X

Enemy_BarrelDraw:
	LDA SpecialObj_Data2, X
	ASL A
	TAY

	LDA Barrel_Tiles, Y
	STA <SpecialObj_Tile
	
	LDA Barrel_Tiles + 1, Y
	STA <SpecialObj_Tile + 1

	LDA Barrel_Attrs, Y
	STA <SpecialObj_Attributes

	LDA Barrel_Attrs + 1, Y
	STA <SpecialObj_Attributes + 1
	
	JSR SpecialObj_CheckForeground
	JSR SpecialObj_CheckDirection16x16
	JSR SpecialObj_Draw16x16
	RTS

Barrel_Tiles:
	.byte $57, $5B
	.byte $71, $71

Barrel_Attrs:
	.byte SPR_PAL3, SPR_PAL3
	.byte SPR_PAL3, (SPR_PAL3 | SPR_HFLIP)	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SObj_GetSprRAMOffChkVScreen
;
; Gets an appropriate sprite RAM offset and also returns zero if
; the object is on the same vertical screen as the Player
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SObj_SprRAMBase:
	.byte $08, $10, $00, $08, $10, $04, $0C, $14, $0C

SObj_GetSprRAMOffChkVScreen:
	LDY #$07	 ; Y = 7

	CPX #$09
	BEQ PRG007_BAED	 ; If special object slot = 9, jump to PRG007_BAED

	CPX #$03
	BLT PRG007_BAED	 ; If special object slot < 3, jump to PRG007_BAED

	LDY #$08	 ; Y = 8

PRG007_BAED:
	LDA SObj_SprRAMBase-1,X
	ADD Object_SpriteRAMOffset-1,Y
	TAY		 ; Y = Sprite RAM offset

	CPX #$00
	BNE PRG007_BB1A	 ; If special object slot 0, jump to PRG007_BB1A

	JSR Object_GetUnusedSprite
	BNE PRG007_BB1A	 ; If sprite available, jump to PRG007_BB1A

	LDA SpecialObj_ID,X

	CMP #SOBJ_FIREBALL
	BEQ PRG007_BB1A

	CMP #SOBJ_ICEBALL
	BEQ PRG007_BB1A

	CMP #$00
	BEQ PRG007_BB1A

	LDA RandomN,X
	AND #$03	; 0 to 3
	ASL A	
	ASL A	
	ASL A		; Multiply by 8
	TAY		; Y = 0, 8, 16, 24

PRG007_BB1A:
	LDA <Temp_Var14	; Return the relative Y Hi value

	RTS		 ; Return

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SObj_AddXVelFrac
;
; Adds the 4.4FP X velocity to X of special object
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SObj_AddXVelFrac:
	LDA SpecialObj_XVel,X		; Get Y Velocity
	ASL A
	ASL A
	ASL A
	ASL A		 		; Fractional part shifted up
	ADD SpecialObj_XVelFrac,X
	STA SpecialObj_XVelFrac,X	; Add to special object's X vel fractional accumulator

	PHP		 ; Save CPU status

	; Basically amounts to an arithmetic shift right 4 places
	LDA SpecialObj_XVel,X	; Get Y Velocity
	LSR A
	LSR A
	LSR A
	LSR A		 	; Whole part shifted down (integer)
	CMP #%00001000	; Check the sign bit
	LDY #$00	 ; Y = $00 (16-bit sign extension)
	BLT SObj_AddXVelFrac1	 ; If the value was not negatively signed, jump to PRG007_BB60
	ORA #%11110000	; Otherwise, apply a sign extension

	DEY		 ; Y = $FF (16-bit sign extension)

SObj_AddXVelFrac1:
	PLP		 ; Restore CPU status

	ADC SpecialObj_X,X
	STA SpecialObj_X,X ; Add with carry

	TYA		 ; Sign extension

	; Apply sign extension
	ADC SpecialObj_XHi,X
	STA SpecialObj_XHi,X
	RTS		 ; Return


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SObj_AddYVelFrac
;
; Adds the 4.4FP Y velocity to Y of special object
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SObj_AddYVelFrac:
	LDA SpecialObj_YVel,X		; Get Y Velocity
	ASL A
	ASL A
	ASL A
	ASL A		 		; Fractional part shifted up
	ADD SpecialObj_YVelFrac,X
	STA SpecialObj_YVelFrac,X	; Add to special object's X vel fractional accumulator

	PHP		 ; Save CPU status

	; Basically amounts to an arithmetic shift right 4 places
	LDA SpecialObj_YVel,X	; Get Y Velocity
	LSR A
	LSR A
	LSR A
	LSR A		 	; Whole part shifted down (integer)
	CMP #%00001000	; Check the sign bit
	LDY #$00	 ; Y = $00 (16-bit sign extension)
	BLT PRG007_BB60	 ; If the value was not negatively signed, jump to PRG007_BB60
	ORA #%11110000	; Otherwise, apply a sign extension

	DEY		 ; Y = $FF (16-bit sign extension)

PRG007_BB60:
	PLP		 ; Restore CPU status

	ADC SpecialObj_Y,X
	STA SpecialObj_Y,X ; Add with carry

	TYA		 ; Sign extension

	; Apply sign extension
	ADC SpecialObj_YHi,X
	STA SpecialObj_YHi,X

	RTS		 ; Return


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ObjectGenerator_UpdateAndDraw
;
; Updates and draws the Cannon Fires
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ObjectGenerator_UpdateAndDraw:
	LDA <Player_HaltGameZ		 
	BNE PRG007_BB80	 ; If gameplay halted or end level card grabbed, jump to PRG007_BB80 (RTS)

	LDX #$07	 ; X = 7
PRG007_BB78:
	STX <CurrentObjectIndexZ	 ; Update index backup

	JSR ObjectGenerator_DrawAndUpdate	; Draw and Update Cannon Fire

	LDX <CurrentObjectIndexZ
	DEX		 ; X--
	BPL PRG007_BB78	; While X >= 0, loop!

PRG007_BB80:
	RTS		 ; Return


ObjectGenerator_DrawAndUpdate:
	LDA ObjectGenerator_ID,X
	BEQ PRG007_BB80	 ; If this slot is unused/empty, jump to PRG007_BB80 (RTS)

	; Update ObjectGenerator_Timer
	LDA ObjectGenerator_Timer,X
	BEQ PRG007_BB8F	 ; If ObjectGenerator_Timer = 0, jump to ObjectGenerator_Timer

	DEC ObjectGenerator_Timer,X	 ; ObjectGenerator_Timer--
	BNE PRG007_BB8F

	LDA EventType
	CMP #EVENT_LASER_TRAPS
	BNE PRG007_BB8F

	LDA TrapSet
	BNE PRG007_BB8F

	INC ObjectGenerator_Timer,X

PRG007_BB8F:

	JSR DetermineGeneratorVisibility
	JSR ObjectGenerator_DeleteOffScreen

PRG007_BB97:
	LDA ObjectGenerator_ID, X
	JSR DynJump

	; THESE MUST FOLLOW DynJump FOR THE DYNAMIC JUMP TO WORK!!
	.word PRG007_BB80	;
	.word ObjectGen_BulletBill	; 
	.word ObjectGen_BulletBill	; 
	.word ObjectGen_Cannonball 	; 
	.word ObjectGen_Platform	;
	.word ObjectGen_Enemy ; 
	.word ObjectGen_ShellCannon	; #C1
	.word ObjectGen_Goombas	; #C2
	.word ObjectGen_Troopa ; 	#C3
	.word ObjectGen_Cannonball	; 
	.word ObjectGen_Cannonball	; 
	.word ObjectGen_Cannonball	; 
	.word ObjectGen_Cannonball	; 
	.word ObjectGen_Cannonball	; 
	.word ObjectGen_Cannonball	; 
	.word ObjectGen_Cannonball	; 
	.word ObjectGen_Cannonball 	; 
	.word ObjectGen_Cannonball	; 
	.word ObjectGen_Cannonball	; 
	.word ObjectGen_Bobombs	; #CE
	.word ObjectGen_Cannonball	; 
	.word ObjectGen_Cannonball	; 

ObjectGenerator_DeleteOffScreen:
	LDA ObjectGenerator_X, X
	SUB <Player_X
	STA <Temp_Var1

	LDA ObjectGenerator_XHi, X
	SBC <Player_XHi
	BMI Generator_RightDelete

	LDA <Temp_Var1
	CMP #$F0
	BCS Generator_Delete
	RTS

Generator_RightDelete:
	LDA <Temp_Var1
	CMP #$10
	BCS ObjectGenerator_DeleteRTS

Generator_Delete:
	LDA #$00
	STA ObjectGenerator_ID, X

	LDY ObjectGenerator_Parent, X

	LDA Level_ObjectsSpawned,Y
	AND #$7F
	STA Level_ObjectsSpawned,Y
	PLA
	PLA

ObjectGenerator_DeleteRTS:
	RTS

CannonBall_XOffset:
	.byte $F4, $F0, $F8, $00, $0C, $10, $0C, $00
	.byte $FF, $FF, $FF, $00, $00, $00, $00, $00

CannonBall_YOffset:
	.byte $F8, $00, $08, $08, $08, $00, $F8, $F8
	.byte $FF, $00, $00, $00, $00, $00, $FF, $FF

CannonBall_XVel:
	.byte $F0, $E0, $F0, $00, $10, $20, $10, $00

CannonBall_YVel:
	.byte $F0, $00, $10, $20, $10, $00, $F0, $E0

CannonBall_PoofX:
	.byte $F8, $F0, $F8, $00, $08, $10, $08, $00

CannonBall_PoofY:
	.byte $F8, $00, $0C, $08, $08, $00, $F8, $F8

ObjectGen_Cannonball:
	LDA #$4E
	STA PatTable_BankSel + 4

	LDA #$00
	STA LastPatTab_Sel

	LDA ObjectGenerator_Timer, X
	BEQ ObjectGen_Cannonball2
	RTS

ObjectGen_Cannonball2:
	LDA ObjectGenerator_Visibility, X
	CMP #(GENERATOR_VVISIBLE | GENERATOR_HVISIBLE)
	BEQ Cannonball_Make
	RTS

Cannonball_Make:

	LDA ObjectGenerator_Var, X
	AND #$03
	CMP #$03
	BNE ObjectGen_CannonballCont
	JMP ObjectGen_CannonballReset

ObjectGen_CannonballCont:
	JSR Object_PrepProjectile
	
	LDA ObjectGenerator_X, X
	STA <Temp_Var1

	LDA ObjectGenerator_XHi, X
	STA <Temp_Var2

	LDA ObjectGenerator_Y, X
	STA <Temp_Var3

	LDA ObjectGenerator_YHi, X
	STA <Temp_Var4

	LDA ObjectGenerator_Property, X
	TAX

	LDA <Temp_Var1
	ADD CannonBall_XOffset, X
	STA SpecialObj_X, Y
	STA Point_X

	LDA <Temp_Var2
	ADC CannonBall_XOffset + 8, X
	STA SpecialObj_XHi, Y
	STA Point_XHi

	LDA <Temp_Var3
	ADD CannonBall_YOffset, X
	STA SpecialObj_Y, Y
	STA Point_Y

	LDA <Temp_Var4
	ADC CannonBall_YOffset + 8, X
	STA SpecialObj_YHi, Y
	STA Point_YHi
	
	JSR CheckPoint_OffScreen
	BCC ObjectGen_CannonballReset

	LDA #SOBJ_CANNONBALL
	STA SpecialObj_ID,Y
	
	LDA CannonBall_XVel, X
	STA SpecialObj_XVel, Y

	LDA CannonBall_YVel, X
	STA SpecialObj_YVel, Y

	LDA #$01
	STA SpecialObj_Stompable, Y

	LDA #$08
	STA SpecialObj_Timer, Y

	LDA Sound_QLevel1
	ORA #SND_LEVELBABOOM
	STA Sound_QLevel1

	LDA <Temp_Var1
	ADD CannonBall_PoofX, X
	STA <Poof_X

	LDA <Temp_Var3
	ADD CannonBall_PoofY, X
	STA <Poof_Y

	LDA <Temp_Var4
	ADC #$00
	STA <Poof_YHi

	JSR Common_MakePoof

ObjectGen_CannonballReset:
	LDX <CurrentObjectIndexZ

	LDA #$60
	STA ObjectGenerator_Timer, X

	INC ObjectGenerator_Var, X

ObjectGen_CannonballRTS:
	RTS		 ; Return

BobOmbXOffset:		.byte $00, $00, $08, $08

BobOmbYOffset:		.byte $F8, $F8, $00, $00
					.byte $FF, $FF, $00, $00

ObjectGen_Bobombs:
	LDA ObjectGenerator_Timer, X
	BNE BobOmbGeneratorRTS0

	LDA ObjectGenerator_Visibility, X
	AND #(GENERATOR_HVISIBLE)
	BNE BobOmbGen_Make

BobOmbGeneratorRTS0:
	RTS

BobOmbGen_Make:
	LDA #OBJ_BOBOMB
	STA <Object_Check

	JSR CheckObjectsOfType

	LDA <Num_Objects
	CMP #$02
	BCS BobOmbGeneratorRTS

	JSR PrepareNewObjectOrAbort

	LDY <CurrentObjectIndexZ	

	LDA #OBJ_BOBOMB
	STA Objects_ID,X

	LDA #$28
	STA Objects_Timer, X
	STA Objects_NoExp, X

	LDA ObjectGenerator_Property, Y
	AND #$03
	ADD #$01
	STA BobOmb_Action, X

	LDA #SPR_PAL1
	STA Objects_SpriteAttributes, X

	LDA ObjectGenerator_Property, Y
	AND #$03
	TAY
	LDA BobOmbXOffset,Y
	STA <Temp_Var1

	LDA BobOmbYOffset,Y
	STA <Temp_Var2

	LDA BobOmbYOffset + 4,Y
	STA <Temp_Var3

	LDY <CurrentObjectIndexZ	

	LDA #BOUND16x16
	STA Objects_BoundBox, X
	
	LDA ObjectGenerator_Y,Y
	ADD <Temp_Var2
	STA <Objects_YZ,X

	LDA ObjectGenerator_YHi,Y
	ADC <Temp_Var3
	STA <Objects_YHiZ,X

	LDA ObjectGenerator_X,Y
	ADD <Temp_Var1
	STA <Objects_XZ,X

	LDA ObjectGenerator_XHi,Y
	STA <Objects_XHiZ,X

	JSR Object_CalcBoundBox
	JSR Object_FacePlayer

	LDY <CurrentObjectIndexZ

	LDA ObjectGenerator_Property, Y
	AND #$04
	LSR A
	LSR A
	STA Objects_Property, X

	LDA #$C0
	STA ObjectGenerator_Timer, Y
	LDY <CurrentObjectIndexZ	 ; X = Cannon Fire slot index

BobOmbGeneratorRTS:
	RTS


GoombaXOffset:		.byte $00, $00, $08, $08
GoombaYOffset:		.byte $F8, $F8, $00, $00
					.byte $FF, $FF, $00, $00

ObjectGen_Goombas:
	LDA ObjectGenerator_Timer, X
	BNE ObjectGen_GoombasRTS

	LDA ObjectGenerator_Visibility, X
	BNE GoombaGen_Make

ObjectGen_GoombasRTS:	
	RTS

GoombaGen_Make:
	LDA #OBJ_GOOMBA
	STA <Object_Check

	JSR CheckObjectsOfType

	LDA <Num_Objects
	CMP #$03
	BCS GoombaGeneratorRTS

	JSR PrepareNewObjectOrAbort

	LDY <CurrentObjectIndexZ	

	LDA #OBJ_GOOMBA
	STA Objects_ID,X

	LDA #$28
	STA Objects_Timer, X
	STA Objects_NoExp, X

	LDA ObjectGenerator_Property, Y
	AND #$03
	ADD #$01
	STA Goomba_Action, X

	LDA #SPR_PAL3
	STA Objects_SpriteAttributes, X

	LDA ObjectGenerator_Property, Y
	AND #$03
	TAY
	LDA GoombaXOffset,Y
	STA <Temp_Var1

	LDA GoombaYOffset,Y
	STA <Temp_Var2

	LDA GoombaYOffset + 4, Y
	STA <Temp_Var3

	LDY <CurrentObjectIndexZ	
	
	LDA ObjectGenerator_Y,Y
	ADD <Temp_Var2
	STA <Objects_YZ,X

	LDA ObjectGenerator_YHi,Y
	ADC <Temp_Var3
	STA <Objects_YHiZ,X

	LDA ObjectGenerator_X,Y
	ADD <Temp_Var1
	STA <Objects_XZ,X

	LDA ObjectGenerator_XHi,Y
	STA <Objects_XHiZ,X

	JSR Object_CalcBoundBox
	JSR Object_FacePlayer

	LDA ObjectGenerator_Property, Y
	AND #$04
	LSR A
	LSR A
	STA Objects_Property, X

	LDY <CurrentObjectIndexZ	 ; X = Cannon Fire slot index

	LDA #$C0
	STA ObjectGenerator_Timer, Y

GoombaGeneratorRTS:
	RTS

TroopaXOffset:		.byte $00, $00, $08, $08, $00, $00, $08, $08
TroopaYOffset:		.byte $FC, $FC, $00, $00, $FC, $FC, $00, $00
					.byte $FF, $FF, $00, $00, $FF, $FF, $00, $00

TroopaLimit:
	.byte $03, $03, $03, $03, $01, $01, $01, $01					

ObjectGen_Troopa:	
	
	LDA ObjectGenerator_Timer, X
	BNE ObjectGen_TroopaRTS

	LDA ObjectGenerator_Visibility, X
	BNE TroopaGen_Make

ObjectGen_TroopaRTS:
	RTS

TroopaGen_Make:
	LDA ObjectGenerator_Property, X
	CMP #$04
	BCC Generator_MakeTroopa

	LDA #OBJ_GREENTROOPA
	STA <Object_Check

	JSR CheckObjectsOfType

	LDY <CurrentObjectIndexZ
	LDA <Num_Objects
	CMP TroopaLimit, Y
	BCS TroopaGeneratorRTS

Generator_MakeTroopa:
	JSR PrepareNewObjectOrAbort

	LDY <CurrentObjectIndexZ	

	LDA #OBJ_GREENTROOPA
	STA Objects_ID,X

	LDA #$28
	STA Objects_Timer, X
	STA Objects_NoExp, X

	LDA ObjectGenerator_Property, Y
	AND #$03
	ADD #$01
	STA Troopa_Action, X

	LDA #SPR_PAL3
	STA Objects_SpriteAttributes, X

	LDA ObjectGenerator_Property, Y
	AND #$03
	TAY
	LDA TroopaXOffset,Y
	STA <Temp_Var1

	LDA TroopaYOffset,Y
	STA <Temp_Var2

	LDA TroopaYOffset + 8, Y
	STA <Temp_Var3

	LDY <CurrentObjectIndexZ	
	
	LDA ObjectGenerator_Y,Y
	ADD <Temp_Var2
	STA <Objects_YZ,X

	LDA ObjectGenerator_YHi,Y
	ADC <Temp_Var3
	STA <Objects_YHiZ,X

	LDA ObjectGenerator_X,Y
	ADD <Temp_Var1
	STA <Objects_XZ,X

	LDA ObjectGenerator_XHi,Y
	STA <Objects_XHiZ,X

	JSR Object_CalcBoundBox
	JSR Object_FacePlayer

	LDA ObjectGenerator_Property, Y
	AND #$04
	LSR A
	LSR A
	STA Objects_Property, X

	LDY <CurrentObjectIndexZ	 ; X = Cannon Fire slot index

	LDA #$C0
	STA ObjectGenerator_Timer, Y

TroopaGeneratorRTS:
	RTS	

Goomb_XVelocity:	.byte $E0, $20, $E0, $20
Goomb_YVelocity:    .byte $C0, $C0, $C0, $C0

CanonPoofXOffset:
	.byte $FA, $06, $FA, $F6

EnemyCannonType:
	.byte OBJ_GOOMBA, OBJ_GOOMBA, OBJ_JUMPINGCHEEP,  OBJ_JUMPINGCHEEP

EnemyCannon_XOffset:
	.byte $F8, $08, $F8, $08

EnemyCannonDirection:
	.byte $00, SPR_HFLIP, $00, SPR_HFLIP

EnemyCannonColor:
	.byte SPR_PAL3, SPR_PAL3, SPR_PAL1, SPR_PAL1

ObjectGen_Enemy:
	
	LDA ObjectGenerator_Timer,X
	BNE GenEnemy_RTS	 ; If timer not expired, jump to PRG007_BD7A (RTS)

	LDA ObjectGenerator_Visibility, X
	AND #GENERATOR_HVISIBLE
	BNE GenEnemy_Make
	RTS

GenEnemy_Make:
	LDA ObjectGenerator_Property, X
	TAY

	
	LDA EnemyCannonType, Y
	STA <Object_Check

	JSR CheckObjectsOfType

	LDA <Num_Objects
	CMP #$02
	BCC GenEmemy_MakeMore

GenEnemy_RTS:
	RTS

GenEmemy_MakeMore:
	LDX <CurrentObjectIndexZ
	; Set timer to $70
	LDA #$70
	STA ObjectGenerator_Timer,X	; (only used here, then it goes back to 'X' anyway)

	INC ObjectGenerator_Var,X	 ; ObjectGenerator_Var++

	LDA ObjectGenerator_Var,X
	AND #$03
	BEQ ObjectGen_EnemyRTS	 ; 1:4 ticks proceed, otherwise jump to PRG007_BD7A (RTS)

	TXA
	TAY

	JSR PrepareNewObjectOrAbort	 ; Prepare me a Goomba!

	; Set Goomba X
	LDA ObjectGenerator_X,Y
	STA <Objects_XZ,X

	LDA ObjectGenerator_XHi,Y
	STA <Objects_XHiZ,X

	LDA ObjectGenerator_Y,Y
	SUB #$02
	STA <Objects_YZ,X

	LDA ObjectGenerator_YHi,Y
	SBC #$00
	STA <Objects_YHiZ,X

	LDA #OBJSTATE_FRESH
	STA Objects_State, X

	JSR Object_CalcBoundBox

PRG007_BD49:
	STY TempY

	LDY <CurrentObjectIndexZ
	LDA ObjectGenerator_Property, Y
	TAY

	LDA EnemyCannonDirection, Y
	STA Objects_Orientation, X
	
	LDA Goomb_YVelocity, Y
	STA <Objects_YVelZ, X

	LDA Goomb_XVelocity, Y
	STA <Objects_XVelZ, X

	LDA EnemyCannonType, Y
	STA Objects_ID,X
	STA Objects_NoExp, X

	LDA #$00
	STA Objects_Property, X

	LDA #$00
	STA Objects_Health, X
	
	JSR ObjectGenerator_NoiseAndSmoke

PRG007_BD78:
	LDX <CurrentObjectIndexZ	 ; X = Cannon Fire slot index

ObjectGen_EnemyRTS:
	RTS		 ; Return


ObjectGen_ShellCannon:
	LDA ObjectGenerator_Timer,X
	BNE ObjectGen_ShellCannon1	 ; If timer not expired, jump to PRG007_BD7A (RTS)

	LDA ObjectGenerator_Visibility, X
	AND #GENERATOR_HVISIBLE
	BNE ShellCannnon_Make
	RTS

ShellCannnon_Make:
	LDX <CurrentObjectIndexZ	

	TXA
	TAY
	; Set timer to $70
	LDA #$70
	STA ObjectGenerator_Timer,X	; (only used here, then it goes back to 'X' anyway)

	INC ObjectGenerator_Var,X	 ; ObjectGenerator_Var++

	LDA ObjectGenerator_Var,X
	AND #$03
	BEQ ObjectGen_ShellCannon1	 ; 1:4 ticks proceed, otherwise jump to PRG007_BD7A (RTS)

	JSR PrepareNewObjectOrAbort	 ; Prepare me a Goomba!

	; Set Goomba X
	LDA ObjectGenerator_X,Y
	STA <Objects_XZ,X

	LDA ObjectGenerator_XHi,Y
	STA <Objects_XHiZ,X

	LDA ObjectGenerator_Y,Y
	STA <Objects_YZ,X

	LDA ObjectGenerator_YHi,Y
	STA <Objects_YHiZ,X

	LDA ObjectGenerator_Property, Y
	TAY

	LDA Goomb_YVelocity, Y
	STA <Objects_YVelZ, X

	LDA Goomb_XVelocity, Y
	STA <Objects_XVelZ, X

	LDA #OBJ_PURPLETROOPA
	STA Objects_ID,X

	LDA #OBJSTATE_KICKED
	STA Objects_State, X

	LDA #BOUND16x16
	STA Objects_BoundBox, X

	LDA #(ATTR_WINDAFFECTS | ATTR_HASSHELL | ATTR_CARRYANDBUMP)
	STA Objects_BehaviorAttr, X

	LDA #$BF
	STA Explosion_Timer, X
	STA Objects_NoExp, X

	; Set Goomba's color
	LDA #SPR_PAL1
	STA Objects_SpriteAttributes,X

	LDX <CurrentObjectIndexZ
	LDA ObjectGenerator_Property, X
	AND #$01
	TAY
	
	JSR ObjectGenerator_NoiseAndSmoke

ObjectGen_ShellCannon1:
	RTS		 ; Return


PRG007_BD82:
	.byte $00, $08, $10, $18, $20, $28, $30, $38

FourWay_CannonballXVel:	.byte $00, $0B, $10, $0B, $00, -$0B, -$10, -$0B

	.byte $F0, $F0, $F5, $0B, $F5, $0B, $F5, $0B, $F5, $0B, $10, $10

FourWay_CannonballYVel:	.byte -$10, -$0B, $00, $0B, $10, $0B, $00, -$0B

	.byte $00, $00, $F5, $F5, $0B, $0B, $F5, $F5, $0B, $0B, $00, $00

CannonPoof_XOffs:

FourWay_CPXOff:	.byte $08, $18, $1C, $18, $08, $F8, $F4, $F8

Cannons_CPXOff:
	.byte -$0C	; ObjectGen_ULCANNON
	.byte -$0C	; ObjectGen_URCANNON
	.byte -$08	; ObjectGen_LLCANNON
	.byte  $08	; ObjectGen_LRCANNON
	.byte -$08	; ObjectGen_HLCANNON2
	.byte  $08	; ObjectGen_ULCANNON2
	.byte  $00	; ObjectGen_URCANNON2
	.byte  $00	; ObjectGen_LLCANNON2
	.byte  $00	; ObjectGen_HRCANNON
	.byte  $00	; Not used?
	.byte  $0C	; ObjectGen_LBOBOMBS
	.byte  $0C	; ObjectGen_RBOBOMBS


Bill_CPXOff:	.byte $0C, -$0C		; Bullet/Missile Bill
CannonPoof_YOffs:

FourWay_CPYOff:	.byte $F3, $F7, $07, $17, $1B, $17, $07, $F7

Cannons_CPYOff:
	.byte  $00	; ObjectGen_ULCANNON
	.byte  $08	; ObjectGen_URCANNON
	.byte -$08	; ObjectGen_LLCANNON
	.byte -$08	; ObjectGen_LRCANNON
	.byte  $08	; ObjectGen_HLCANNON2
	.byte  $08	; ObjectGen_ULCANNON2
	.byte  $00	; ObjectGen_URCANNON2
	.byte  $00	; ObjectGen_LLCANNON2
	.byte  $00	; ObjectGen_HRCANNON
	.byte  $00	; Not used?
	.byte  $00	; ObjectGen_LBOBOMBS
	.byte  $00	; ObjectGen_RBOBOMBS

Bill_CPYOff:	.byte $00, $00		; Bullet/Missile Bill

CannonWidths: .byte $00, $08

DetermineGeneratorVisibility:
	LDA #$00
	STA ObjectGenerator_Visibility, X

	LDA ObjectGenerator_X,X
	ADD #$08
	SUB <Horz_Scroll

	LDA ObjectGenerator_XHi,X
	SBC <Horz_Scroll_Hi
	BNE CheckCannonVVisibility

	LDA #GENERATOR_HVISIBLE
	STA ObjectGenerator_Visibility, X

CheckCannonVVisibility:
	LDA ObjectGenerator_Y, X
	ADD #$08
	SUB <Vert_Scroll

	LDA ObjectGenerator_YHi, X
	SBC <Vert_Scroll_Hi
	BNE DetermineGeneratorVisibilityRTS

	LDA ObjectGenerator_Visibility, X
	ORA #GENERATOR_VVISIBLE
	STA ObjectGenerator_Visibility, X

DetermineGeneratorVisibilityRTS:
	RTS	

ObjectGen_Platform:
	
	LDA ObjectGenerator_Visibility, X
	AND #GENERATOR_HVISIBLE
	BEQ ObjectGen_Platform1
	
	LDA ObjectGenerator_Timer, X
	BNE ObjectGen_Platform1

	JSR Object_FindEmptyX
	BCC ObjectGen_Platform1

	LDY <CurrentObjectIndexZ

	LDA #OBJ_PLATFORMUNSTABLE
	STA Objects_ID,X

	LDA #$01
	STA Objects_Property, X

	LDA #$06
	STA Objects_SpritesRequested, X

	LDA #OBJSTATE_NORMAL
	STA Objects_State,X

	LDA #BOUND48x16
	STA Objects_BoundBox, X

	JSR Object_NoInteractions

	LDA ObjectGenerator_X,Y
	STA <Objects_XZ,X

	LDA ObjectGenerator_XHi,Y
	STA <Objects_XHiZ,X

	LDA ObjectGenerator_Y,Y
	STA <Objects_YZ,X

	LDA ObjectGenerator_YHi,Y
	STA <Objects_YHiZ,X

	LDA #$10
	STA Platform_MaxFall, X
	STA PlatformUnstable_NoRegen, X

	LDA #$42
	STA PlatformUnstable_MoveTimer, X

	LDA #$FC
	STA <Objects_YVelZ, X

	LDA #SPR_PAL3
	STA Objects_SpriteAttributes,X

	LDA #$A0
	STA ObjectGenerator_Timer, Y

	JSR Object_CalcBoundBox

ObjectGen_Platform1:
	RTS
	
PlatformGenTimer:
	.byte $A0

; PRG007_BE59:
; 	STA <Temp_Var1
; 	JMP FireCannonBall	 ; Fire the cannonball!

; FireCannonBall:
	LDY #$05	 ; Y = 5

PRG007_BE60:
	LDA SpecialObj_ID,Y
	BEQ PRG007_BE69	 ; If this special object slot is free, jump to PRG007_BE69

	DEY		 ; Y--
	BPL PRG007_BE60	 ; While Y >= 0, loop!

	RTS		 ; Return

PRG007_BE69:

	; Set this as a cannon ball!
	LDA #SOBJ_CANNONBALL
	STA SpecialObj_ID,Y

	; Set cannonball X
	LDA ObjectGenerator_X,X
	CLC
	LDX <Temp_Var1		; X = 0 to 7
	ADC CannonPoof_XOffs,X
	STA SpecialObj_X,Y

	; Set cannonball Y velocity
	LDA FourWay_CannonballYVel,X
	ASL A
	STA SpecialObj_YVel,Y

	; Set cannonball X velocity
	LDA FourWay_CannonballXVel,X
	ASL A
	STA SpecialObj_XVel,Y

	; Temp_Var3 = 0 (16-bit sign extension)
	LDA #$00
	STA <Temp_Var3

	LDA CannonPoof_YOffs,X
	BPL PRG007_BE91	 ; If Y offset is not negative, jump to PRG007_BE91

	DEC <Temp_Var3	 ; Temp_Var3 = $FF (16-bit sign extension)

PRG007_BE91:
	CLC
	LDX <CurrentObjectIndexZ	 ; X = Cannon Fire slot index
	ADC ObjectGenerator_Y,X
	STA SpecialObj_Y,Y
	LDA ObjectGenerator_YHi,X
	ADC <Temp_Var3		; 16-bit sign extension
	STA SpecialObj_YHi,Y	

	; Data = 0
	LDA #$00
	STA SpecialObj_Data1,Y

	JMP ObjectGenerator_NoiseAndSmoke	 ; Play cannon fire noise and make smoke

PRG007_BEAA:
	RTS		 ; Return

	; Produces the smoke resulting from cannon fire; specify X/Y offset
	; from Cannon Fire's position by Temp_Var1 which indexes CannonPoof_X/YOffs 
ObjectGenerator_NoiseAndSmoke:
	LDX <CurrentObjectIndexZ

	; Cannon firing noise
	LDA Sound_QLevel1
	ORA #SND_LEVELBABOOM
	STA Sound_QLevel1

	LDA ObjectGenerator_Y,X
	CMP Level_VertScroll
	LDA ObjectGenerator_YHi,X
	SBC Level_VertScrollH
	BNE CannonPoofRTS		; If Cannon Fire has fallen off screen vertically, jump to PRG007_BF28 (RTS)

	JSR BrickBust_MoveOver	 ; Make room in first "brick bust" slot for poof

	; Brick bust, poof style
	LDA #$01
	STA BrickBust_En

	LDA CanonPoofXOffset, Y
	ADD ObjectGenerator_X,X
	SUB <Horz_Scroll	; Make relative to horizontal scroll
	STA Brick_DebrisX		; Set X

	LDX <CurrentObjectIndexZ	 ; X = Cannon Fire slot index

	LDA ObjectGenerator_Y,X	 ; + Cannon Fire Y
	SUB #$08
	SUB Level_VertScroll	 ; Make relative to vertical scroll
	STA Brick_DebrisYHi	 ; Set Y

	; Set poof counter
	LDA #$1f
	STA BrickBust_HEn

CannonPoofRTS:
	RTS		 ; Return
				  
Bill_XVel:
	.byte -$18, $18, $00, -$16, -$16, $00, $16, $16

Bill_YVel:
	.byte $00, $00, -$18, -$16, $16, $18, $16, -$16

Bill_XOffset:
	.byte $F4, $0C, $00, $F4, $F4, $00, $0C, $0C
	.byte $FF, $00, $00, $FF, $FF, $00, $00, $00

Bill_YOffset:
	.byte $FF, $FF, $F4, $F4, $0C, $0C, $0C, $F4
	.byte $FF, $FF, $FF, $FF, $00, $00, $00, $FF

CanonTimers:
	.byte $60, $80, $A0, $80, $60, $C0, $80, $A0

ObjectGen_BulletBill:
	
	LDA ObjectGenerator_Timer,X
	BNE ObjectGen_BulletBillRTS	 ; If timer not expired, jump to PRG007_BF28 (RTS)

	LDA ObjectGenerator_Visibility, X
	AND #GENERATOR_HVISIBLE
	BNE BulletBillGen_Make

ObjectGen_BulletBillRTS:	
	RTS

BulletBillGen_Make:
	; Reset Cannon Fire timer to $80-$9F, random
	LDA RandomN,X
	AND #$07
	TAY
	LDA CanonTimers, Y
	STA ObjectGenerator_Timer,X

	JSR PrepareNewObjectOrAbort

	LDY <CurrentObjectIndexZ	 ; Y = Cannon Fire object slot

	LDA ObjectGenerator_X, Y
	STA <Objects_XZ, X

	LDA ObjectGenerator_XHi, Y
	STA <Objects_XHiZ, X

	LDA ObjectGenerator_Y, Y
	STA <Objects_YZ, X

	LDA ObjectGenerator_YHi, Y
	STA <Objects_YHiZ, X

	LDA ObjectGenerator_ID,Y
	LSR A		; Selects which Bill type

	LDA #OBJ_BULLETBILL

	BCS PRG007_BF80	 ; If carry set, jump to PRG007_BF80

	LDA #$40
	STA Objects_Timer, X

	LDA #OBJ_MISSILEMARK

PRG007_BF80:
	STA Objects_ID,X	 ; Store Bill's ID

	LDA ObjectGenerator_Property,Y
	TAY
	BNE PRG007_BF81

	LDA #BOUND16x16
	STA Objects_BoundBox, X

	JSR Object_CalcBoundBoxForced
	JSR Object_XDistanceFromPlayer
	
	LDA <XDiff
	CMP #$10
	BCS Make_Bullet

	JMP Object_Delete

Make_Bullet:
	LDY <XDiffLeftRight

PRG007_BF81:

	LDA Bill_XVel,Y
	STA <Objects_XVelZ,X

	LDA Bill_YVel, Y
	STA <Objects_YVelZ, X

	LDA <Objects_XZ, X
	ADD Bill_XOffset,Y
	STA <Objects_XZ, X
	STA <Point_X
	STA <Poof_X

	LDA <Objects_XHiZ, X
	ADC Bill_XOffset + 8,Y
	STA <Objects_XHiZ, X
	STA <Point_XHi

	LDA <Objects_YZ, X
	ADD Bill_YOffset,Y
	STA <Objects_YZ, X
	STA <Poof_Y
	STA <Point_Y

	LDA <Objects_YHiZ, X
	ADC Bill_YOffset + 8,Y
	STA <Objects_YHiZ, X
	STA <Point_YHi

	LDA #OBJSTATE_FRESH
	STA Objects_State, X
	STA Objects_NoExp, X

	LDA #$02
	STA Objects_SpritesRequested, X

	LDA ObjectGenerator_Visibility, X
	AND #(GENERATOR_VVISIBLE | GENERATOR_HVISIBLE)
	BNE Make_BulletRTS

	JSR CheckPoint_OffScreen
	BCC Make_BulletRTS

	JSR Common_MakePoof	 ; Play cannon fire noise and make smoke

Make_BulletRTS:
	RTS		 ; Return


	; Provides a newly prepared object or does not return to caller!
PrepareNewObjectOrAbort:
	LDX #$04	  ; X = 4

PRG007_BFCF:
	LDA Objects_State,X
	BEQ PRG007_BFDC	 ; If this object state = 0 (Dead/Empty), jump to PRG007_BFDC

	DEX		 ; X--
	BPL PRG007_BFCF	 ; While X >= 0, loop!

	; No object slots available; do not return to caller!!
	PLA
	PLA

	LDX <CurrentObjectIndexZ	 ; Restore 'X' to its slot index value

	RTS		 ; Return

PRG007_BFDC:
	JSR Object_New	 ; Prepare this new object

	; Set to normal state
	LDA #OBJSTATE_FRESH
	STA Objects_State,X

	RTS		 ; Return

Num_Objects = Temp_Var1
Object_Check = Temp_Var2

CheckObjectsOfType:
	LDA #$00
	STA <Num_Objects

	LDX #$04

CheckNextObject:
	LDA Objects_State, X
	BEQ NotObject_Checking

	LDA Objects_ID, X
	CMP <Object_Check
	BNE NotObject_Checking

	INC <Num_Objects

NotObject_Checking:
	DEX
	BPL CheckNextObject
	RTS

CheckTailSpin:
	LDA Player_EffectiveSuit
	CMP #$03
	BNE CheckTailSpin1

	LDA Player_TailAttack
	BEQ CheckTailSpin1

	
	JSR SObj_AddXVelFrac
	JSR SObj_AddYVelFrac
	PLA
	PLA

CheckTailSpin1:
	RTS	

EnemyProj_HitPlayer:
	LDA SpecialObj_HurtEnemies, X
	BEQ HitPlayer

	JSR PlayerProj_HitEnemies
	BCC Enemy_NoKill

	JMP Player_HitFire

Enemy_NoKill:
	RTS

HitPlayer:
	JSR SpecialObj_DetectPlayer
	BCC EnemyProj_HitPlayer1

	LDA SpecialObj_Stompable, X
	BEQ SObj_CantStomp

	LDA <HitTest_Result
	AND #(HITTEST_BOTTOM)
	BEQ SObj_CantStomp

	LDA Player_BoundBottom
	SUB SpecialObj_BoundTop
	CMP #$08
	BCS SObj_CantStomp

	LDA #$00
	STA SpecialObj_Stompable, X
	STA SpecialObj_YVel, X
	STA SpecialObj_XVel, X

	LDA #-$28
	STA <Player_YVelZ
	STA Player_InAir
	INC Exp_Earned

	LDA Sound_QPlayer
	ORA #SND_PLAYERKICK
	STA Sound_QPlayer
	RTS

SObj_CantStomp:
	LDA Player_EffectiveSuit
	CMP #$03
	BNE NotTailHit

	LDA Player_TailAttack
	BEQ NotTailHit

	LDA SpecialObj_XVel, X
	EOR #$FF
	ADD #$01
	STA SpecialObj_XVel, X

	LDA SpecialObj_YVel, X
	EOR #$FF
	ADD #$01
	STA SpecialObj_YVel, X
	INC SpecialObj_HurtEnemies, X
	RTS

NotTailHit:

	LDA Player_StarInv
	ORA Player_FireDash
	BEQ EnemyProj_HitPlayer2

	JMP SpecialObj_ToPoof
	
EnemyProj_HitPlayer2:
	LDA SpecialObj_ID, X
	CMP #SOBJ_FIREBLOB
	BEQ Check_FoxImmunity

	CMP #SOBJ_FIREBALL
	BNE EnemyProj_HurtPlayer

Check_FoxImmunity:
	LDA Player_EffectiveSuit
	CMP #MARIO_FOX
	BNE EnemyProj_HurtPlayer

	JMP SpecialObj_ToPoof

EnemyProj_HurtPlayer:	
	JMP Player_GetHurt

EnemyProj_HitPlayer1:
	RTS

FreezeXVel:
	.byte $00, $20, $E0, $E0

FreezeYVel:
	.byte $00, $20, $E0, $E0

EnemeyProj_Enemy_FreezePlayer:
	LDA Player_FlashInv
	BNE EnemeyProj_Enemy_FreezePlayer3

	LDA SpecialObj_HurtEnemies, X
	BEQ Enemy_FreezePlayer

	JSR PlayerProj_HitEnemies
	BCC EnemeyProj_Enemy_FreezePlayer3

	JMP Player_HitIce

Enemy_FreezePlayer:
	JSR SpecialObj_DetectPlayer
	BCC EnemeyProj_Enemy_FreezePlayer3

	LDA Player_EffectiveSuit
	CMP #$03
	BNE Enemy_IceFreeze

	LDA Player_TailAttack
	BEQ Enemy_IceFreeze

	LDA SpecialObj_XVel, X
	EOR #$FF
	STA SpecialObj_XVel, X

	LDA SpecialObj_YVel, X
	EOR #$FF
	STA SpecialObj_YVel, X
	INC SpecialObj_HurtEnemies, X
	RTS

Enemy_IceFreeze:
	LDA Player_StarInv
	ORA Player_FireDash
	BEQ EnemeyProj_Enemy_FreezePlayer1

Enemy_IcePoofAway:
	JMP SpecialObj_ToPoof
	
EnemeyProj_Enemy_FreezePlayer1:
	LDA HitTest_Result
	AND #$03
	TAY
	
	LDA FreezeXVel, Y
	STA <Player_XVelZ

	LDA HitTest_Result
	LSR A
	LSR A
	AND #$03
	TAY
	
	LDA FreezeYVel, Y
	STA <Player_YVelZ

	LDA #$00
	STA SpecialObj_ID, X

	JMP Player_Freeze
	
EnemeyProj_Enemy_FreezePlayer3:
	RTS

Enemy_ProjYolk:
	LDA SpecialObj_HurtEnemies, X
	BEQ Enemy_YolkPlayer

	LDA #$02
	STA Proj_Attack

	JSR PlayerProj_HitEnemies
	BCC Enemy_YolkPlayerRTS

	JMP SpecialObj_AttackEnemy

Enemy_YolkPlayer:
	JSR SpecialObj_DetectPlayer
	BCC Enemy_YolkPlayerRTS

	LDA Player_TailAttack
	BEQ Enemy_YolkPlayer1

	LDA SpecialObj_XVel, X
	EOR #$FF
	ADD #$01
	STA SpecialObj_XVel, X

	INC SpecialObj_HurtEnemies, X
	RTS

Enemy_YolkPlayer1:
	LDA Player_Yolked
	BNE Enemy_YolkPlayer2

	LDA #$17
	STA Player_SuitLost

	LDA #$80
	STA Player_QueueSuit

	LDA #$71
	STA Player_FlashInv	 ; Player_FlashInv = $71

	LDA #$FF
	STA Player_Yolked
	JMP SpecialObj_ToPoof

Enemy_YolkPlayerRTS:
	RTS

Enemy_YolkPlayer2:
	JMP Player_GetHurt

Enemy_ProjOil:
	LDA SpecialObj_HurtEnemies, X
	BEQ Enemy_OilPlayer

	LDA #$02
	STA Proj_Attack

	JSR PlayerProj_HitEnemies
	BCC Enemy_OilPlayerRTS

	JMP SpecialObj_AttackEnemy

Enemy_OilPlayer:
	JSR SpecialObj_DetectPlayer
	BCC Enemy_OilPlayerRTS

	LDA Player_TailAttack
	BEQ Enemy_OilPlayer1

	LDA SpecialObj_XVel, X
	EOR #$FF
	ADD #$01
	STA SpecialObj_XVel, X

	INC SpecialObj_HurtEnemies, X
	RTS

Enemy_OilPlayer1:
	LDA Player_Oiled
	BNE Enemy_OilPlayer3

	LDA Player_EffectiveSuit
	CMP #MARIO_ICE
	BNE Enemy_OilPlayer2
	
	JMP SpecialObj_ForcedPoof

Enemy_OilPlayer2:	
	LDA #$17
	STA Player_SuitLost

	LDA #$00
	STA <Player_XVelZ

	LDA #$80
	STA Player_QueueSuit

	LDA #$71
	STA Player_FlashInv	 ; Player_FlashInv = $71

	LDA #$FF
	STA Player_Oiled
	JMP Enemy_OilSplash

Enemy_OilPlayerRTS:
	RTS

Enemy_OilPlayer3:
	JMP Player_GetHurt	

ProjSkull_Frames:
	.byte $F9, $FD
	.byte $FB, $FF

Enemy_ProjSkull:
	LDA <Player_HaltGameZ
	BNE Enemy_SkullAnimate

	JSR SpecObj_ChasePlayer
	JSR SpecialObj_CalcBounds16x16
	JSR EnemyProj_HitPlayer

	DEC SpecialObj_Timer, X

Enemy_SkullAnimate:
	LDA SpecialObj_Timer, X
	BNE Enemy_SkullDraw

	JMP SpecialObj_ToPoof

Enemy_SkullDraw:
	LSR A
	LSR A
	AND #$01

	TAY

	LDA ProjSkull_Frames, Y
	STA <SpecialObj_Tile

	LDA ProjSkull_Frames + 2, Y
	STA <SpecialObj_Tile + 1

	LDA #SPR_PAL2
	STA <SpecialObj_Attributes
	STA <SpecialObj_Attributes + 1

	JSR SpecialObj_CheckForeground
	JSR SpecialObj_CheckDirection16x16
	JSR SpecialObj_Draw16x16
	RTS		 ; Return
	

SpecObj_ChasePlayer:
	JSR SpecObj_ChasePlayerX
	JMP SpecObj_ChasePlayerY
	
SpecObj_ChasePlayerX:
	JSR SpecObj_XDistanceFromPlayer
	CPY #$00
	BNE SpecObj_ChaseDetermineXRight

	LDA SpecialObj_XVel,X
	CMP #$F0
	BEQ SpecObj_ChasePlayerXRTS	 

	ADD #$FF	 
	STA SpecialObj_XVel,X	 ; Update Boo's X velocity
	JMP SpecObj_ChasePlayerXRTS

SpecObj_ChaseDetermineXRight:
	LDA SpecialObj_XVel,X
	CMP #$10
	BEQ SpecObj_ChasePlayerXRTS	 ; If Boo is at his acceleration limit, jump to PRG002_A8EE

	ADD #$01	 ; Boo accelerates!
	STA SpecialObj_XVel,X	 ; Update Boo's X velocity

SpecObj_ChasePlayerXRTS:
	RTS

SpecObj_ChasePlayerY:
	JSR SpecObj_YDistanceFromPlayer

	CPY #$00
	BNE SpecObj_ChaseDetermineYUp

	LDA SpecialObj_YVel,X
	CMP #$F0
	BEQ SpecObj_ChaseMove	 ; If Boo is at his acceleration limit, jump to PRG002_A8EE

	ADD #$FF	 ; Boo accelerates!
	STA SpecialObj_YVel,X	 ; Update Boo's X velocity
	JMP SpecObj_ChaseMove

SpecObj_ChaseDetermineYUp:
	LDA SpecialObj_YVel,X
	CMP #$10
	BEQ SpecObj_ChaseMove	 ; If Boo is at his acceleration limit, jump to PRG002_A8EE

	ADD #$01	 ; Boo accelerates!
	STA SpecialObj_YVel,X	 ; Update Boo's X velocity

SpecObj_ChaseMove:
	JMP SObj_ApplyXYVels	 ; Apply X velocity


SpecObj_XDistanceFromPlayer:
	LDA SpecialObj_X, X
	ADD #$08
	STA <Temp_Var1

	LDA SpecialObj_XHi, X
	ADC #$00
	STA <Temp_Var2

	LDA <Player_X
	ADD #$08
	STA <Temp_Var3

	LDA <Player_XHi
	ADC #$00
	STA <Temp_Var4

	LDA <Temp_Var1
	SUB <Temp_Var3
	STA <XDiff

	LDA <Temp_Var2
	SBC <Temp_Var4
	BMI SpecialObjToRight_O

	CMP #$01
	BNE SpecialObjToLeft1_O

	LDA #$FF
	STA <XDiff

SpecialObjToLeft1_O:
	LDY #$00
	STY <XDiffLeftRight

	LDA <XDiff
	RTS

SpecialObjToRight_O:
	CMP #$FE
	BNE SpecialObjToRight1_O

	LDA #$01
	STA <XDiff

SpecialObjToRight1_O:
	LDY #$01
	STY <XDiffLeftRight

	LDA <XDiff
	EOR #$FF
	ADD #$01
	STA <XDiff
	RTS

SpecObj_YDistanceFromPlayer:
	LDA SpecialObj_Y, X
	ADD #$08
	STA <Temp_Var1

	LDA SpecialObj_YHi, X
	ADC #$00
	STA <Temp_Var2 

	LDA Player_BoundBottom
	SUB Player_BoundTop
	LSR A
	ADD Player_BoundTop
	STA <Temp_Var3

	LDA Player_BoundTopHi
	ADC #$00
	STA <Temp_Var4

	LDA <Temp_Var1
	SUB <Temp_Var3
	STA <YDiff

	LDA <Temp_Var2
	SBC <Temp_Var4
	BMI SpecialObjToBottom_O

	CMP #$01
	BNE SpecialObjToTop1_O

	LDA #$FF
	STA <YDiff

SpecialObjToTop1_O:
	LDY #$00
	STY <YDiffAboveBelow
	
	LDA <YDiff
	RTS

SpecialObjToBottom_O:
	CMP #$FE
	BNE SpecialObjToBottom1_O

	LDA #$01
	STA <YDiff

SpecialObjToBottom1_O:
	LDY #$01
	STY <YDiffAboveBelow

	LDA <YDiff
	BEQ SpecialObjToBottom1_O1

	EOR #$FF
	ADD #$01
	STA <YDiff
	RTS

SpecialObjToBottom1_O1:
	LDA #$FF
	STA <YDiff
	RTS

DrawStarsBackground:
	LDA WeatherActive
	BNE DrawStarsBackground01

	LDA DayNightActive
	BNE DrawParallaxBackground

DrawStarsBackground01:
	RTS

DrawParallaxBackground:
	LDA DayNight
	BNE DrawStarsBackground1


DrawSkyBackground1:
	LDA <Counter_1
	AND #$3F
	BNE DrawSkyBackground2
	INC Weather_XPos
	INC Weather_XPos + 1
	INC Weather_XPos + 2
	INC Weather_XPos + 3
	INC Weather_XPos + 4
	INC Weather_XPos + 5

DrawSkyBackground2:
	LDX #$05
	LDY #$E4
	
	LDA <Vert_Scroll
	LSR A
	LSR A
	LSR A
	LSR A
	STA <Temp_Var1

	LDA <Horz_Scroll
	LSR A
	LSR A
	LSR A
	STA <Temp_Var2

	LDA <Horz_Scroll_Hi
	ASL A
	ASL A
	ASL A
	ASL A
	ASL A
	ORA <Temp_Var2
	STA <Temp_Var2

DrawClouds0:
	INY 
	INY 
	INY 
	INY 
	
	LDA #(SPR_PAL1 | SPR_BEHINDBG)
	STA Sprite_RAM + 2, Y
	LDA #$75
	STA Sprite_RAM + 1, Y
	
	LDA Weather_YPos, X
	SUB <Temp_Var1
	STA Sprite_RAM, Y
	
	LDA Weather_XPos, X
	SUB <Temp_Var2
	STA Sprite_RAM +3, Y
	DEX
	BPL DrawClouds0
	RTS

DrawStarsBackground1:
	LDY #$E4
	LDX #$05
	
	LDA <Vert_Scroll
	LSR A
	LSR A
	LSR A
	LSR A
	STA <Temp_Var1
	
	LDA <Horz_Scroll
	LSR A
	LSR A
	LSR A
	STA <Temp_Var2
	
	LDA <Horz_Scroll_Hi
	ASL A
	ASL A
	ASL A
	ASL A
	ASL A
	ORA <Temp_Var2
	STA <Temp_Var2

DrawStars0:
	INY 
	INY 
	INY 
	INY 
	TXA
	AND #$03
	ORA #SPR_BEHINDBG
	STA Sprite_RAM + 2, Y
	LDA #$5D
	STA Sprite_RAM + 1, Y

	LDA Weather_YPos, X
	SUB <Temp_Var1
	STA Sprite_RAM, Y
	
	LDA Weather_XPos, X
	SUB <Temp_Var2
	STA Sprite_RAM +3, Y
	DEX
	BPL DrawStars0
	RTS


Projectile_TempChange:
	LDA ProjectileToSpinners
	BEQ Projectile_TempChangeRTS

	JSR Tile_WriteTempChange

Projectile_TempChangeRTS:
	RTS

Enemy_SpinyEgg:
	LDA <Player_HaltGameZ
	BNE Enemy_SpinyEggDraw

	JSR SObj_ApplyXYVels
	JSR SpecialObj_CalcBounds16x16

	LDA #$01
	STA Proj_Attack
	
	JSR EnemyProj_HitPlayer

	LDA SpecialObj_Timer, X
	BNE Enemy_SpinyEggDraw

	LDA SpecialObj_X, X
	STA <Poof_X

	LDA SpecialObj_Y, X
	STA <Poof_Y
	
	JSR Common_MakePoof

	LDA #$10
	STA SpecialObj_Timer, X

Enemy_SpinyEggDraw:
	LDA #$99
	STA <SpecialObj_Tile

	LDA #$99
	STA <SpecialObj_Tile + 1

	LDA #SPR_PAL2
	STA <SpecialObj_Attributes

	LDA #(SPR_PAL2 | SPR_HFLIP)
	STA <SpecialObj_Attributes + 1

	DEC SpecialObj_Timer, X
	INC SpecialObj_Data1, X
	LDA SpecialObj_Data1, X
	
	LSR A
	LSR A
	LSR A
	AND #$01
	BEQ Enemy_SpinyEggNoFlip

	JSR SpecialObj_Flip

Enemy_SpinyEggNoFlip:
	JSR SpecialObj_CheckForeground
	JSR SpecialObj_Draw16x16
	RTS

Coin_Sparkle:
	DEC SpecialObj_Timer, X
	BPL Coin_Sparkle1

	JMP SpecialObj_Delete

Coin_Sparkle1:
	LDA #$71
	STA <SpecialObj_Tile

	LDA #SPR_PAL3
	STA <SpecialObj_Attributes 

	JMP SpecialObj_Draw8x16

Plunger_State = SpecialObj_Data1
Plunger_PushingPlayer = SpecialObj_Data2

Enemy_Plunger:
	LDA <Player_HaltGameZ
	BEQ Enemy_PlungerNorm
	JMP Enemy_PlungerDraw

Enemy_PlungerNorm:
	LDA Plunger_State, X
	JSR DynJump

	.word Plunger_Move
	.word Plunger_Stuck
	.word Plunger_Fall

Plunger_Move:	
	JSR SObj_ApplyXYVels

	LDA Plunger_PushingPlayer, X
	BEQ Plunger_NotPushing

	LDA Player_HitWall
	BEQ Plunger_PushPlayer

	LDA #$02
	STA Plunger_State, X

Plunger_PushPlayer:	
	LDA #$00
	STA <Player_YVelZ
	STA <Player_CarryXVel

	LDA SpecialObj_XVel, X
	STA <Player_XVelZ
	JMP Enemy_PlungerDraw

Plunger_NotPushing:	
	JSR SpecialObj_CalcBounds16x16
	JSR SpecialObj_DetectWorld16x16Side
	
	LDA Tile_LastProp
	CMP #TILE_PROP_SOLID_ALL
	BCC Plunger_DetectPlayer

	LDA #$01
	STA Plunger_State, X
	
	LDA SpecialObj_X, X
	ADD #$08
	AND #$F0
	STA SpecialObj_X, X

	LDA SpecialObj_XHi, X
	ADC #$00
	STA SpecialObj_XHi, X

	LDA #$80
	STA SpecialObj_Timer, X
	JMP Enemy_PlungerDraw

Plunger_DetectPlayer:
	JSR SpecialObj_DetectPlayer
	BCC Enemy_PlungerDraw

	LDA #$01
	STA Plunger_PushingPlayer, X

	LDA Player_BoundTop
	STA SpecialObj_Y, X

	LDA Player_BoundTopHi, X
	STA SpecialObj_YHi, X

	LDA SpecialObj_XVel, X
	BPL Plunger_LeftSide

	LDA Player_BoundRight
	ADD #$03
	STA SpecialObj_X, X

	LDA Player_BoundRightHi
	ADC #$00
	STA SpecialObj_XHi, X
	JMP Enemy_PlungerDraw

Plunger_LeftSide:
	LDA Player_BoundLeft
	SUB #$10
	STA SpecialObj_X, X

	LDA Player_BoundLeftHi
	SBC #$00
	STA SpecialObj_XHi, X
	JMP Enemy_PlungerDraw

Plunger_Stuck:
	JSR SpecialObj_CalcBounds16x16
	JSR SpecialObj_DetectWorld16x16
	
	JSR SpecialObj_DetectPlayer
	BCC Plunger_Drop

	LDA <HitTest_Result
	AND #(HITTEST_BOTTOM)
	BEQ Enemy_PlungerDraw

	LDX #$09
	JSR ObjHit_SolidStand
	LDX <CurrentObjectIndexZ

Plunger_Drop:
	DEC SpecialObj_Timer, X
	BNE	Enemy_PlungerDraw

	LDA #$02
	STA Plunger_State, X

Enemy_PlungerDraw:

	LDA #$A9
	STA <SpecialObj_Tile

	LDA #$BF
	STA <SpecialObj_Tile + 1

	LDA #SPR_PAL1
	STA <SpecialObj_Attributes
	STA <SpecialObj_Attributes + 1

	JSR SpecialObj_CheckForeground
	JSR SpecialObj_CheckDirection16x16

Enemey_PlungerDraw1:
	LDA SpecialObj_Y, X
	SUB #$03
	STA SpecialObj_Y, X

	JSR SpecialObj_Draw16x16
	
	LDA SpecialObj_Y, X
	ADD #$03
	STA SpecialObj_Y, X
	RTS

Enemy_PlungerStuck:
	JMP Enemy_PlungerDraw

Plunger_Fall:
	JSR SObj_ApplyYVelWithGravity
	JMP Enemy_PlungerDraw
	