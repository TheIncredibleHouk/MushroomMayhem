; Super Mario Bros. 3 Full Disassembly by Southbird 2012
; For more info, see http://www.sonicepoch.com/sm3mix/
;
; PLEASE INCLUDE A CREDIT TO THE SOUTHBIRD DISASSEMBLY
; AND THE ABOVE LINK SOMEWHERE IN YOUR WORKS :)
;
; Original disassembler source generated by DCC6502 version v1.4
; (With labels, comments, and some syntax corrections for nesasm by Southbird)
; For more info about DCC6502, e-mail veilleux@ameth.org
;
; This source file last updated: 2011-11-18 21:50:36.000000000 -0600
; Distribution package date: Fri Apr  6 23:46:16 UTC 2012
;---------------------------------------------------------------------------
	; CAUTION!! ObjectGroup03 labels MUST appear at the 
	; address specified by the predefined constants!  I can't
	; verify this at the assembler level, so be careful!!
	; I'm using a ".org" directive to help enforce it, but
	; the assembler does not warn you if you overwrite and
	; instead will simply "stomp" on your code if you passed
	; that limit ... sorry, original coders assumed a constant
	; position on banks 1 - 5 and didn't use a LUT this time...

	; Object group $03 (i.e. objects starting at ID $6C) State 1 jump table

	.org ObjectGroup_InitJumpTable	; <-- help enforce this table *here*  
ObjectGroup03_InitJumpTable:
	.word ObjInit_Troopa	; Object $6C - OBJ_GREENTROOPA
	.word ObjInit_Troopa	; Object $6D - OBJ_REDTROOPA
	.word Object_MoveTowardsPlayer	; Object $6E - OBJ_PARATROOPAGREENHOP
	.word ObjInit_ParaTroopas	; Object $6F - OBJ_FLYINGREDPARATROOPA
	.word Object_MoveTowardsPlayer	; Object $70 - OBJ_BUZZYBEATLE
	.word Object_MoveTowardsPlayer	; Object $71 - OBJ_SPINY
	.word ObjInit_Goomba	; Object $72 - OBJ_GOOMBA
	.word ObjInit_ParaGoomba	; Object $73 - OBJ_PARAGOOMBA
	.word ObjInit_ZombieGoomba	; Object $74 - OBJ_ZOMBIEGOOMBA
	.word ObjInit_Waterfill	; Object $75 - OBJ_WATERFILLER
	.word Object_MoveTowardsPlayer	; Object $76 - OBJ_POISONMUSHROOM
	.word ObjInit_SwimmingCheep	; Object $77 - OBJ_GREENCHEEP
	.word ObjInit_BulletBill	; Object $78 - OBJ_BULLETBILL
	.word ObjInit_MissileMark	; Object $79 - OBJ_BULLETBILLHOMING
	.word ObjInit_Troopa	; Object $7A - OBJ_PURPLETROOPA
	.word ObjInit_BlueShell	; Object $7B - OBJ_BLUESHELL
	.word ObjInit_DeliveryLakitu	; Object $7C - OBJ_HELPER
	.word ObjInit_ParaZombieGoomba	; Object $7D - OBJ_PARAZOMBIEGOOMBA
	.word ObjInit_DoNothing	; Object $7E - OBJ_BIGGREENHOPPER
	.word ObjInit_GiantRedPiranha	; Object $7F - OBJ_BIGREDPIRANHA
	.word ObjInit_ParaTroopas	; Object $80 - OBJ_FLYINGGREENPARATROOPA
	.word ObjInit_HammerBro		; Object $81 - OBJ_HAMMERBRO
	.word ObjInit_NinjaBro	; Object $82 - OBJ_NINJABRO
	.word ObjInit_Lakitu		; Object $83 - OBJ_LAKITU
	.word ObjInit_DoNothing	; Object $84 - OBJ_SPINYEGG
	.word Object_MoveTowardsPlayer	; Object $85 - OBJ_BLUESPINY
	.word ObjInit_FireBro		; Object $86 - OBJ_ICEBRO
	.word ObjInit_FireBro		; Object $87 - OBJ_FIREBRO
	.word ObjInit_FireBro	; Object $88 - OBJ_PIRATEBRO
	.word ObjInit_ChainChomp	; Object $89 - OBJ_CHAINCHOMP
	.word ObjInit_Thwomp		; Object $8A - OBJ_THWOMP
	.word ObjInit_HyperThwomp	; Object $8B - OBJ_HYPERTHWOMP
	.word ObjInit_HyperThwomp	; Object $8C - OBJ_THWOMPRIGHTSLIDE
	.word ObjInit_ThwompUDSlide	; Object $8D - OBJ_THWOMPUPDOWN
	.word ObjInit_ThwompUDSlide	; Object $8E - OBJ_THWOMPDIAGONALUL
	.word ObjInit_ThwompUDSlide	; Object $8F - OBJ_THWOMPDIAGONALDL


	; Object group $03 (i.e. objects starting at ID $6C) State 2 jump table

	.org ObjectGroup_NormalJumpTable	; <-- help enforce this table *here*
ObjectGroup03_NormalJumpTable:
	.word ObjNorm_Troopa	; Object $6C - OBJ_GREENTROOPA
	.word ObjNorm_RedTroopa		; Object $6D - OBJ_REDTROOPA
	.word ObjNorm_BouncyTroopa	; Object $6E - OBJ_PARATROOPAGREENHOP
	.word ObjNorm_FlyingTroopa	; Object $6F - OBJ_FLYINGREDPARATROOPA
	.word ObjNorm_SpinyBuzzy	; Object $70 - OBJ_BUZZYBEATLE
	.word ObjNorm_SpinyBuzzy	; Object $71 - OBJ_SPINY
	.word ObjNorm_Goomba	; Object $72 - OBJ_GOOMBA
	.word ObjNorm_ParaGoomba	; Object $73 - OBJ_PARAGOOMBA
	.word ObjNorm_ZombieGoomba	; Object $74 - OBJ_ZOMBIEGOOMBA
	.word ObjNorm_Waterfill	; Object $75 - OBJ_WATERFILLER
	.word ObjNorm_PoisonMushroom	; Object $76 - OBJ_POISONMUSHROOM
	.word ObjNorm_SwimmingCheep	; Object $77 - OBJ_GREENCHEEP
	.word ObjNorm_BulletBill	; Object $78 - OBJ_BULLETBILL
	.word ObjNorm_MissileMark	; Object $79 - OBJ_BULLETBILLHOMING
	.word ObjNorm_PurpleTroopa	; Object $7A - OBJ_PURPLETROOPA
	.word ObjNorm_BlueShell		; Object $7B - OBJ_BLUESHELL
	.word ObjNorm_DeliveryLakitu	; Object $7C - OBJ_HELPER
	.word ObjNorm_ParaZombieGoomba	; Object $7D - OBJ_PARAZOMBIEGOOMBA
	.word ObjNorm_GroundTroop	; Object $7E - OBJ_BIGGREENHOPPER
	.word ObjNorm_BigPiranha	; Object $7F - OBJ_BIGREDPIRANHA
	.word ObjNorm_FlyingTroopa	; Object $80 - OBJ_FLYINGGREENPARATROOPA
	.word ObjNorm_HammerBro		; Object $81 - OBJ_HAMMERBRO
	.word ObjNorm_NinjaBro	; Object $82 - OBJ_NINJABRO
	.word ObjNorm_Lakitu		; Object $83 - OBJ_LAKITU
	.word ObjNorm_SpinyEgg		; Object $84 - OBJ_SPINYEGG
	.word ObjNorm_GroundTroop	; Object $85 - OBJ_BLUESPINY
	.word ObjNorm_FireBro		; Object $86 - OBJ_ICEBRO
	.word ObjNorm_FireBro		; Object $87 - OBJ_FIREBRO
	.word ObjNorm_FireBro	; Object $88 - OBJ_PIRATEBRO
	.word ObjNorm_ChainChomp	; Object $89 - OBJ_CHAINCHOMP
	.word ObjNorm_Thwomp		; Object $8A - OBJ_THWOMP
	.word ObjNorm_HyperThwomp	; Object $8B - OBJ_HYPERTHWOMP
	.word ObjNorm_HyperThwomp	; Object $8C - OBJ_THWOMPRIGHTSLIDE
	.word ObjNorm_ThwompVertical	; Object $8D - OBJ_THWOMPUPDOWN
	.word ObjNorm_ThwompVertical	; Object $8E - OBJ_THWOMPDIAGONALUL
	.word ObjNorm_ThwompVertical	; Object $8F - OBJ_THWOMPDIAGONALDL


	; Object group $03 (i.e. objects starting at ID $6C) Collision routine jump table (if calling Object_HitTestRespond;
	; Special values of OCSPECIAL_KILLCHANGETO or OCSPECIAL_HIGHSCORE can be used here instead otherwise.)

	.org ObjectGroup_CollideJumpTable	; <-- help enforce this table *here*
ObjectGroup03_CollideJumpTable:
	.word Object_Hold					; Object $6C - OBJ_GREENTROOPA
	.word Object_Hold					; Object $6D - OBJ_REDTROOPA
	.word OCSPECIAL_KILLCHANGETO |OBJ_GREENTROOPA	; Object $6E - OBJ_PARATROOPAGREENHOP
	.word OCSPECIAL_KILLCHANGETO |OBJ_REDTROOPA	; Object $6F - OBJ_FLYINGREDPARATROOPA
	.word Object_Hold					; Object $70 - OBJ_BUZZYBEATLE
	.word Object_Hold					; Object $71 - OBJ_SPINY
	.word $0000					; Object $72 - OBJ_GOOMBA
	.word OCSPECIAL_KILLCHANGETO | OBJ_GOOMBA	; Object $73 - OBJ_PARAGOOMBA
	.word Object_Hold	; Object $74 - OBJ_ZOMBIEGOOMBA
	.word $0000	; Object $75 - OBJ_WATERFILLER (OCSPECIAL_KILLCHANGETO must be a mistake, but interesting!)
	.word $0000					; Object $76 - OBJ_POISONMUSHROOM
	.word $0000					; Object $77 - OBJ_GREENCHEEP
	.word $0000					; Object $78 - OBJ_BULLETBILL
	.word $0000					; Object $79 - OBJ_BULLETBILLHOMING
	.word Object_Hold					; Object $7A - OBJ_PURPLETROOPA
	.word $0000					; Object $7B - OBJ_BLUESHELL
	.word $0000					; Object $7C - OBJ_HELPER
	.word $0000					; Object $7D - OBJ_PARAZOMBIEGOOMBA
	.word $0000 | OBJ_PURPLETROOPA	; Object $7E - OBJ_BIGGREENHOPPER
	.word $0000					; Object $7F - OBJ_BIGREDPIRANHA
	.word $0000 | OBJ_PURPLETROOPA	; Object $80 - OBJ_FLYINGGREENPARATROOPA
	.word $0000			; Object $81 - OBJ_HAMMERBRO
	.word $0000			; Object $82 - OBJ_NINJABRO
	.word $0000			; Object $83 - OBJ_LAKITU
	.word $0000					; Object $84 - OBJ_SPINYEGG
	.word $0000					; Object $85 - OBJ_BLUESPINY
	.word $0000			; Object $86 - OBJ_ICEBRO
	.word $0000			; Object $87 - OBJ_FIREBRO
	.word $0000					; Object $88 - OBJ_PIRATEBRO
	.word $0000					; Object $89 - OBJ_CHAINCHOMP
	.word $0000					; Object $8A - OBJ_THWOMP
	.word $0000					; Object $8B - OBJ_HYPERTHWOMP
	.word $0000					; Object $8C - OBJ_THWOMPRIGHTSLIDE
	.word $0000					; Object $8D - OBJ_THWOMPUPDOWN
	.word $0000					; Object $8E - OBJ_THWOMPDIAGONALUL
	.word $0000					; Object $8F - OBJ_THWOMPDIAGONALDL

	
	; Object group $03 (i.e. objects starting at ID $6C) attribute bits set 1 (OA1_* flags valid here)

	.org ObjectGroup_Attributes	; <-- help enforce this table *here*
ObjectGroup03_Attributes:
	.byte OA1_PAL2 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $6C - OBJ_GREENTROOPA
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $6D - OBJ_REDTROOPA
	.byte OA1_PAL2 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $6E - OBJ_PARATROOPAGREENHOP
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $6F - OBJ_FLYINGREDPARATROOPA
	.byte OA1_PAL3 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $70 - OBJ_BUZZYBEATLE
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $71 - OBJ_SPINY
	.byte OA1_PAL3 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $72 - OBJ_GOOMBA
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $73 - OBJ_PARAGOOMBA
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $74 - OBJ_ZOMBIEGOOMBA
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $75 - OBJ_WATERFILLER
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $76 - OBJ_POISONMUSHROOM
	.byte OA1_PAL2  | OA1_HEIGHT32 | OA1_WIDTH16	; Object $77 - OBJ_GREENCHEEP
	.byte OA1_PAL2 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $78 - OBJ_BULLETBILL
	.byte OA1_PAL2 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $79 - OBJ_BULLETBILLHOMING
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $7A - OBJ_PURPLETROOPA
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $7B - OBJ_BLUESHELL
	.byte OA1_PAL3 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $7C - OBJ_HELPER
	.byte OA1_PAL2 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $7D - OBJ_PARAZOMBIEGOOMBA
	.byte OA1_PAL2 | OA1_HEIGHT48 | OA1_WIDTH24	; Object $7E - OBJ_BIGGREENHOPPER
	.byte OA1_PAL1 | OA1_HEIGHT48 | OA1_WIDTH24	; Object $7F - OBJ_BIGREDPIRANHA
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $80 - OBJ_FLYINGGREENPARATROOPA
	.byte OA1_PAL3 | OA1_HEIGHT48 | OA1_WIDTH16	; Object $81 - OBJ_HAMMERBRO
	.byte OA1_PAL3 | OA1_HEIGHT48 | OA1_WIDTH16	; Object $82 - OBJ_NINJABRO
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $83 - OBJ_LAKITU
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $84 - OBJ_SPINYEGG
	.byte OA1_PAL2 | OA1_HEIGHT32 | OA1_WIDTH16	; Object $85 - OBJ_BLUESPINY
	.byte OA1_PAL2 | OA1_HEIGHT48 | OA1_WIDTH16	; Object $86 - OBJ_ICEBRO
	.byte OA1_PAL1 | OA1_HEIGHT48 | OA1_WIDTH16	; Object $87 - OBJ_FIREBRO
	.byte OA1_PAL1 | OA1_HEIGHT48 | OA1_WIDTH16	; Object $88 - OBJ_PIRATEBRO
	.byte OA1_PAL1 | OA1_HEIGHT16 | OA1_WIDTH16	; Object $89 - OBJ_CHAINCHOMP
	.byte OA1_PAL2 | OA1_HEIGHT32 | OA1_WIDTH48	; Object $8A - OBJ_THWOMP
	.byte OA1_PAL1 | OA1_HEIGHT32 | OA1_WIDTH48	; Object $8B - OBJ_HYPERTHWOMP
	.byte OA1_PAL2 | OA1_HEIGHT32 | OA1_WIDTH48	; Object $8C - OBJ_THWOMPRIGHTSLIDE
	.byte OA1_PAL2 | OA1_HEIGHT32 | OA1_WIDTH48	; Object $8D - OBJ_THWOMPUPDOWN
	.byte OA1_PAL2 | OA1_HEIGHT32 | OA1_WIDTH48	; Object $8E - OBJ_THWOMPDIAGONALUL
	.byte OA1_PAL2 | OA1_HEIGHT32 | OA1_WIDTH48	; Object $8F - OBJ_THWOMPDIAGONALDL

	; Object group $03 (i.e. objects starting at ID $6C) second set attribute bits

	.org ObjectGroup_Attributes2	; <-- help enforce this table *here*
ObjectGroup03_Attributes2:
	.byte OA2_GNDPLAYERMOD | OA2_TDOGRP1	; Object $6C - OBJ_GREENTROOPA
	.byte OA2_GNDPLAYERMOD | OA2_TDOGRP1	; Object $6D - OBJ_REDTROOPA
	.byte OA2_TDOGRP1			; Object $6E - OBJ_PARATROOPAGREENHOP
	.byte OA2_TDOGRP1			; Object $6F - OBJ_FLYINGREDPARATROOPA
	.byte OA2_GNDPLAYERMOD | OA2_TDOGRP1	; Object $70 - OBJ_BUZZYBEATLE
	.byte OA2_GNDPLAYERMOD | OA2_TDOGRP1	; Object $71 - OBJ_SPINY
	.byte $00	; Object $72 - OBJ_GOOMBA
	.byte OA2_TDOGRP1			; Object $73 - OBJ_PARAGOOMBA
	.byte OA2_TDOGRP1			; Object $74 - OBJ_ZOMBIEGOOMBA
	.byte OA2_NOSHELLORSQUASH | OA2_TDOGRP1	; Object $75 - OBJ_WATERFILLER
	.byte OA2_NOSHELLORSQUASH | OA2_TDOGRP1	; Object $76 - OBJ_POISONMUSHROOM
	.byte OA2_NOSHELLORSQUASH | OA2_TDOGRP1	; Object $77 - OBJ_GREENCHEEP
	.byte OA2_NOSHELLORSQUASH | OA2_TDOGRP1	; Object $78 - OBJ_BULLETBILL
	.byte OA2_NOSHELLORSQUASH | OA2_TDOGRP1	; Object $79 - OBJ_BULLETBILLHOMING
	.byte OA2_GNDPLAYERMOD | OA2_TDOGRP1	; Object $7A - OBJ_PURPLETROOPA
	.byte OA2_NOSHELLORSQUASH | OA2_TDOGRP1	; Object $7B - OBJ_BLUESHELL
	.byte OA2_NOSHELLORSQUASH | OA2_TDOGRP1	; Object $7C - OBJ_HELPER
	.byte OA2_TDOGRP1	; Object $7D - OBJ_PARAZOMBIEGOOMBA
	.byte OA2_GNDPLAYERMOD | OA2_TDOGRP2	; Object $7E - OBJ_BIGGREENHOPPER
	.byte OA2_NOSHELLORSQUASH | OA2_TDOGRP2	; Object $7F - OBJ_BIGREDPIRANHA
	.byte OA2_TDOGRP1	; Object $80 - OBJ_FLYINGGREENPARATROOPA
	.byte OA2_NOSHELLORSQUASH | OA2_TDOGRP2	; Object $81 - OBJ_HAMMERBRO
	.byte OA2_STOMPDONTCARE | OA2_TDOGRP2	; Object $82 - OBJ_NINJABRO
	.byte OA2_NOSHELLORSQUASH | OA2_TDOGRP1	; Object $83 - OBJ_LAKITU
	.byte OA2_GNDPLAYERMOD | OA2_TDOGRP1	; Object $84 - OBJ_SPINYEGG
	.byte OA2_GNDPLAYERMOD | OA2_TDOGRP1	; Object $85 - OBJ_BLUESPINY
	.byte OA2_NOSHELLORSQUASH | OA2_TDOGRP2	; Object $86 - OBJ_ICEBRO
	.byte OA2_NOSHELLORSQUASH | OA2_TDOGRP2	; Object $87 - OBJ_FIREBRO
	.byte OA2_NOSHELLORSQUASH | OA2_TDOGRP2	; Object $88 - OBJ_PIRATEBRO
	.byte OA2_NOSHELLORSQUASH | OA2_TDOGRP1	; Object $89 - OBJ_CHAINCHOMP
	.byte OA2_NOSHELLORSQUASH | OA2_TDOGRP1	; Object $8A - OBJ_THWOMP
	.byte OA2_NOSHELLORSQUASH | OA2_TDOGRP1	; Object $8B - OBJ_HYPERTHWOMP
	.byte OA2_NOSHELLORSQUASH | OA2_TDOGRP2	; Object $8C - OBJ_THWOMPRIGHTSLIDE
	.byte OA2_NOSHELLORSQUASH | OA2_TDOGRP2	; Object $8D - OBJ_THWOMPUPDOWN
	.byte OA2_NOSHELLORSQUASH | OA2_TDOGRP2	; Object $8E - OBJ_THWOMPDIAGONALUL
	.byte OA2_NOSHELLORSQUASH | OA2_TDOGRP2	; Object $8F - OBJ_THWOMPDIAGONALDL


	; Object group $03 (i.e. objects starting at ID $6C) third set attribute bits

	.org ObjectGroup_Attributes3	; <-- help enforce this table *here*
ObjectGroup03_Attributes3:
	.byte OA3_HALT_NORMALONLY | OA3_SHELL 			; Object $6C - OBJ_GREENTROOPA
	.byte OA3_HALT_NORMALONLY | OA3_SHELL 			; Object $6D - OBJ_REDTROOPA
	.byte OA3_HALT_NORMALONLY | OA3_SHELL 			; Object $6E - OBJ_PARATROOPAGREENHOP
	.byte OA3_HALT_NORMALONLY | OA3_SHELL 			; Object $6F - OBJ_FLYINGREDPARATROOPA
	.byte OA3_HALT_NORMALONLY | OA3_SHELL 			; Object $70 - OBJ_BUZZYBEATLE
	.byte OA3_HALT_NORMALONLY | OA3_NOTSTOMPABLE | OA3_SHELL 	; Object $71 - OBJ_SPINY
	.byte OA3_HALT_NORMALONLY 				; Object $72 - OBJ_GOOMBA
	.byte OA3_HALT_NORMALONLY 				; Object $73 - OBJ_PARAGOOMBA
	.byte OA3_HALT_NORMALONLY				; Object $74 - OBJ_ZOMBIEGOOMBA
	.byte OA3_HALT_NORMALONLY | OA3_NOTSTOMPABLE | OA3_TAILATKIMMUNE			; Object $75 - OBJ_WATERFILLER
	.byte OA3_HALT_NORMALONLY 					; Object $76 - OBJ_POISONMUSHROOM
	.byte OA3_HALT_NORMALONLY | OA3_NOTSTOMPABLE 			; Object $77 - OBJ_GREENCHEEP
	.byte OA3_HALT_NORMALONLY 					; Object $78 - OBJ_BULLETBILL
	.byte OA3_HALT_NORMALONLY 					; Object $79 - OBJ_BULLETBILLHOMING
	.byte OA3_HALT_NORMALONLY | OA3_SHELL 			; Object $7A - OBJ_PURPLETROOPA
	.byte OA3_HALT_NORMALONLY | OA3_NOTSTOMPABLE 			; Object $7B - OBJ_BLUESHELL
	.byte OA3_HALT_NORMALONLY | OA3_TAILATKIMMUNE | OA3_NOTSTOMPABLE 				; Object $7C - OBJ_HELPER
	.byte OA3_HALT_NORMALONLY 	; Object $7D - OBJ_PARAZOMBIEGOOMBA
	.byte OA3_HALT_NORMALONLY | OA3_SHELL 			; Object $7E - OBJ_BIGGREENHOPPER
	.byte OA3_HALT_NORMALONLY | OA3_NOTSTOMPABLE 			; Object $7F - OBJ_BIGREDPIRANHA
	.byte OA3_HALT_NORMALONLY | OA3_SHELL 			; Object $80 - OBJ_FLYINGGREENPARATROOPA
	.byte OA3_HALT_NORMALONLY 					; Object $81 - OBJ_HAMMERBRO
	.byte OA3_HALT_NORMALONLY 					; Object $82 - OBJ_NINJABRO
	.byte OA3_HALT_NORMALONLY 					; Object $83 - OBJ_LAKITU
	.byte OA3_HALT_NORMALONLY | OA3_NOTSTOMPABLE 			; Object $84 - OBJ_SPINYEGG
	.byte OA3_HALT_NORMALONLY | OA3_NOTSTOMPABLE | OA3_SHELL 			; Object $85 - OBJ_BLUESPINY
	.byte OA3_HALT_NORMALONLY 					; Object $86 - OBJ_ICEBRO
	.byte OA3_HALT_NORMALONLY 					; Object $87 - OBJ_FIREBRO
	.byte OA3_HALT_NORMALONLY 			; Object $88 - OBJ_PIRATEBRO
	.byte OA3_HALT_NORMALONLY | OA3_NOTSTOMPABLE | OA3_TAILATKIMMUNE ;Object $89 - OBJ_CHAINCHOMP
	.byte OA3_HALT_NORMALONLY | OA3_NOTSTOMPABLE | OA3_TAILATKIMMUNE ;Object $8A - OBJ_THWOMP
	.byte OA3_HALT_NORMALONLY | OA3_NOTSTOMPABLE | OA3_TAILATKIMMUNE ;Object $8B - OBJ_HYPERTHWOMP
	.byte OA3_HALT_NORMALONLY | OA3_NOTSTOMPABLE | OA3_TAILATKIMMUNE ;Object $8C - OBJ_THWOMPRIGHTSLIDE
	.byte OA3_HALT_NORMALONLY | OA3_NOTSTOMPABLE | OA3_TAILATKIMMUNE ;Object $8D - OBJ_THWOMPUPDOWN
	.byte OA3_HALT_NORMALONLY | OA3_NOTSTOMPABLE | OA3_TAILATKIMMUNE ;Object $8E - OBJ_THWOMPDIAGONALUL
	.byte OA3_HALT_NORMALONLY | OA3_NOTSTOMPABLE | OA3_TAILATKIMMUNE ;Object $8F - OBJ_THWOMPDIAGONALDL


	; Object group $03 (i.e. objects starting at ID $6C) Pattern Table Select

	.org ObjectGroup_PatTableSel	; <-- help enforce this table *here*
ObjectGroup03_PatTableSel:
	.byte OPTS_SETPT6 | $4F	; Object $6C - OBJ_GREENTROOPA
	.byte OPTS_SETPT6 | $4F	; Object $6D - OBJ_REDTROOPA
	.byte OPTS_SETPT6 | $4F	; Object $6E - OBJ_PARATROOPAGREENHOP
	.byte OPTS_SETPT6 | $4F	; Object $6F - OBJ_FLYINGREDPARATROOPA
	.byte OPTS_SETPT5 | $0B	; Object $70 - OBJ_BUZZYBEATLE
	.byte OPTS_SETPT5 | $0B	; Object $71 - OBJ_SPINY
	.byte OPTS_SETPT6 | $4F	; Object $72 - OBJ_GOOMBA
	.byte OPTS_SETPT6 | $4F	; Object $73 - OBJ_PARAGOOMBA
	.byte OPTS_SETPT6 | $13	; Object $74 - OBJ_ZOMBIEGOOMBA
	.byte OPTS_SETPT5 | $12	; Object $75 - OBJ_WATERFILLER
	.byte OPTS_NOCHANGE; Object $76 - OBJ_POISONMUSHROOM
	.byte OPTS_SETPT6 | $4F	; Object $77 - OBJ_GREENCHEEP
	.byte OPTS_SETPT6 | $4F	; Object $78 - OBJ_BULLETBILL
	.byte OPTS_SETPT5 | $4C	; Object $79 - OBJ_BULLETBILLHOMING
	.byte OPTS_SETPT6 | $4F	; Object $7A - OBJ_PURPLETROOPA
	.byte OPTS_SETPT5 | $0B	; Object $7B - OBJ_BLUESHELL
	.byte OPTS_NOCHANGE	; Object $7C - OBJ_HELPER
	.byte OPTS_SETPT6 | $13	; Object $7D - OBJ_PARAZOMBIEGOOMBA
	.byte OPTS_SETPT5 | $3D	; Object $7E - OBJ_BIGGREENHOPPER
	.byte OPTS_SETPT5 | $3D	; Object $7F - OBJ_BIGREDPIRANHA
	.byte OPTS_SETPT6 | $4F	; Object $80 - OBJ_FLYINGGREENPARATROOPA
	.byte OPTS_SETPT5 | $4E	; Object $81 - OBJ_HAMMERBRO
	.byte OPTS_SETPT5 | $4E	; Object $82 - OBJ_NINJABRO
	.byte OPTS_NOCHANGE	; Object $83 - OBJ_LAKITU
	.byte OPTS_SETPT5 | $0B	; Object $84 - OBJ_SPINYEGG
	.byte OPTS_SETPT5 | $0B	; Object $85 - OBJ_BLUESPINY
	.byte OPTS_SETPT5 | $4E	; Object $86 - OBJ_ICEBRO
	.byte OPTS_SETPT5 | $4E	; Object $87 - OBJ_FIREBRO
	.byte OPTS_SETPT5 | $4E	; Object $88 - OBJ_PIRATEBRO
	.byte OPTS_SETPT5 | $0E	; Object $89 - OBJ_CHAINCHOMP
	.byte OPTS_SETPT5 | $12	; Object $8A - OBJ_THWOMP
	.byte OPTS_SETPT5 | $12	; Object $8B - OBJ_HYPERTHWOMP
	.byte OPTS_SETPT5 | $12	; Object $8C - OBJ_THWOMPRIGHTSLIDE
	.byte OPTS_SETPT5 | $12	; Object $8D - OBJ_THWOMPUPDOWN
	.byte OPTS_SETPT5 | $12	; Object $8E - OBJ_THWOMPDIAGONALUL
	.byte OPTS_SETPT5 | $12	; Object $8F - OBJ_THWOMPDIAGONALDL


	; Object group $03 (i.e. objects starting at ID $6C) "Kill Action"

	.org ObjectGroup_KillAction	; <-- help enforce this table *here*
ObjectGroup03_KillAction:
	.byte KILLACT_JUSTDRAWMIRROR	; Object $6C - OBJ_GREENTROOPA
	.byte KILLACT_JUSTDRAWMIRROR	; Object $6D - OBJ_REDTROOPA
	.byte KILLACT_JUSTDRAWMIRROR	; Object $6E - OBJ_PARATROOPAGREENHOP
	.byte KILLACT_JUSTDRAWMIRROR	; Object $6F - OBJ_FLYINGREDPARATROOPA
	.byte KILLACT_JUSTDRAWMIRROR	; Object $70 - OBJ_BUZZYBEATLE
	.byte KILLACT_JUSTDRAWMIRROR	; Object $71 - OBJ_SPINY
	.byte KILLACT_NORMALANDKILLED	; Object $72 - OBJ_GOOMBA
	.byte KILLACT_JUSTDRAWMIRROR	; Object $73 - OBJ_PARAGOOMBA
	.byte KILLACT_JUSTDRAWMIRROR	; Object $74 - OBJ_ZOMBIEGOOMBA
	.byte KILLACT_JUSTDRAW16X16	; Object $75 - OBJ_WATERFILLER
	.byte KILLACT_NORMALANDKILLED	; Object $76 - OBJ_POISONMUSHROOM
	.byte KILLACT_JUSTDRAW16X16	; Object $77 - OBJ_GREENCHEEP
	.byte KILLACT_JUSTDRAW16X16	; Object $78 - OBJ_BULLETBILL
	.byte KILLACT_JUSTDRAW16X16	; Object $79 - OBJ_BULLETBILLHOMING
	.byte KILLACT_JUSTDRAWMIRROR	; Object $7A - OBJ_PURPLETROOPA
	.byte KILLACT_JUSTDRAWMIRROR	; Object $7B - OBJ_BLUESHELL
	.byte KILLACT_JUSTDRAW16X16	; Object $7C - OBJ_HELPER
	.byte KILLACT_JUSTDRAWMIRROR		; Object $7D - OBJ_PARAZOMBIEGOOMBA
	.byte KILLACT_GIANTKILLED	; Object $7E - OBJ_BIGGREENHOPPER
	.byte KILLACT_POOFDEATH		; Object $7F - OBJ_BIGREDPIRANHA
	.byte KILLACT_JUSTDRAWMIRROR	; Object $80 - OBJ_FLYINGGREENPARATROOPA
	.byte KILLACT_JUSTDRAW16X32	; Object $81 - OBJ_HAMMERBRO
	.byte KILLACT_NORMALSTATE	; Object $82 - OBJ_NINJABRO
	.byte KILLACT_NORMALSTATE	; Object $83 - OBJ_LAKITU
	.byte KILLACT_JUSTDRAW16X16	; Object $84 - OBJ_SPINYEGG
	.byte KILLACT_JUSTDRAWMIRROR	; Object $85 - OBJ_BLUESPINY
	.byte KILLACT_JUSTDRAW16X32	; Object $86 - OBJ_ICEBRO
	.byte KILLACT_JUSTDRAW16X32	; Object $87 - OBJ_FIREBRO
	.byte KILLACT_JUSTDRAW16X32	; Object $88 - OBJ_PIRATEBRO
	.byte KILLACT_JUSTDRAW16X16	; Object $89 - OBJ_CHAINCHOMP
	.byte KILLACT_NORMALANDKILLED	; Object $8A - OBJ_THWOMP
	.byte KILLACT_NORMALANDKILLED	; Object $8B - OBJ_HYPERTHWOMP
	.byte KILLACT_NORMALANDKILLED	; Object $8C - OBJ_THWOMPRIGHTSLIDE
	.byte KILLACT_NORMALANDKILLED	; Object $8D - OBJ_THWOMPUPDOWN
	.byte KILLACT_NORMALANDKILLED	; Object $8E - OBJ_THWOMPDIAGONALUL
	.byte KILLACT_NORMALANDKILLED	; Object $8F - OBJ_THWOMPDIAGONALDL


	; Object group $03 (i.e. objects starting at ID $6C) pattern index starts
	; These are used for all states except "normal"

OG3_POff .func (\1 - ObjectGroup03_PatternSets)

	.org ObjectGroup_PatternStarts	; <-- help enforce this table *here*
ObjectGroup03_PatternStarts:
	; Index by object group relative index (ObjGroupRel_Idx)
	.byte OG3_POff(ObjP6C), OG3_POff(ObjP6D), OG3_POff(ObjP6E), OG3_POff(ObjP6F)
	.byte OG3_POff(ObjP70), OG3_POff(ObjP71), OG3_POff(ObjP72), OG3_POff(ObjP73)
	.byte OG3_POff(ObjP74), OG3_POff(ObjP75), OG3_POff(ObjP76), OG3_POff(ObjP77)
	.byte OG3_POff(ObjP78), OG3_POff(ObjP79), OG3_POff(ObjP7A), OG3_POff(ObjP7B)
	.byte OG3_POff(ObjP7C), OG3_POff(ObjP7D), OG3_POff(ObjP7E), OG3_POff(ObjP7F)
	.byte OG3_POff(ObjP80), OG3_POff(ObjP81), OG3_POff(ObjP82), OG3_POff(ObjP83)
	.byte OG3_POff(ObjP84), OG3_POff(ObjP85), OG3_POff(ObjP86), OG3_POff(ObjP87)
	.byte OG3_POff(ObjP88), OG3_POff(ObjP89), OG3_POff(ObjP8A), OG3_POff(ObjP8B)
	.byte OG3_POff(ObjP8C), OG3_POff(ObjP8D), OG3_POff(ObjP8E), OG3_POff(ObjP8F)


	; Object group $03 (i.e. objects starting at ID $6C) pattern sets
	; Note that each "frame" is made up of two tile starts, so there's
	; always going to be an even amount of tiles per object.  That is,
	; for each "frame" value, it moves up two bytes to the next pair.

	; NOTE: SPECIAL EXCEPTION: If an object has Objects_IsGiant set
	; OR has its ID >= OBJ_PURPLETROOPA, there is an assumption
	; that the initial bytes at ObjectGroup03_PatternSets form a
	; valid JMP $xxxx instruction to go to an alternate giant shell
	; drawing routine (since otherwise default code is used)

	.org ObjectGroup_PatternSets	; <-- help enforce this table *here*
ObjectGroup03_PatternSets:
	; (End restricted alignment space)

	JMP GiantEnemy_Draw	; The special exception as noted above!!
ObjP75:
	.byte $81, $83

ObjP89:
	.byte $91, $93, $9D, $9F, $9D, $9F
ObjP8A:
ObjP8B:
ObjP8C:
ObjP8D:
ObjP8E:
ObjP8F:
	.byte $B1, $B3, $BB, $BD, $B1, $B3, $BB, $BD, $B1, $B3, $BB, $BD

ObjP7F:
	.byte $A1, $A3, $A5, $A7, $A9, $AB, $AD, $AF

ObjP7B:
	.byte $AD, $AD, $AF, $B1, $AD, $AD

ObjP7E:
	.byte $8D, $8F, $93, $95, $99, $8F, $9B, $9D, $B1, $B3, $B5, $B7
ObjP7C:
	.byte $9F, $9F, $87, $89, $AB, $AB, $A9, $A9
ObjP6C:
ObjP6D:
ObjP6E:
ObjP6F:
ObjP80:
ObjP7A:
	.byte $CB, $C5, $C3, $C5, $FD, $FD, $FD, $FD, $FD, $FD, $D1, $D1, $D3, $D5
ObjP70:
	.byte $95, $97, $91, $93, $9B, $9B, $9B, $9B, $A1, $A1, $9B, $9B, $A3, $A5
ObjP71:
	.byte $81, $83, $85, $87, $89, $89, $89, $89, $89, $89, $8F, $8F, $8B, $8D
ObjP72:
ObjP73:
	.byte $D9, $DB, $DB, $D9, $D9, $DB, $EB, $EB

ObjP74:
ObjP7D:
	.byte $D9, $DB, $DB, $D9, $DB, $DB

ObjP78:
ObjP79:
	.byte $BD, $BF, $B9, $BB, $DD, $DF, $B5, $B7

ObjP76:
	.byte $79, $79, $79, $79, $79, $79
ObjP77:
	.byte $E7, $E9, $E7, $EF, $E7, $EF, $AD, $AF, $B9, $BB, $B9, $BB
ObjP84:
	.byte $99, $99, $BB, $BB, $81, $83
ObjP85:
	.byte $81, $83, $85, $87, $89, $89, $89, $89, $89, $89, $8F, $8F, $8B, $8D

ObjP83:
	.byte $9F, $9F, $9F, $9F, $9F, $9F, $01, $01, $9D, $9D, $9F, $9F
ObjP88:
	.byte $8D, $8F, $A5, $A7, $8D, $8F, $B5, $B7, $91, $93, $A5, $A7

ObjP86:
ObjP87:
	.byte $81, $83, $A5, $A7, $81, $83, $B5, $B7, $85, $87, $A5, $A7
ObjP81:
	.byte $B1, $B3, $B5, $B7, $B1, $B3, $A5, $A7, $BD, $BF, $B5, $B7, $BD, $BF, $A5, $A7
	.byte $AD, $AF, $AD, $BF

ObjP82:
	.byte $95, $97, $B9, $BB, $95, $97, $A1, $A3, $99, $9B, $B9, $BB, $99, $9B, $A1, $A3
	.byte $00, $00, $00, $00, $9D, $9F, $9D, $9F

	
ObjInit_Waterfill:
	LDA #$40
	STA Objects_XVelZ, X
	RTS

ObjNorm_Waterfill:
	LDA <Objects_XHiZ, X
	BEQ ObjNorm_Waterfill1
	BMI ObjNorm_Waterfill_RTS
	LDA #OBJSTATE_DEADEMPTY
	STA Objects_State, X
	RTS

ObjNorm_Waterfill1:
	LDA <Objects_XZ, X
	AND #$0F
	BNE ObjNorm_Waterfill_RTS
	LDY #(OTDO_Water - Object_TileDetectOffsets)
	JSR Object_DetectTile
	CMP #TILE_PROP_SOLID_TOP
	BCC FillWater

	LDA #SND_LEVELCRUMBLE
	STA Sound_QLevel2

	JSR BrickBust_MoveOver	 ; Copy the bust values over (mainly because Bowser uses both)

	; Set the brick bust
	LDA #$02
	STA BrickBust_En

	; Brick bust upper Y
	LDA <Objects_YZ, X
	CLC
	SBC Level_VertScroll
	STA Brick_DebrisYHi

	; Brick bust lower Y
	ADD #$08
	STA Brick_DebrisY

	; Brick bust X
	LDA <Objects_XZ, X
	SUB <Horz_Scroll	
	STA Brick_DebrisX

	; reset brick bust X distance, no horizontal
	LDA #$00
	STA Brick_DebrisXDist
	STA BrickBust_HEn

	; Brick bust Y velocity
	LDA #-$06
	STA BrickBust_YVel

FillWater:
	LDA Tile_LastValue
	EOR #$01
	STA Block_UpdateValue
	INC Block_NeedsUpdate

	; Set all of the block change coordinates to remove the ice brick
	LDA <Objects_YHiZ,X
	STA Block_ChangeYHi

	LDA <Objects_YZ,X
	AND #$f0
	STA Block_ChangeY

	LDA <Objects_XHiZ,X
	STA Block_ChangeXHi

	LDA <Objects_XZ,X
	AND #$f0
	STA Block_ChangeX

ObjNorm_Waterfill_RTS:
	JSR Object_ApplyXVel
	JSR Object_ShakeAndDraw
	LDA Object_SpriteRAM_Offset, X 
	TAX
	DEC Sprite_RAM, X
	DEC Sprite_RAM + 4, X
	RTS

	; A "hammer brother" object has special purpose when 
	; Player has entered through a enemy battle object
BattleEnemy_ByEnterID:
	.byte $00		; 0: (Unused, standard level entry)
	.byte $00		; 1: HELP (can't be "entered")
	.byte $00		; 2: Airship (not our concern here)
	.byte OBJ_HAMMERBRO	; 3: Hammer Bro battle
	.byte OBJ_NINJABRO	; 4: Boomerang Bro battle
	.byte OBJ_ICEBRO	; 5: Heavy Bro battle
	.byte OBJ_FIREBRO	; 6: Fire Bro battle
	.byte $00		; 7: World 7 Plant (not our concern here)
	.byte $00		; 8: Unknown marching glitch object (interesting!)
	.byte $00		; 9: N-Spade (not our concern)

	; NOTE: No definition for $0A-$10 map objects... not our concern,
	; sure, but still interesting that they went as far as they did.

ObjInit_HammerBro:

	RTS		 ; Return

ObjInit_NinjaBro:
	LDA #$10
	STA Objects_SlowTimer, X
	; Var5 = random value
	LDA RandomN,X
	STA <Objects_Data2,X

PRG004_A48F:
	RTS		 ; Return

PRG004_A490:
	; Var6 = random value
	LDA RandomN,X
	STA Objects_Data6,X
	RTS		 ; Return

NinjaBro_FacePlayerFlip:	.byte SPR_HFLIP, $00


NinjaDodge_KillOrPoof:
	LDA RandomN
	AND #$01
	STA TempA
	LDA Objects_SlowTimer, X
	BEQ NinjaDodge_Poof1
	JMP Object_GetKilled
	RTS

NinjaDodge_Poof:
	LDA Objects_SpriteX, X
	AND #$80
	STA TempA
	LDA Objects_SlowTimer, X
	BEQ NinjaDodge_Poof1
	INC Objects_SlowTimer, X
	JMP Object_Draw16x32Killed
	RTS

NinjaDodge_Poof1:
	
	LDA #OBJSTATE_NORMAL
	STA Objects_State, X

	JSR SpecialObject_FindEmpty
	TYA
	BMI NinjaDodge_Poof2

	LDA #SOBJ_POOF
	STA SpecialObj_ID,Y

	; SpecialObj_Data = $1F
	LDA #$1f
	STA SpecialObj_Data,Y

	LDA #SOBJ_POOF
	STA SpecialObj_ID, Y
	LDA #$20	 
	STA SpecialObj_Data, Y
	
	LDA Objects_XZ, X
	STA SpecialObj_X, Y
	LDA Objects_YZ, X
	ADD #$04
	STA SpecialObj_Y, Y
	LDA Objects_YHiZ, X
	ADC #$00
	STA SpecialObj_YHi, Y

	JSR SpecialObject_FindEmpty
	TYA
	BMI NinjaDodge_Poof2

	LDA #SOBJ_POOF
	STA SpecialObj_ID,Y

	; SpecialObj_Data = $1F
	LDA #$1f
	STA SpecialObj_Data,Y

	LDA #SOBJ_POOF
	STA SpecialObj_ID, Y
	LDA #$20	 
	STA SpecialObj_Data, Y
	
	LDA Objects_XZ, X
	STA SpecialObj_X, Y
	LDA Objects_YZ, X
	ADD #$14
	STA SpecialObj_Y, Y
	LDA Objects_YHiZ, X
	ADC #$00
	STA SpecialObj_YHi, Y

NinjaDodge_Poof2:
	LDA Objects_Data3, X
	BNE NinjaPoof_Adjust_0

	LDA TempA
	BNE NinjaPoof_Left

NinjaPoof_Right:
	LDA Objects_XZ, X
	ADD #$50
	STA Objects_XZ, X
	LDA Objects_XHiZ, X
	ADC #$00
	STA Objects_XHiZ, X
	BNE NinjaPoof_Adjust

NinjaPoof_Left:
	LDA Objects_XZ, X
	SUB #$50
	STA Objects_XZ, X
	LDA Objects_XHiZ, X
	SBC #$00
	STA Objects_XHiZ, X

NinjaPoof_Adjust:
	LDA #$40
	STA Objects_SlowTimer, X
	JSR Object_DetectTileCenter
	LDA Objects_LastProp, X
	AND #TILE_PROP_SOLID_ALL
	BEQ NinjaPoof_Adjust1

NinjaPoof_Adjust_0:
	LDA Objects_YZ, X
	SUB #$40
	STA Objects_YZ, X
	LDA Objects_YHiZ, X
	SBC #$00
	STA Objects_YHiZ, X

NinjaPoof_Adjust1:
	LDA #$00
	STA Objects_Data3, X
	LDA #$00
	STA Sound_QPlayer
	LDA Sound_QLevel1
	ORA #SND_LEVELPOOF
	STA Sound_QLevel1
	RTS

ObjNorm_NinjaBro:
	LDA Objects_State, X
	CMP #OBJSTATE_KILLED
	BNE ObjNorm_NinjaBro_0
	JMP NinjaDodge_Poof

ObjNorm_NinjaBro_0:

	JSR Object_DeleteOffScreen	 ; Delete object if it falls off-screen
	JSR EnemyBro_DrawAndHandleBump	 ; Draw Ninja Bro and handle getting bumped underneath
	LDA Objects_PlayerHitStat, X
	BEQ ObjNorm_NinjaBro_1
	JSR  NinjaDodge_KillOrPoof

ObjNorm_NinjaBro_1:

	LDA <Player_HaltGameZ
	BEQ ObjNorm_NinjaBro_2	 ; If gameplay halted, jump to PRG004_A48F (RTS)
	RTS

ObjNorm_NinjaBro_2:

	JSR Object_Move	 ; Do standard movement
	LDA <Objects_TilesDetectZ,X
	AND #$04
	BEQ PRG004_A4B2	 ; If Ninja Bro has not hit ground, jump to PRG004_A4B2

	JSR Object_HitGround	 ; Align to ground

PRG004_A4B2:
	LDA <Counter_1
	AND #$0f
	BNE PRG004_A4C1	 ; 1:16 ticks proceed, otherwise jump to PRG004_A4C1

	JSR Object_QuickXDistanceFromPlayer

	; Face towards Player
	LDA NinjaBro_FacePlayerFlip,Y
	STA Objects_Orientation,X

PRG004_A4C1:

	LDA <Objects_Data2,X
	AND #$03	; 0-3 based on Var5 for internal state

	JSR DynJump

	; THESE MUST FOLLOW DynJump FOR THE DYNAMIC JUMP TO WORK!!
	.word NinjaBro_WalkThenStop
	.word NinjaBro_WalkRight
	.word NinjaBro_WalkThenStop
	.word NinjaBro_WalkLeft

NinjaBro_WalkThenStop:
	LDA Objects_Timer3,X	 
	BNE PRG004_A4DC	 ; If timer 3 is not expired, jump to PRG004_A4DC

	INC <Objects_Data2,X	 ; Var5++ (next internal state)

	; Reload timer3 at $40
	LDA #$40
	STA Objects_Timer3,X

PRG004_A4DC:

	; Halt horizontal movement
	LDA #$00
	STA <Objects_XVelZ,X

	RTS		 ; Return

NinjaBro_NoWalk:
	LDA #$00
	BEQ PRG004_A4E7

NinjaBro_WalkLeft:
	LDA <Objects_TilesDetectZ, X
	AND #HIT_LEFTWALL
	BNE NinjaBro_NoWalk
	LDA #-$08	 ; A = -$08
	BNE PRG004_A4E7	 ; Jump (technically always) to PRG004_A4E7

NinjaBro_WalkRight:
	LDA <Objects_TilesDetectZ, X
	AND #HIT_RIGHTWALL
	BNE NinjaBro_NoWalk
	LDA #$08	 ; A = $08

PRG004_A4E7:
	STA <Objects_XVelZ,X	 ; Set X Velocity

	; Var4 += 2
	INC <Objects_Data1,X
	INC <Objects_Data1,X

	LDA <Counter_1
	BNE PRG004_A4FA	 ; 1:256 ticks proceed, otherwise jump to PRG004_A4FA

	LDA RandomN,X
	BPL PRG004_A4FA	 ; 50/50 chance to jump to PRG004_A4FA

	; Little jump
	LDA #-$30
	STA <Objects_YVelZ,X

PRG004_A4FA:
	LDA Objects_Timer3,X
	BNE PRG004_A506	 ; If timer3 not expired, jump to PRG004_A506

	INC <Objects_Data2,X	 ; Var5++ (next internal state)

	; Reload timer3 with $10
	LDA #$10
	STA Objects_Timer3,X

PRG004_A506:
	LDA Objects_Data6,X
	INC Objects_Data6,X	; Var6++
	AND #$bf
	CMP #$1f
	BNE PRG004_A51A	 ; Periodically jump to PRG004_A51A (RTS)

	; Reload timer with $0F
	LDA #$0f
	STA Objects_Timer,X

	JSR NinjaBro_ThrowNinjaStar	 ; Throw a Ninja

PRG004_A51A:
	RTS		 ; Return

HammerBro_JumpYVel:	.byte -$30, $00, -$60
HammerBro_TimerReload:	.byte $28, $00, $20
PRG004_A522:	.byte $01, $00, $FF

HammerBro_FacePlayerFlip:
	.byte SPR_HFLIP, $00
	
ObjNorm_HammerBro: 
	JSR Object_DeleteOffScreen	 ; Delete object if it falls off-screen

	JSR Object_QuickXDistanceFromPlayer

	; Face Player
	LDA HammerBro_FacePlayerFlip,Y
	STA Objects_Orientation,X

	LDA <Player_HaltGameZ
	BEQ PRG004_A539	 ; If gameplay is halted, jump to PRG004_A539

	JMP EnemyBro_DrawAndHandleBump	 ; Otherwise, jump to EnemyBro_DrawAndHandleBump

PRG004_A539:
	INC <Objects_Data2,X	 ; Var5++

	LDY #$06	 ; Y = $06

	LDA <Objects_Data2,X
	AND #$40
	BNE PRG004_A545	 ; 64 ticks on, 64 ticks off; jump to PRG004_A545

	LDY #-$06	 ; Y = -$06

PRG004_A545;
	STY <Objects_XVelZ,X	 ; Hammer Bros walk back and forth

	LDA <Objects_TilesDetectZ,X
	AND #$04
	BNE PRG004_A551	 ; If Hammer Bro hit ground, jump to PRG004_A551

	STA <Objects_Data1,X	 ;  Var4 = 0
	BEQ PRG004_A587	 ; Jump (technically always) to PRG004_A587

PRG004_A551:
	LDA Object_VertTileProp
	CMP #(TILE_PROP_SOLID_ALL | TILE_PROP_ENEMYSOLID)
	BNE PRG004_A552
	
	LDA #$00
	STA Objects_Timer2,X

PRG004_A552:
	LDA Objects_Timer2,X
	BNE PRG004_A587	 ; If timer2 is not expired, jump to PRG004_A587

	INC <Objects_Data1,X	 ; Var4++
	JSR Object_HitGround	 ; Align to ground

	LDA Objects_Timer3,X
	BNE PRG004_A587	 ; if timer3 is not expired, jump to PRG004_A587

	LDA RandomN,X
	AND #$3e
	ADC #$c0
	STA Objects_Timer3,X	 ; Timer3 = $C0 to $FF

	LDY #$02	 ; Y = $02

	LDA <Objects_YZ,X
	BMI PRG004_A57C	 ; If Hammer Bro is on the lower part of the screen, jump to PRG004_A57C

	LDY #$00	 ; Y = 0

	CMP #$30
	BLT PRG004_A57C	 ; If Hammer Bro Y < $30, jump to PRG004_A57C

	LDA RandomN,X
	AND #$02
	TAY		 ; Y = 0 or 2, random

PRG004_A57C:
	; Jump!
	LDA HammerBro_JumpYVel,Y
	STA <Objects_YVelZ,X

	; Timer2 reload
	LDA HammerBro_TimerReload,Y
	STA Objects_Timer2,X

PRG004_A587:
	JSR Object_Move	 ; Do standard movement

	LDA <Counter_1
	AND #$07
	BEQ PRG004_A593	 ; 1:8 ticks jump to PRG004_A593

	INC Objects_Data6,X	 ; Var6++

PRG004_A593:
	LDY #$3f	 ; Y = $3F

	LDA <Objects_TilesDetectZ,X
	AND #$04
	BEQ PRG004_A59D	 ; If Hammer Bro did not hit floor, jump to PRG004_A59D

	LDY #$1f	 ; Y = $1F

PRG004_A59D:
	TYA	

	AND Objects_Data6,X	; Mask with 'Y'

	CMP #$1f
	BNE EnemyBro_DrawAndHandleBump	 ; If masked value <> $1F, jump to EnemyBro_DrawAndHandleBump

	LDA Objects_Timer,X
	BNE EnemyBro_DrawAndHandleBump	 ; If timer is not expired, jump to EnemyBro_DrawAndHandleBump

	; Timer set to $0F
	LDA #$0f
	STA Objects_Timer,X

	JSR HammerBro_ThrowHammer	 ; Throw Hammer at Player

EnemyBro_DrawAndHandleBump:
	LDY #$00	 ; Y = 0

	LDA <Objects_Data1,X
	AND #$10
	BEQ PRG004_A5BB	 ; 16 ticks on, 16 ticks off; jump to PRG004_A5BB

	INY		 ; Y = 1

PRG004_A5BB:
	LDA Objects_Timer,X
	BEQ PRG004_A5C2	 ; If timer is expired, jump to PRG004_A5C2

	; Y += 2
	INY
	INY

PRG004_A5C2:

	; Set Frame 0-3
	TYA
	STA Objects_Frame,X

	LDA <Objects_YZ,X
	PHA		 ; Save Hammer Bro Y
 
	ADD #$08
	STA <Objects_YZ,X ; Hammer Bro Y += 8

	LDA <Objects_YHiZ,X
	PHA		 ; Save Y Hi

	ADC #$00	 ; Apply carry
	STA <Objects_YHiZ,X	 ; Update Y Hi

	JSR Object_Draw16x32Sprite	 ; Draw Hammer Bro

	PLA		 
	STA <Objects_YHiZ,X	; Restore Y Hi

	PLA
	STA <Objects_YZ,X	; Restore Y

	JSR Object_CalcSpriteXY_NoHi

	JMP Object_HandleBumpUnderneath	 ; (Indirectly) Handle getting bumped underneath


Hammer_XVel:	.byte $12, -$12

HammerBro_ThrowHammer:
	LDA Objects_SpritesHorizontallyOffScreen,X	 
	BNE PRG004_A61B	 ; If any sprite is horizontally off-screen, jump to PRG004_A61B (RTS)

	LDA Objects_SpritesVerticallyOffScreen,X	 
	AND #$07
	BNE PRG004_A61B

	LDY #$05	 ; Y = 5
PRG004_A5ED:
	LDA SpecialObj_ID,Y
	BEQ PRG004_A5F6	 ; If this Special Object slot is empty, jump to PRG004_A5F6

	DEY		 ; Y--
	BPL PRG004_A5ED	 ; While Y >= 0, loop!

	RTS		 ; Return

PRG004_A5F6:

	; Set Hammer X/Y at Hammer Bro's position
	LDA <Objects_XZ,X
	STA SpecialObj_X,Y
	LDA <Objects_YZ,X
	STA SpecialObj_Y,Y
	LDA <Objects_YHiZ,X
	STA SpecialObj_YHi,Y

	; Hammer Y velocity = -$30
	LDA #-$30
	STA SpecialObj_YVel,Y

	STY <Temp_Var1		 ; Temp_Var1 = Special Object slot index

	JSR Object_QuickXDistanceFromPlayer

	LDA Hammer_XVel,Y	; Hammer towards Player X Vel
	LDY <Temp_Var1		 ; Y = Special Object slot index
	STA SpecialObj_XVel,Y	 ; Set X Velocity

	LDA #SOBJ_HAMMER ; Hammer Bro hammer
	BNE PRG004_A658	 ; Jump (technically always) to PRG004_A658

PRG004_A61B:
	RTS		 ; Return

NinjaStarTimers:
	.byte $40, $80, $C0, $80, $40, $40, $80, $C0

NinjaBro_ThrowNinjaStar:	
	JSR SpecialObject_FindEmptyAbort	; Find an empty special object slot or don't come back!

	LDA #SOBJ_NINJASTAR
	STA SpecialObj_ID,Y

	; Set Boomerang at Boomerang Bro's position
	LDA <Objects_XZ,X
	STA SpecialObj_X,Y
	LDA <Objects_YZ,X
	STA SpecialObj_Y,Y
	LDA <Objects_YHiZ,X 
	STA SpecialObj_YHi,Y
	JSR Object_CalcHomingVels
	
	LDA Objects_TargetingYVal, X
	ASL A
	STA SpecialObj_YVel, Y
	LDA Objects_TargetingXVal, X
	ASL A
	STA SpecialObj_XVel, Y

	RTS		 ; Return

PRG004_A658:
	STA SpecialObj_ID,Y	 ; Set Special Object ID

	; Pushes Hammer Bro's object index into SpecialObj_Data upper 4 bits, sets lower 4 bits to $0F
	TXA
	ASL A
	ASL A
	ASL A
	ASL A
	ORA #$0f
	STA SpecialObj_Data,Y

	; SpecialObj_Var1 = 0
	LDA #$00
	STA SpecialObj_Var1,Y

	RTS		 ; Return
ObjInit_Thwomp:

	; Var4 = origin Y
	LDA <Objects_YZ,X
	STA <Objects_Data1,X
	LDA #$03
	STA Objects_Data6, X
	
Thwomp_Center:
	; center the X
	LDA <Objects_XZ,X
	ADD #$04
	STA <Objects_XZ,X
	LDA <Objects_XHiZ,X
	ADD #$00
	STA <Objects_XHiZ,X

PRG004_A676:
	RTS		 ; Return


ObjNorm_Thwomp:
	JSR Thwomp_Draw	 ; Draw Thwomp; if not in normal state, we don't come back!

	LDA <Player_HaltGameZ
	BNE PRG004_A676	 ; If gameplay halted, jump to PRG004_A676 (RTS)

	JSR Object_DeleteOffScreen	; Delete object if it falls off-screen
	JSR Object_AttackOrDefeat	 	; Do Player to Thwomp collision

	LDA <Objects_Data2,X	 ; Var5 is internal state
	JSR DynJump

	; THESE MUST FOLLOW DynJump FOR THE DYNAMIC JUMP TO WORK!!
	.word Thwomp_WaitForPlayer
	.word Thwomp_FallToGround
	.word Thwomp_ReturnToOrigin

Thwomp_WaitForPlayer
	
	LDA Objects_SpritesHorizontallyOffScreen,X
	ORA Objects_SpritesVerticallyOffScreen,X
	BNE PRG004_A6A6	 ; If any sprite is off-screen, jump to PRG004_A6A6 (RTS)

	JSR Object_QuickXDistanceFromPlayer

	LDA <Temp_Var16
	ADD #$24
	CMP #$50
	BGE PRG004_A6A6	 ; If Player is too far away, jump to PRG004_A6A6 (RTS)

	INC <Objects_Data2,X	 ; Var5++ (next internal state)

	; Stop Thwomp's vertical movement
	LDA #$00
	STA <Objects_YVelZ,X

PRG004_A6A6:
	RTS		 ; Return

Thwomp_FallToGround:
	JSR Object_ApplyYVel_NoGravity	 ; Apply Y Velocity
 
	LDA <Objects_YVelZ,X
	CMP #$70
	BGE PRG004_A6B4	 ; If Thwomp is falling >= $70, jump to PRG004_A6B4

	; Thwomp fall Y Vel += 4
	ADC #$04
	STA <Objects_YVelZ,X

PRG004_A6B4:
	LDA Objects_Data6, X
	BEQ PRG004_A6B5
	JMP ThwompDetectLeftBlock

PRG004_A6B5:
	JSR Object_HitGround	 ; Align to floor

	; Shake floor!
	LDA #$18
	STA Level_Vibration

	; Ba-bam! sound
	LDA Sound_QLevel1
	ORA #SND_LEVELBABOOM
	STA Sound_QLevel1

	; Set timer to $40
	LDA #$40
	STA Objects_Timer,X
	LDA #$03
	STA Objects_Data6, X

	LDA #$10
	STA Objects_Timer, X
	INC <Objects_Data2,X	 ; Var5++ (next internal state)

PRG004_A6D4:
	RTS		 ; Return

Thwomp_ReturnToOrigin:
	LDA Objects_Timer,X 
	BNE PRG004_A6EC	 ; If timer is not expired, jump to PRG004_A6EC (RTS)

	LDA <Objects_YZ,X
	CMP <Objects_Data1,X
	BNE PRG004_A6E5	 ; If Thwomp has not returned to his origin Y, jump to PRG004_A6E5

	; Var5 = 0 (return to original internal state)
	LDA #$00
	STA <Objects_Data2,X

	RTS		 ; Return

PRG004_A6E5:
	; Set Thwomp Y velocity to -$10
	LDA #-$10
	STA <Objects_YVelZ,X

	JSR Object_ApplyYVel_NoGravity	 ; Apply Y velocity

PRG004_A6EC:
	RTS		 ; Return


Thwomp_Draw:

	; Clear any flip
	LDA #$00 
	STA Objects_Orientation,X

	JSR Object_Draw16x32Sprite	 ; Draw left 2/3 of Thwomp

	LDA Objects_SpritesHorizontallyOffScreen,X
	AND #$20
	BNE PRG004_A737	 ; If sprite is not visible, jump to PRG004_A737

	LDY Object_SpriteRAM_Offset,X	 ; Y = Sprite_RAM offset

	; The right sprites appear +16 away from Thwomp's left
	LDA <Objects_SpriteX,X
	ADD #16
	STA Sprite_RAM+$13,Y
	STA Sprite_RAM+$17,Y

	; Temp_Var1 = vertical visibility bits
	LDA Objects_SpritesVerticallyOffScreen,X
	STA <Temp_Var1	

	LDA <Objects_SpriteY,X

	LSR <Temp_Var1
	BCS PRG004_A718	 ; If sprite is vertically off-screen, jump to PRG004_A718

	STA Sprite_RAM+$10,Y	 ; Set upper Sprite Y

PRG004_A718:
	LSR <Temp_Var1
	BCS PRG004_A722	 ; If sprite is vertically off-screen, jump to PRG004_A722

	ADD #16
	STA Sprite_RAM+$14,Y	 ; Set lower Sprite Y

PRG004_A722:

	; Right sprite horizontally flipped
	LDA Sprite_RAM+$02,Y
	ORA #SPR_HFLIP
	STA Sprite_RAM+$12,Y
	STA Sprite_RAM+$16,Y

	; Upper sprite pattern
	LDA #$b1
	STA Sprite_RAM+$11,Y

	; Lower sprite pattern
	LDA #$bb
	STA Sprite_RAM+$15,Y

PRG004_A737:
	LDA Objects_State,X
	CMP #OBJSTATE_NORMAL
	BEQ PRG004_A740	 ; If Thwomp's state is Normal, jump to PRG004_A740 (RTS)

	; If Thwomp is in normal state, don't return to caller!
	PLA
	PLA

PRG004_A740:
	RTS		 ; Return

ObjInit_HyperThwomp:
	LDA Objects_Property, X
	STA Objects_Data2, X
	LDA #$03
	STA Objects_Data6, X
	JSR Thwomp_Center
	RTS

ObjNorm_HyperThwomp:
	JSR Object_DeleteOffScreen
	JSR Thwomp_Draw	 ; Draw Thwomp

	LDA Objects_Timer, X
	BNE PRG004_A78B

	LDA <Player_HaltGameZ
	BNE PRG004_A78B	 ; If gameplay is halted, jump to PRG004_A78B (RTS)

		 ; Delete if falls off-screen
	JSR Object_AttackOrDefeat	 ; Do Player to Thwomp collision detection
	
	LDA Objects_YVelZ, X
	BNE PRG004_A78A

	LDA Objects_SpritesHorizontallyOffScreen,X
	ORA Objects_SpritesVerticallyOffScreen,X
	BNE PRG004_A78B

	JSR Object_QuickXDistanceFromPlayer

	LDA <Temp_Var16
	ADD #$24
	CMP #$60
	BGE PRG004_A78B

PRG004_A78A:
	LDA <Objects_Data2, X
	BNE ObjThwomp_FallToCeiling
	JSR Thwomp_FallToGround

PRG004_A78B:
	RTS		 ; Return

ObjThwomp_FallToCeiling:
	JSR Object_ApplyYVel_NoGravity	 ; Apply Y Velocity
 
	LDA <Objects_YVelZ,X
	BEQ FallAnyways
	CMP #$90
	BCC NoDecVel	 ; If Thwomp is falling >= $70, jump to PRG004_A6B4

FallAnyways:
	; Thwomp fall Y Vel += 4
	SBC #$04
	STA <Objects_YVelZ,X

NoDecVel:
	LDA Objects_Data6, X
	BEQ ObjThwomp_FallToCeiling1
	JMP ThwompDetectLeftBlock

ObjThwomp_FallToCeiling1:
	JSR Object_HitCeiling
	LDA #$18
	STA Level_Vibration

	; Ba-bam! sound
	LDA Sound_QLevel1
	ORA #SND_LEVELBABOOM
	STA Sound_QLevel1

	; Set timer to $40
	LDA #$40
	STA Objects_Timer,X
	LDA #$03
	STA Objects_Data6, X

	LDA #$10
	STA Objects_Timer, X
	DEC <Objects_Data2,X	 ; Var5++ (next internal state)

EndQuickRise:
	RTS		 ; Return
	; Values for OBJ_THWOMPUPDOWN, OBJ_THWOMPDIAGONALUL, OBJ_THWOMPDIAGONALDL, respectively
ObjInit_ThwompUDSlide:
	RTS


ObjNorm_ThwompVertical:
;	JSR Thwomp_Draw		; Draw Thwomp
;	 
;	LDA <Player_HaltGameZ
;	BNE PRG004_A831	 ; If gameplay is halted, jump to PRG004_A831 (RTS)
;
;	JSR Object_DeleteOffScreen_N2	 ; Delete if Thwomp falls off-screen
;	JSR Object_AttackOrDefeat	 ; Do Player to Thwomp collision
;
;	LDA <Objects_Data2,X	 ; Var5 is internal state
;	AND #$03	 	; Limit 0-3
;
;	JSR DynJump
;
;	; THESE MUST FOLLOW DynJump FOR THE DYNAMIC JUMP TO WORK!!
;	.word ThwompVert_Reverse
;	.word ThwompVert_Slide
;	.word ThwompVert_Reverse
;	.word ThwompVert_Slide
;
;ThwompVert_Reverse:
;	LDA Objects_Timer,X
;	BNE PRG004_A81E	 ; If timer not expired, jump to PRG004_A81E (RTS)
;
;	; Thwomp turns around...
;
;	; Negate X velocity
;	LDA <Objects_XVelZ,X
;	JSR Negate
;	STA <Objects_XVelZ,X
;
;	; Negate Y velocity
;	LDA <Objects_YVelZ,X
;	JSR Negate
;	STA <Objects_YVelZ,X
;
;	INC <Objects_Data2,X	 ; Var5++ (next internal state)
;
;	; Set timer to $80
;	LDA #$80
;	STA Objects_Timer,X
;
;PRG004_A81E:
;	RTS		 ; Return
;
;ThwompVert_Slide:
;	LDA Objects_Timer,X
;	BNE PRG004_A82B	 ; If timer not expired, jump to PRG004_A82B
;
;	INC <Objects_Data2,X	 ; Var5++
;
;	; Set timer to $3C
;	LDA #$3c
;	STA Objects_Timer,X
;
;PRG004_A82B:
;	JSR Object_ApplyXVel	 	; Apply X velocity
;	JSR Object_ApplyYVel_NoGravity	; Apply Y velocity
;
;PRG004_A831:
	RTS		 ; Return

OrangeCheep_Accel:	.byte $01, $FF
OrangeCheep_Limit:	.byte $10, $F0

ObjNorm_OrangeCheep:

	; ########################################
	; ##################          ############
	; ############      LLLLLLLLLLLL##########
	; ############      LLLLLLLLLLLL##########
	; ##########  LLLLLLLLLLLL      LL  ######
	; ##########LLLLLLLLLLLL                ##
	; ##        LLLLLLLLLLLL      ##  ##    ##
	;             LLLLLLLLLL      ##  ##    ##
	;             LLLLLLLLLL      ##  ##    ##
	;               LLLLLLLL                ##
	; ##            LLLLLLLLLL      LL  ######
	; ########LLLLLLLLLLLLLLLLLLLL##        ##
	; ##  LLLLLLLLLLLLLLLLLLLL####    ########
	; ##  LLLLLLLLLLLLLLLLLLLL####    ########
	; ##  LLLLLLLLLLLLLLLL  ##      ##########
	; ##      LLLLLL        ##      ##########
	; ##      ##LL            ####      ######
	; ##############              ############
	; ##############              ############
	; ########################################

	; The lost Orange Cheep...

	LDA <Player_HaltGameZ
	BNE PRG004_A870	 ; If gameplay is halted, jump to PRG004_A870

	LDA #$10	; A = $10

	LDY Objects_Orientation,X
	BNE PRG004_A843	 ; If Orange Cheep is flipped, jump to PRG004_A843

	LDA #-$10	 ; A = -$10

PRG004_A843:
	STA <Objects_XVelZ,X	 ; Set proper X velocity

	JSR Object_SetPaletteFromAttr	 ; Set Orange Cheep's palette
	JSR Object_DeleteOffScreen	 ; Delete object if it falls off-screen

	INC <Objects_Data2,X	 ; Var5++

	JSR Object_ApplyXVel	 ; Apply X Velocity
	JSR Object_ApplyYVel_NoGravity	 ; Apply Y Velocity

	LDA <Objects_Data2,X
	AND #$01
	BNE PRG004_A86D	 ; Every other tick, jump to PRG004_A86D

	LDA <Objects_Data1,X
	AND #$01
	TAY		 ; Y = 0 or 1 (vertical direction)

	; Accelerate!
	LDA <Objects_YVelZ,X
	ADD OrangeCheep_Accel,Y
	STA <Objects_YVelZ,X

	CMP OrangeCheep_Limit,Y
	BNE PRG004_A86D	 ; If Orange Cheep is not at his limit, jump to PRG004_A86D

	INC <Objects_Data1,X	 ; Change direction

PRG004_A86D: 
	JSR Object_AttackOrDefeat	 ; Do Player to Orange Cheep collision detection

PRG004_A870:

	; Toggle frame 0/1
	LDA <Objects_Data2,X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame,X

	JSR Object_FlipByXVel	 ; Flip based on horizontal travel direction
	JMP GroundTroop_DrawNormal	 ; Draw and don't come back!

ObjInit_FireBro:

	; Var6 = random value
	LDA RandomN,X
	STA Objects_Data6,X

	; Var7 = $90
	LDA #$90
	STA Objects_Data3,X

ObjInit_OrangeCheep:
	RTS		 ; Return

FireBro_FacePlayerFlip:	.byte SPR_HFLIP, $00

ObjNorm_FireBro: 
	JSR Object_DeleteOffScreen	 ; Delete object if it falls off-screen

	JSR Object_QuickXDistanceFromPlayer

	; Fire Bro faces Player
	LDA FireBro_FacePlayerFlip,Y
	STA Objects_Orientation,X

	INC Objects_Data3,X	; Var7++

	LDA Objects_Data3,X
	CMP #$a0
	BNE PRG004_A8B9	 ; If Var7 <> $A0, jump to PRG004_A8B9

	; Var7 = $A0...

	; Reset Var7	
	LDA #$00
	STA Objects_Data3,X

	LDA #$50	 ; A = $50

	LDY RandomN,X
	BPL PRG004_A8B2	 ; 50/50 chance we jump toPRG004_A8B2

	LDA #$30	 ; A = $30

PRG004_A8B2:
	STA Objects_Timer,X	 ; Set timer

	; X Velocity = 0
	LDA #$00
	STA <Objects_XVelZ,X

PRG004_A8B9:
	LDY #$00	 ; Y = 0

	LDA Objects_Data3,X
	AND #$08
	BEQ PRG004_A8C3	 ; 8 ticks on, 8 ticks off; jump to PRG004_A8C3

	INY		 ; Y = 1

PRG004_A8C3:
	LDA Objects_Timer,X
	BEQ PRG004_A8DD	 ; If timer expired, jump to PRG004_A8DD

	CMP #$20
	BNE PRG004_A8DB	 ; If timer <> $20, jump to PRG004_A8DB

	; Timer = $20...

	LDA RandomN,X
	BMI PRG004_A8DB	 ; 50/50 chance we jump to PRG004_A8DB

	LDA <Objects_TilesDetectZ,X
	AND #$04
	BEQ PRG004_A8DB	 ; If Fire Bro has not hit floor, jump to PRG004_A8DB

	; Jump!
	LDA #-$38
	STA <Objects_YVelZ,X

PRG004_A8DB:
	LDY #$02	 ; Y = 2

PRG004_A8DD:
	TYA	
	STA Objects_Frame,X	 ; Set frame 0 to 2

	LDA <Objects_YZ,X
	PHA		 ; Save Object Y

	ADD #$08
	STA <Objects_YZ,X	 ; Object Y += 8

	LDA <Objects_YHiZ,X
	PHA		 ; Save Object Y Hi

	ADC #$00
	STA <Objects_YHiZ,X	 ; Apply carry

	JSR Object_Draw16x32Sprite	 ; Draw sprite

	; Restore Y/Hi
	PLA
	STA <Objects_YHiZ,X
	PLA
	STA <Objects_YZ,X

	JSR Object_CalcSpriteXY_NoHi

	LDA <Player_HaltGameZ
	BNE PRG004_A92C	 ; If gameplay is halted, jump to PRG004_A92C (RTS)

	JSR Object_HandleBumpUnderneath	 ; Handle getting bumped from underneath
	JSR Object_InteractWithPlayer

	LDA Objects_Timer,X
	CMP #$40
	BGE PRG004_A913	 ; If timer >= $40, jump to PRG004_A913

	AND #$1f
	CMP #$0f
	BNE PRG004_A913	 ; Periodically jump to PRG004_A913

	LDA Objects_ID, X
	CMP #OBJ_PIRATEBRO
	BNE SpitFireIce
	JSR PirateBro_SpitCannon
	JMP PRG004_A913

SpitFireIce:
	JSR FireBro_SpitFire	 ; Spit fire at Player

PRG004_A913:
	LDA Objects_Timer,X
	BNE PRG004_A91C

	LDA <Objects_Data2,X
	BEQ PRG004_A92D	 ; If Var5 = 0, jump to PRG004_A92D

PRG004_A91C:
	JSR Object_Move	 ; Do standard movements

	LDA <Objects_TilesDetectZ,X
	AND #$04
	BEQ PRG004_A92C	 ; If Fire Bro hasn't hit floor, jump PRG004_A92C (RTS)

	; Var5 = 0
	LDA #$00
	STA <Objects_Data2,X

	JSR Object_HitGround	 ; Align to floor

PRG004_A92C:
	RTS		 ; Return


PRG004_A92D:
	LDA Objects_Data4,X
	BEQ PRG004_A935	 ; If Var1 = 0, jump to PRG004_A935

	DEC Objects_Data4,X	 ; Var1--

PRG004_A935:
	INC Objects_Data6,X	 ; Var6++

	LDA Objects_Data6,X
	AND #$1f
	BNE PRG004_A957	 ; 1:32 ticks proceed, otherwise jump to PRG004_A957

	LDA RandomN,X
	AND #$01
	BNE PRG004_A957	 ; 50/50 chance we jump to PRG004_A957

	LDA <Objects_TilesDetectZ,X
	AND #$04
	BEQ PRG004_A957	 ; If Fire Bro has not hit floor, jump to PRG004_A957

	INC <Objects_Data2,X	 ; Var5++

	; Fire Bro jumps!
	LDA #-$28
	STA <Objects_YVelZ,X

	; Halt horizontal movement
	LDA #$00
	STA <Objects_XVelZ,X

	RTS		 ; Return

PRG004_A957:
	LDA <Objects_Data1,X
	AND #$03	 ; Var4 masked 0-3, internal state

	JSR DynJump

	; THESE MUST FOLLOW DynJump FOR THE DYNAMIC JUMP TO WORK!!
	.word FireBro_WalkLeft
	.word FireBro_WaitState
	.word FireBro_WalkRight
	.word FireBro_WaitState

FireBro_WalkLeft:
	LDA Objects_Data4,X
	BNE PRG004_A972	 ; If Var1 <> 0, jump to PRG004_A972

	INC <Objects_Data1,X	 ; Var4++ (next internal state)

	; Var1 = $10
	LDA #$10
	STA Objects_Data4,X

PRG004_A972:

	; X Velocity = -$08 (walk left)
	LDA #-$08
	STA <Objects_XVelZ,X

	JMP PRG004_A998	 ; Jump to PRG004_A998

FireBro_WaitState:
	LDA Objects_Data4,X	 
	BNE PRG004_A985	 ; If Var1 <> 0, jump to PRG004_A985

	INC <Objects_Data1,X	 ; Var4++ (next internal state)

	; Var1 = $20
	LDA #$20
	STA Objects_Data4,X

PRG004_A985:
	JMP PRG004_A9B1	 ; Jump to PRG004_A9B1

FireBro_WalkRight:
	LDA Objects_Data4,X	 
	BNE PRG004_A994	 ; If Var1 <> 0, jump to PRG004_A994

	INC <Objects_Data1,X	 ; Var4++ (next internal state)

	; Var1 = $10
	LDA #$10
	STA Objects_Data4,X

PRG004_A994:

	; X Velocity = $08 (walk right)
	LDA #$08
	STA <Objects_XVelZ,X

PRG004_A998:
	LDA Objects_Data4,X
	AND #$3f
	BNE PRG004_A9B1	 ; 1:64 ticks proceed, otherwise jump to PRG004_A9B1

	LDA Objects_Data4,X
	AND #$40

	; Something removed...
	NOP
	NOP
	NOP

	ASL A
	ASL A
	LDA #-$20	 ; A = -$20

	BCC PRG004_A9AF	 ; 64 ticks on, 64 ticks off; jump to PRG004_A9AF

	LDA #-$28	 ; A = -$28

PRG004_A9AF:
	STA <Objects_YVelZ,X	 ; Set jump velocity

PRG004_A9B1:
	JSR Object_Move	 ; Do standard movements

	LDA <Objects_TilesDetectZ,X
	AND #$04
	BEQ PRG004_A9C0	 ; If Fire Bro has not hit floor, jump to PRG004_A9C0

	INC Objects_Data3,X	 ; Var3++

	JSR Object_HitGround	 ; Align to ground

PRG004_A9C0:
	RTS		 ; Return

FireBro_FireballXVel:	.byte $20, -$20
IceBro_FireballXVel:	.byte $18, -$18

FireBro_SpitFire:
	JSR SpecialObject_FindEmptyAbort	; Find an empty special object slot or don't come back

	; Fireball sound!
	LDA Sound_QPlayer
	ORA #SND_PLAYERFIRE
	STA Sound_QPlayer

	; Fireball at X + 4
	LDA <Objects_XZ,X
	ADD #$04
	STA SpecialObj_X,Y

	; Fireball at Y + 3
	LDA <Objects_YZ,X
	ADD #$03
	STA SpecialObj_Y,Y
	LDA <Objects_YHiZ,X
	ADC #$00
	STA SpecialObj_YHi,Y

	; Fireball Y Vel
	LDA #$20
	STA SpecialObj_YVel,Y

	STY <Temp_Var1		 ; Special object slot index -> Temp_Var1

	JSR Object_QuickXDistanceFromPlayer

	; Spit fire towards Player!
	STY TempY
	LDA FireBro_FireballXVel,Y
	LDY <Temp_Var1		; Y = special object slot
	STA SpecialObj_XVel,Y

	LDA Objects_ID,X
	CMP #OBJ_ICEBRO
	BNE Fire_Bros_FBall
	LDY TempY
	LDA IceBro_FireballXVel,Y
	LDY <Temp_Var1
	STA SpecialObj_XVel,Y
	LDA #SOBJ_ICEBALL
	BNE Store_SObject

	; Fire bro bouncing fireball
Fire_Bros_FBall:
	LDA #SOBJ_FIREBALL

Store_SObject:
	STA SpecialObj_ID,Y

	; Data = 0
	LDA #$00
	STA SpecialObj_Var1, Y
	STA SpecialObj_Data,Y

	RTS		 ; Return

ObjInit_IceBro:

	RTS		 ; Return

Pirate_CannonX:
	.byte $30, -$30
Pirate_CannonxPos:
	.byte $00, -$08

PirateBro_SpitCannon:
	JSR SpecialObject_FindEmptyAbort	; Find an empty special object slot or don't come back

	; Fireball sound!
	LDA Sound_QLevel1
	ORA #SND_LEVELBABOOM
	STA Sound_QLevel1

	; Fireball at Y + 3
	LDA <Objects_YZ,X
	ADD #$0B
	STA SpecialObj_Y,Y
	LDA <Objects_YHiZ,X
	ADC #$00
	STA SpecialObj_YHi,Y

	; Fireball Y Vel
	LDA #$00
	STA SpecialObj_YVel,Y

	STY <Temp_Var1		 ; Special object slot index -> Temp_Var1

	JSR Object_QuickXDistanceFromPlayer

	STY DAIZ_TEMP1
	; Spit fire towards Player!
	LDA Pirate_CannonX,Y
	LDY <Temp_Var1		; Y = special object slot
	STA SpecialObj_XVel,Y

	LDY DAIZ_TEMP1
	LDA <Objects_XZ,X
	ADD Pirate_CannonxPos, Y
	LDY <Temp_Var1
	STA SpecialObj_X,Y
	

	LDA #SOBJ_CANNONBALL
	STA SpecialObj_ID,Y

	; Data = 0
	LDA #$00
	STA SpecialObj_Data,Y
	RTS

Giant_HVisBit:	.byte $20, $80	; Not horizontally flipped, horizontally flipped
Giant_HXOff:	.byte $10, $00	; Not horizontally flipped, horizontally flipped

SpinyEggDud_FlipTowardsPlayer:	.byte SPR_HFLIP, $00

ObjNorm_SpinyEggDud:
	LDA <Player_HaltGameZ
	BNE PRG004_AC53	 ; If gameplay is halted, jump to PRG004_AC53

	LDA Objects_State,X
	CMP #OBJSTATE_NORMAL
	BNE PRG004_AC53	 ; If Spiny Egg Dud is not in state Normal, jump to PRG004_AC53

	JSR Object_DeleteOffScreen	 ; Delete object if it falls off-screen

	LDA Objects_InWater,X
	PHA		 ; Push "in water" flag

	JSR Object_Move	 ; Do standard movements

	PLA		 ; Pull "in water" flag...
	BNE PRG004_AC08	 ; If was in water before, jump to PRG004_AC08

	LDA Objects_InWater,X
	BEQ PRG004_AC08	 ; If not in water now, jump to PRG004_AC08

	; Otherwise, arithmetically shift X velocity to the right (signed divide by two)
	LDA <Objects_XVelZ,X
	ASL A
	ROR <Objects_XVelZ,X

PRG004_AC08:
	LDA <Objects_TilesDetectZ,X
	AND #$03
	BEQ PRG004_AC11	 ; If Spiny Egg Dud did not hit a wall, jump to PRG004_AC11

	JSR Object_Reverse	 ; Otherwise, turn around

PRG004_AC11:
	LDA <Objects_TilesDetectZ,X
	AND #$04
	BEQ PRG004_AC43	 ; If Spiny Egg Dud has not hit floor, jump to PRG004_AC43

	LDA <Objects_YVelZ,X
	PHA		 ; Save Y velocity

	JSR Object_HitGround	 ; Align to ground

	PLA		 ; Restore Y velocity
	CMP #$10
	BLS PRG004_AC38	 ; If Y velocity < $10, jump to PRG004_AC38

	LSR A		 ; Divide by 2

	; Something removed...
	NOP
	NOP

	NEG			; Negate (bounce)
	STA <Objects_YVelZ,X	 ; Set as Y velocity

	JSR Object_QuickXDistanceFromPlayer

	; Set towards Player
	LDA SpinyEggDud_FlipTowardsPlayer,Y
	STA Objects_Orientation,X

	JMP PRG004_AC43	; Jump to PRG004_AC43

PRG004_AC38:

	; Set velocity based on facing direction of egg
	LDA #$0c
	LDY Objects_Orientation,X
	BNE PRG004_AC41
	LDA #-$0C
PRG004_AC41:
	STA <Objects_XVelZ,X

PRG004_AC43:
	LDA <Objects_TilesDetectZ,X
	AND #$08
	BEQ PRG004_AC4D	 ; If egg has not hit ceiling, jump to PRG004_AC4D

	; Bounce off ceiling
	LDA #$10
	STA <Objects_YVelZ,X

PRG004_AC4D:
	JSR Object_HandleBumpUnderneath	 ; Handle getting bumped from underneath
	JSR Object_InteractWithPlayer
	;JSR GroundTroop_BumpOffOthers	 ; Bounce off other objects

PRG004_AC53:
	LDY #$00	 ; Y = 0

	LDA GameCounter
	AND #$08
	BEQ PRG004_AC5D	 ; 8 ticks on, 8 ticks off; jump to PRG004_AC5D

	INY		 ; Y = 1

PRG004_AC5D:
	TYA
	STA Objects_Frame,X	; Toggle frame 0/1

	JSR GroundTroop_DrawMirrored	 ; Draw Spiny Egg Dud

	; Anything but vertical flip
	LDA Sprite_RAM+$02,Y
	AND #~SPR_VFLIP
	STA Sprite_RAM+$02,Y

	; V+H flip
	ORA #$c0
	STA Sprite_RAM+$06,Y

	RTS		 ; Return

SpinyEgg_HatchFacePlayerFlip:	.byte SPR_HFLIP, $00

ObjNorm_SpinyEgg:
	LDA <Player_HaltGameZ
	BNE PRG004_ACCF	 ; If gameplay is halted, jump to PRG004_ACCF

	JSR Object_DeleteOffScreen	 ; Delete object if it falls off-screen

	; Toggle frame 0/1
	LDA <Counter_1
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame,X

	LDA Objects_InWater,X
	BEQ PRG004_AC99	 ; If egg is not in water, jump to PRG004_AC99

	; In water...

	LDA <Objects_XVelZ,X
	PHA		 ; Save X velocity

	ASL A		 ; Pushes sign bit into carry
	ROR <Objects_XVelZ,X	 ; Arithmetically shift to the right (signed divide by 2)
	JSR Object_Move	 ; Do movement

	PLA
	STA <Objects_XVelZ,X	 ; Restore X velocity

	JMP PRG004_ACAC	 ; Jump to PRG004_ACAC

PRG004_AC99:

	; Not in water...

	LDA <Objects_YVelZ,X
	CMP #$30
	BGS PRG004_ACA3	 ; If Y Velocity >= $30, jump to PRG004_ACA3

	; Otherwise, increase rate of fall 
	INC <Objects_YVelZ,X
	INC <Objects_YVelZ,X

PRG004_ACA3:
	JSR Object_ApplyYVel_NoGravity	 ; Apply Y velocity
	JSR Object_ApplyXVel	 ; Apply X velocity
	JSR Object_DetectTiles	 ; Detect against world

PRG004_ACAC:
	JSR Object_HandleBumpUnderneath	 ; Handle getting bumped underneath
	JSR Object_InteractWithPlayer

	LDA <Objects_TilesDetectZ,X
	AND #$04
	BEQ PRG004_ACCF	 ; If spiny egg not hit ground, jump to PRG004_ACCF

	; When egg hits ground, hatch into Spiny
	LDA #OBJ_SPINY
	STA Objects_ID,X

	JSR Object_QuickXDistanceFromPlayer

	; Face Player
	LDA SpinyEgg_HatchFacePlayerFlip,Y
	STA Objects_Orientation,X

	JSR Object_HitGround	 ; Align to ground

	LDA Objects_InWater,X
	BNE PRG004_ACCF	 ; If Spiny is not in water, jump to PRG004_ACCF

	; Otherwise, slowly fall into water
	LDA #-$0E
	STA <Objects_YVelZ,X

PRG004_ACCF:
	LDA <Objects_TilesDetectZ,X
	AND #$03
	BEQ PRG004_ACD8	 ; If Spiny did not hit wall, jump to PRG004_ACD8

	JSR Object_Reverse	 ; Otherwise, turn around

PRG004_ACD8:
	JSR GroundTroop_DrawMirrored	 ; Draw Spiny Egg

	; Vertically flip right hand sprite
	LDA Sprite_RAM+$06,Y
	ORA #SPR_VFLIP
	STA Sprite_RAM+$06,Y

	RTS		 ; Return

ObjInit_Lakitu:

	; Lakitu_Active = 1
	LDA #$01
	STA Lakitu_Active

	; Using Objects_TargetingYVal and Objects_TargetingXVal as original Y/Hi
	; Wish these guys could have been more consistent sometimes...
	LDA <Objects_YZ,X
	STA Objects_TargetingYVal,X
	LDA <Objects_YHiZ,X
	STA Objects_TargetingXVal,X

	LDA #OBJ_LAKITU
	STA Global_Object

	RTS		 ; Return


Lakitu_XVelAccel:	.byte $01, -$01
Lakitu_XVelLimit:	.byte $20, -$20

Lakitu_YOff:	.byte -15, -14, -15, -16

ObjNorm_Lakitu:
	LDA #$BD
	STA Objects_Data8, X

	LDA Objects_State,X
	CMP #OBJSTATE_NORMAL
	BEQ PRG004_AD59	 ; If Lakitu is in state Normal, jump to PRG004_AD59


	; Vertical flip
	LDA Objects_Orientation,X
	ORA #SPR_VFLIP
	STA Objects_Orientation,X

	JSR Object_DrawTallAndHFlip	 ; Draw Lakitu

	LDY Object_SpriteRAM_Offset,X	 ; Y = Sprite_RAM offset

	; Flip Lakitu himself vertically
	LDA #$83
	STA Sprite_RAM+$0A,Y
	LDA #$c3
	STA Sprite_RAM+$0E,Y

	LDA <Player_HaltGameZ
	BNE PRG004_AD58	 ; If gameplay is halted, jump to PRG004_AD58 (RTS)

	JSR Object_Move	 ; Do standard movement

	LDA Objects_InWater,X
	BNE PRG004_AD29	 ; If Lakitu is in water, jump to PRG004_AD29

	DEC <Objects_YVelZ,X	 ; YVel--

PRG004_AD29:
	LDA <Objects_YHiZ,X
	CMP #$02
	BLS PRG004_AD58	 ; If Lakitu is not too low yet, jump to PRG004_AD58 (RTS)

	; At this point, Lakitu has fallen off-screen...

	; Set Lakitu's X equal to two screens behind
	LDA <Horz_Scroll
	SUB #$00
	STA <Objects_XZ,X
	LDA <Horz_Scroll_Hi
	SBC #$02	; Two screens back
	STA <Objects_XHiZ,X

	; Reset Lakitu's state to Normal
	LDA #OBJSTATE_NORMAL
	STA Objects_State,X

	LDA Objects_TargetingYVal,X
	PHA		 ; Save Lakitu's original Y
	STA <Objects_YZ,X	; Restore Lakitu to original Y

	LDA Objects_TargetingXVal,X
	PHA		 ; Save Lakitu's original Y Hi
	STA <Objects_YHiZ,X	 ; Restore Lakitu's Y Hi

	; Reset Lakitu
	JSR Object_New

	; Restore the Y/Hi values
	PLA
	STA Objects_TargetingXVal,X
	PLA
	STA Objects_TargetingYVal,X

PRG004_AD58:
	RTS		 ; Return

PRG004_AD59:

	; Lakitu normal operation...
	LDA <Vert_Scroll
	ADD #$20
	STA Objects_YZ, X
	
	LDA #$00
	ADC #$00
	STA Objects_YHiZ, X

	LDA <Player_HaltGameZ
	BNE PRG004_ADC2	 ; If gameplay is halted, jump to PRG004_ADC2

	LDA Lakitu_Active
	BNE PRG004_AD65	 ; If Lakitu is active, jump to PRG004_AD65

	JSR Object_DeleteOffScreen	 ; Lakitu is leaving...

PRG004_AD65:
	JSR Object_AttackOrDefeat	 ; Do Player to Lakitu collision

	JSR Object_QuickXDistanceFromPlayer

	LDA Lakitu_Active
	BNE PRG004_AD74	 ; If Lakitu is active, jump to PRG004_AD74

	; Lakitu exists but has been marked inactive (by special event object) so he must flee Player

	; Invert bit 0 of the difference (make Lakitu flee the Player!)
	TYA
	EOR #$01
	TAY

PRG004_AD74:
	STY <Objects_Data2,X	 ; -> Var5

	INC Objects_Data3,X	 ; Var3++

	LDA Objects_Data3,X
	AND #$01
	BNE PRG004_AD8D	 ; Every other tick, jump to PRG004_AD8D

	LDA <Objects_XVelZ,X
	CMP Lakitu_XVelLimit,Y
	BEQ PRG004_AD8D	 ; If Lakitu is at X Velocity limit, jump to PRG004_AD8D

	; Acclerate
	ADD Lakitu_XVelAccel,Y
	STA <Objects_XVelZ,X

PRG004_AD8D:
	LDA #$7f	 ; A = $7F

	LDY Level_SlopeEn
	BNE PRG004_AD96	 ; If this is a sloped level, jump to PRG004_AD96

	LDA #$3f	 ; A = $3F

PRG004_AD96:
	AND Objects_Data3,X
	BNE PRG004_ADA5	 

	LDA Lakitu_Active
	BEQ PRG004_ADA5	 ; If Lakitu_Active is not set, jump to PRG004_ADA5

PRG004_ADA5:
	LDA Objects_Timer,X
	BNE PRG004_ADAE	 ; If timer > 1, jump to PRG004_ADAE

	JSR Lakitu_TossEnemy	 ; Toss enemy

PRG004_ADAE:
	LDA <Objects_XVelZ,X
	PHA		 ; Save Lakitu X Velocity

	; Move Lakitu along with the screen
	LDA Level_ScrollDiffH
	ASL A	
	ASL A	
	ASL A	
	ASL A	
	ADC <Objects_XVelZ,X
	STA <Objects_XVelZ,X

	JSR Object_ApplyXVel	 ; Apply X Velocity

	PLA		 
	STA <Objects_XVelZ,X	; Restore Lakitu X Vloeicty

DrawLakitu:
PRG004_ADC2:
	JSR GroundTroop_DrawMirrored	 ; Draw's Lakitu's cloud

	; Temp_Var1 = $F6
	LDA #$f6
	STA <Temp_Var1

	LDA Objects_Timer,X
	BEQ PRG004_ADE1	 ; If timer expired, jump to PRG004_ADE1

	CMP #$1F
	BCC PRG004_ADC3
	LDA #$1F

PRG004_ADC3:
	CMP #16
	BLT PRG004_ADF1	 ; If timer < 16 ticks, jump to PRG004_ADF1

	; Timer >= $10 ticks remaining...

	SBC #16		; Subtract 16 ticks
	LSR A		; Divide by 2
	EOR #%00000111	; Flip the lowest 3 bits 
	ADD #$01	; +1
	SBC #16		; Subtract 16 again
	STA <Temp_Var1	; -> Temp_Var1

	JMP PRG004_ADF1	 ; Jump to PRG004_ADF1

PRG004_ADE1:
	LDA Objects_Data3,X
	LSR A	
	LSR A	
	LSR A	
	AND #$03
	TAX		 ; X = 0 to 3 by Var3

	LDA Lakitu_YOff,X
	LDX <CurrentObjectIndexZ	 ; X = object slot index
	STA <Temp_Var1		 ; Temp_Var1 = Lakitu's in-cloud Y offset

PRG004_ADF1:
	LDA Sprite_RAM+$00,Y
	CMP #$f8
	BEQ PRG004_ADFE	 ; If this Lakitu cloud sprite is vertically off-screen, jump to PRG004_ADFE

	; Otherwise, set Lakitu's left sprite Y
	ADD <Temp_Var1
	STA Sprite_RAM+$08,Y

PRG004_ADFE:
	LDA Sprite_RAM+$04,Y
	CMP #$f8
	BEQ PRG004_AE0B	 ; If this Lakitu cloud sprite is vertically off-screen, jump to PRG004_AE0B

	; Otherwise, set Lakitu's right sprite Y
	ADD <Temp_Var1	
	STA Sprite_RAM+$0C,Y

PRG004_AE0B:
	; Copy Lakitu's Left Sprite X
	LDA Sprite_RAM+$03,Y
	STA Sprite_RAM+$0B,Y

	; Copy Lakitu's Right Sprite X
	LDA Sprite_RAM+$07,Y
	STA Sprite_RAM+$0F,Y

	; Lakitu's sprite patterns
	LDA Objects_Data8, X
	STA Sprite_RAM+$09,Y
	STA Sprite_RAM+$0D,Y

	; Lakitu's left sprite attributes
	LDA #$03
	STA Sprite_RAM+$0A,Y

	; Lakitu's right sprite attributes
	LDA #$43
	STA Sprite_RAM+$0E,Y

Lakitu_TossEnemyRts:
	RTS		 ; Return

Laktiu_ResetTimes:
	.byte $2F, $4F, $3F, $5F
	
Lakitu_Enemies:
	.byte OBJ_SPINY, OBJ_FREEZIE, OBJ_HARDICE

Lakitu_TossEnemy:
	LDA RandomN
	AND #$03
	TAY
	LDA Laktiu_ResetTimes, Y
	STA Objects_Timer,X

	JSR Object_DetectTileCenter
	LDA Objects_LastProp, X
	CMP #TILE_PROP_SOLID_TOP
	BCS Lakitu_TossEnemyRts 

	LDY #$04	 ; Y = 4
PRG004_AE2C:

	LDA Objects_State,Y
	BEQ PRG004_AE35	 ; If this object slot is dead/empty, jump to PRG004_AE35

	DEY		 ; Y--
	BPL PRG004_AE2C	 ; While Y >= 0, loop

	RTS		 ; Return

PRG004_AE35:

	; Not really better than TYA, TAX is it?
	TYA
	TAX

	JSR Object_New	 ; Prepare new object

	LDX <CurrentObjectIndexZ		 ; X = object slot index

	; Set object immediately to "Normal" state
	LDA #OBJSTATE_INIT
	STA Objects_State,Y

	STY TempY
	LDY Objects_Property, X
	LDA Lakitu_Enemies, Y
	LDY TempY

PRG004_AE58:
	STA Objects_ID,Y	 ; Set appropriate drop object

	; Object appears at Lakitu Y - 12
	LDA <Objects_YZ,X
	SUB #$10
	STA Objects_YZ,Y 
	LDA <Objects_YHiZ,X
	SBC #$00
	STA Objects_YHiZ,Y

	LDA #$00
	STA Objects_Property, Y

	; Object appears same as Lakitu X
	LDA <Objects_XZ,X
	STA Objects_XZ,Y
	LDA <Objects_XHiZ,X
	STA Objects_XHiZ,Y

	; Set object Y velocity at -$30
	LDA #-$10
	STA Objects_YVelZ,Y

	LDA Level_ScrollDiffH
	ASL A
	ASL A
	ASL A
	STA <Temp_Var1	 ; Temp_Var1 = 4.4FP of the scroll difference divided by 2

	; Var5 is direction Lakitu is going
	LDA <Objects_Data2,X
	LSR A

	LDA #$10	; A = $10 (move right)

	BCC PRG004_AE89	; If carry not set, jump to PRG004_AE89

	LDA #-$10	; A = -$10 (move left)

PRG004_AE89:
	ADD <Temp_Var1	 ; Add the divided screen difference
	STA Objects_XVelZ,Y	 ; Set the object's X velocity

	RTS		 ; Return


ObjInit_ParaGoomba:
	JSR Object_MoveTowardsPlayer
	LDA #$80
	STA Objects_Timer, X
	RTS

ObjNorm_ParaGoomba:
	JSR ObjNorm_Goomba

	LDA Objects_State, X
	CMP #OBJSTATE_NORMAL
	BEQ ObjNorm_ParaGoomba1
	RTS

ObjNorm_ParaGoomba1:
	LDA <Player_HaltGameZ
	BNE ObjNorm_ParaGoomba2

	LDA Objects_Data5, X
	BNE ObjNorm_ParaGoomba4

	LDA Objects_Timer, X
	BNE ObjNorm_ParaGoomba2

	LDA  <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ ObjNorm_ParaGoomba3

	LDA #$00
	STA Objects_Data3, X
	INC Objects_Data5, X
	BNE ObjNorm_ParaGoomba2

ObjNorm_ParaGoomba2:
	CMP #$10
	BCS ObjNorm_ParaGoomba3

	LDA #$04
	STA Objects_Data3, X
	JMP ParaGoomba_Draw

ObjNorm_ParaGoomba3:
	LDA #$00
	STA Objects_Data3, X

	LDA  <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BNE ObjNorm_ParaGoomba31

	LDA #$04
	STA Objects_Data3, X

ObjNorm_ParaGoomba31:
	JMP ParaGoomba_Draw

ObjNorm_ParaGoomba4:
	INC Objects_Data3, X
	LDA Objects_Data3, X
	CMP #$30
	BCS ObjNorm_ParaGoomba5

ObjNorm_ParaGoomba41:

	LDA #$F0
	STA <Objects_YVelZ, X

	JMP ParaGoomba_Draw

ObjNorm_ParaGoomba5:
	LDY DayNight
	BPL ObjNorm_ParaGoomba51

	CMP #$40
	BCS ObjNorm_ParaGoomba51

	LDA #$00
	STA <Objects_YVelZ, X
	JMP ParaGoomba_Draw

ObjNorm_ParaGoomba51:
	LDA #$00
	STA Objects_Data5, X
	STA Objects_Data3, X
	LDA #$80
	STA Objects_Timer, X

ObjNorm_ParaGoomba6:
	JMP ParaGoomba_Draw

ObjNorm_ParaGoomba7:
	JMP ParaGoomba_Draw

ParaGoomba_Draw:
	LDY Object_SpriteRAM_Offset,X	 ; Y = Sprite_RAM offset

	; Left wing
	LDA Sprite_RAM+$00,Y
	CMP #$f8
	BEQ PRG004_AF31	 ; If this sprite is vertically off-screen, jump to PRG004_AF31

	SUB #10
	STA Sprite_RAM+$08,Y

PRG004_AF31:

	; Right wing
	LDA Sprite_RAM+$04,Y
	CMP #$f8
	BEQ PRG004_AF3E	 ; If this sprite is vertically off-screen, jump to PRG004_AF3E

	SUB #10
	STA Sprite_RAM+$0C,Y

PRG004_AF3E:

	; Left wing sprite X
	LDA Sprite_RAM+$03,Y
	SUB #$02
	STA Sprite_RAM+$0B,Y

	; Right wing sprite X
	LDA Sprite_RAM+$07,Y
	ADD #$02
	STA Sprite_RAM+$0F,Y

	; Left wing attribute
	LDA #(SPR_HFLIP | SPR_PAL1)
	STA Sprite_RAM+$0A,Y

	; Right wing attribute
	LDA #SPR_PAL1
	STA Sprite_RAM+$0E,Y

	LDA Objects_Data3,X

	LDX #$cd	 ; X = $CD (Wing up pattern)
	AND #$04	 
	BNE PRG004_AF65	 ; 8 ticks on, 8 ticks off; jump to PRG004_AF65

	LDX #$cf	 ; X = $CF (Wing down pattern)

PRG004_AF65:
	TXA		 
	STA Sprite_RAM+$09,Y	 ; Store left wing pattern
	STA Sprite_RAM+$0D,Y	 ; Store right wing pattern

	LDX <CurrentObjectIndexZ		 ; X = object slot index

	RTS		 ; Return

ObjInit_ZombieGoomba:
	LDA #$01
	STA Objects_Health, X

	LDA #HIT_GROUND
	STA Objects_PreviousTilesDetect, X
	LDA Objects_Property, X
	BNE ObjInit_ZombieGoomba1

	LDA #$00
	STA Objects_Data5, X

ObjInit_ZombieGoomba1:
	JMP Object_MoveTowardsPlayer
	
ObjNorm_ZombieGoomba:
	JSR Object_DeleteOffScreen	; Delete if off-screen

	LDA <Player_HaltGameZ
	BEQ ObjNorm_ZombieGoomba0
	JMP Goomba_Draw	 ; If gameplay is not halted, jump to PRG004_AF7D

ObjNorm_ZombieGoomba0:
	LDA Objects_Data5, X
	BEQ ObjNorm_ZombieGoomba1
	JMP Zombie_Wait

ObjNorm_ZombieGoomba1:
	
	JSR Object_HitTest
	BCC Zombie_NoInfection

	LDA LeftRightInfection
	BNE DontPoofInfect

	LDA #$17
	STA Player_SuitLost
	LDA #$80
	STA Player_QueueSuit

	LDA #$01
	STA LeftRightInfection
	LDA #$71
	STA Player_FlashInv
	BNE Zombie_NoInfection

DontPoofInfect:
	JSR Player_GetHurt

Zombie_NoInfection:
	JSR Object_FacePlayerOnLanding
	JSR Object_Move

	JSR Object_InteractWithOtherObjects
	BCC Zombie_NoInfection1

	LDA #$00
	STA <Objects_Data2, X

Zombie_NoInfection1:

	LDA <Objects_TilesDetectZ, X
	AND #HIT_CEILING
	BEQ Zombie_Detect1

	JSR Object_HitCeiling
	JMP Zombie_Detect2

Zombie_Detect1:
	LDA <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ Zombie_Detect2

	JSR Object_HitGround

Zombie_Detect2:

	LDA <Objects_TilesDetectZ, X
	AND #(HIT_LEFTWALL | HIT_RIGHTWALL)
	BEQ Zombie_Move

	LDA <Objects_XVelZ, X
	STA TempA
	JSR Object_HitWall
	LDA TempA
	STA <Objects_XVelZ, X

	LDA Objects_PreviousTilesDetect, X
	AND #HIT_GROUND
	BNE Zombie_Detect3

	LDA Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ Zombie_Move

	JSR Object_Reverse
	JMP Zombie_Move

Zombie_Detect3:
	LDA DayNight
	BNE Zombie_Detect4

	LDA #$D4
	BNE Zombie_Detect5

Zombie_Detect4:
	LDA #$C8

Zombie_Detect5:
	STA <Objects_YVelZ, X

Zombie_Move:
	LDA Objects_InWater,X
	BEQ Zombie_Move1
	LDA #OBJSTATE_POOFDEATH
	STA Objects_State, X
	LDA #$1f
	STA Objects_Timer,X
	RTS

Zombie_Move1:
	JSR Object_HandleBumpUnderneath
	JMP Goomba_Draw

Zombie_Interact:

Zombie_Wait:
	LDA Objects_Property, X
	JSR DynJump

	.word ObjNorm_DoNothing
	.word Zombie_InsideBlock
	.word Zombie_InsideGround


Zombie_CheckDistances:
	.byte $D0, $28

Zombie_InsideBlock:
	LDA Objects_SpritesHorizontallyOffScreen,X
	ORA Objects_SpritesVerticallyOffScreen,X
	BNE Zombie_InsideBlock1

	JSR Object_DetectTileCenter
	LDA Tile_LastValue
	AND #$3F
	CMP #$01
	BNE Zombie_InsideBlock0
	LDA #$00
	STA Objects_Data5, X
	RTS

Zombie_InsideBlock0:

	LDA #$10
	JSR Object_XDistanceFromPlayer
	CMP #$03
	BCS Zombie_InsideBlock1

	LDA Block_NeedsUpdate   
	BNE Zombie_InsideBlock1

	JSR Zombie_Crumbles

	JSR Object_DetectTileCenter
	LDA Tile_LastValue
	AND #$C0
	ORA #$01
	STA Block_UpdateValue
	INC Block_NeedsUpdate
	
	JSR SetObjectTileCoordAlignObj
	LDA #$01
	STA Objects_Data5, X
	LDA #$E0
	STA Objects_YVelZ, X
	LDA #$00
	STA Objects_XVelZ, X

Zombie_InsideBlock1:
	RTS

Zombie_InsideGround:
	LDA Objects_SpritesHorizontallyOffScreen,X
	ORA Objects_SpritesVerticallyOffScreen,X
	BNE Zombie_InsideGround2

	LDA #$10
	JSR Object_XDistanceFromPlayer
	CMP #$03
	BCS Zombie_InsideGround1

	LDA Block_NeedsUpdate
	BNE Zombie_InsideGround1

	JSR Zombie_Crumbles
	LDA #$C0
	STA Objects_YVelZ, X
	LDA #$00
	STA Objects_XVelZ, X
	STA Objects_Data5, X
	RTs

Zombie_InsideGround1:
	JSR Object_DetectTileCenter
	LDA Tile_LastValue
	AND #$01
	BEQ Zombie_InsideGround2

	LDA Block_NeedsUpdate
	BNE Zombie_InsideGround2

	LDA Tile_LastValue
	AND #$FE
	STA Block_UpdateValue
	INC Block_NeedsUpdate
	
	JSR SetObjectTileCoordAlignObj

Zombie_InsideGround2
	RTS

Zombie_Crumbles:
	LDA #SND_LEVELCRUMBLE
	STA Sound_QLevel2

	JSR BrickBust_MoveOver	 ; Copy the bust values over (mainly because Bowser uses both)

	; Set the brick bust
	LDA #$02
	STA BrickBust_En

	; Brick bust upper Y
	LDA <Objects_YZ, X
	ADD #$08
	CLC
	SBC Level_VertScroll
	STA Brick_DebrisYHi

	; Brick bust lower Y
	ADD #$08
	STA Brick_DebrisY

	; Brick bust X
	LDA <Objects_XZ, X
	SUB <Horz_Scroll	
	STA Brick_DebrisX

	; reset brick bust X distance, no horizontal
	LDA #$00
	STA Brick_DebrisXDist
	STA BrickBust_HEn

	; Brick bust Y velocity
	LDA #-$06
	STA BrickBust_YVel
	
	JSR Object_DetectTileCenter
	LDA Tile_LastValue
	AND #$FE
	ORA #$01
	STA Block_UpdateValue
	INC Block_NeedsUpdate

	JSR SetObjectTileCoordAlignObj
	RTS

ObjInit_ParaZombieGoomba:
	LDA #$06
	STA Objects_Property, X
	LDA #$01
	STA Objects_Health, X
	RTS

ObjNorm_ParaZombieGoomba:
	LDA <Player_HaltGameZ
	BNE ObjNorm_ParaZombieGoomba1

	JSR Object_DeleteOffScreen
	JSR DoPatrol
	LDA <Objects_YVelZ, X
	BPL ObjNorm_ParaZombieGoomba0

	INC Objects_Data3, X
	BNE ObjNorm_ParaZombieGoomba01

ObjNorm_ParaZombieGoomba0:
	LDA #$00
	STA Objects_Data3, X

ObjNorm_ParaZombieGoomba01:
	JSR Object_DetectTiles
	JSR Object_InteractWithTiles
	JSR Object_InteractWithOtherObjects

	JSR Object_HitTest
	BCC ObjNorm_ParaZombieGoomba1

	LDA LeftRightInfection
	BNE ObjNorm_ParaZombieGoomba2

	LDA #$17
	STA Player_SuitLost
	LDA #$80
	STA Player_QueueSuit

	LDA #$01
	STA LeftRightInfection
	LDA #$71
	STA Player_FlashInv

ObjNorm_ParaZombieGoomba2:
	JSR Player_GetHurt

ObjNorm_ParaZombieGoomba1:
	JSR Goomba_Draw

ParaZombieGoomba_Draw:
	LDY Object_SpriteRAM_Offset,X	 ; Y = Sprite_RAM offset

	; Left wing
	LDA Sprite_RAM+$00,Y
	CMP #$f8
	BEQ ParaZombieGoomba_Draw1	 ; If this sprite is vertically off-screen, jump to PRG004_AF31

	SUB #08
	STA Sprite_RAM+$08,Y

ParaZombieGoomba_Draw1:

	; Right wing
	LDA Sprite_RAM+$04,Y
	CMP #$f8
	BEQ ParaZombieGoomba_Draw2	 ; If this sprite is vertically off-screen, jump to PRG004_AF3E

	SUB #08
	STA Sprite_RAM+$0C,Y

ParaZombieGoomba_Draw2:

	; Left wing sprite X
	LDA Sprite_RAM+$03,Y
	SUB #$04
	STA Sprite_RAM+$0B,Y

	; Right wing sprite X
	LDA Sprite_RAM+$07,Y
	ADD #$04
	STA Sprite_RAM+$0F,Y

	; Left wing attribute
	LDA #(SPR_HFLIP | SPR_PAL1)
	STA Sprite_RAM+$0A,Y

	; Right wing attribute
	LDA #SPR_PAL1
	STA Sprite_RAM+$0E,Y

	LDA Objects_Data3,X

	LDX #$ED	 ; X = $CD (Wing up pattern)
	AND #$04	 
	BNE ParaZombieGoomba_Draw3	 ; 8 ticks on, 8 ticks off; jump to PRG004_AF65

	LDX #$Ef	 ; X = $CF (Wing down pattern)

ParaZombieGoomba_Draw3:
	TXA		 
	STA Sprite_RAM+$09,Y	 ; Store left wing pattern
	STA Sprite_RAM+$0D,Y	 ; Store right wing pattern

	LDX <CurrentObjectIndexZ		 ; X = object slot index

	RTS		 ; Return

ObjNorm_JumpingCheepCheep:
	LDA <Player_HaltGameZ
	BNE PRG004_B0BA	 ; If gameplay is halted, jump to PRG004_B0BA

	INC <Objects_Data2,X	 ; Var5++

	JSR Object_ApplyXVel	 	; Apply X velocity
	JSR Object_ApplyYVel_NoGravity	; Apply Y velocity
	JSR Object_WorldDetectN1	; Detect against world

	INC <Objects_YVelZ,X	 ; YVel++

	JSR Object_AttackOrDefeat	 ; Player to Cheep Cheep collision

PRG004_B0BA:
	JSR Object_DeleteOffScreen	 ; Delete object if it falls off-screen

PRG004_B0BD:
	LDA <Objects_Data2,X
	LSR A
	LSR A
	LSR A
	AND #$01	 ; A = 0 or 1

	LDY Objects_Data4,X
	BEQ PRG004_B0CC	 ; If Var1 = 0, jump to PRG004_B0CC

	ADD #$03	 ; A = 3 or 4

PRG004_B0CC:
	STA Objects_Frame,X	 ; Set object frame

	JSR Object_FlipByXVel	 ; Apply X velocity

	JMP GroundTroop_DrawNormal	 ; Draw and don't come back!

SwimCheep_CurrentFrame = Objects_Data1
ObjInit_SwimmingCheep:
	JSR InitPatrol

	LDA #$F8
	STA ChaseVel_LimitLo, X

	LDA #$08
	STA ChaseVel_LimitHi, X
	
	RTS

ObjNorm_SwimmingCheep:
	LDA <Player_HaltGameZ
	BNE Cheep_Draw

	JSR Object_DeleteOffScreen
	JSR DoPatrol
	JSR Object_FaceDirectionMoving
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat
	JSR Object_DetectTiles
	JSR Object_InteractWithTilesWallStops

ObjNorm_SwimmingCheep1:
	LDA Object_VertTileProp, X
	BNE ObjNorm_SwimmingCheep2

	JSR Object_HitCeiling

ObjNorm_SwimmingCheep2:
	INC <SwimCheep_CurrentFrame,X	 ; Var5++

	; Toggle frame 0/1
	LDA <SwimCheep_CurrentFrame,X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame,X

Cheep_Draw:
	JMP Object_ShakeAndDraw

BulletBill_XAccel:	.byte $01, -$01
BulletBill_XLimit:	.byte $18, -$18

BulletBill_FlipBits:	.byte SPR_HFLIP, $00

ObjInit_BulletBill:
	LDA #$02
	STA Objects_Frame, X
	RTS

ObjNorm_BulletBill:
	LDA <Player_HaltGameZ
	BNE PRG004_B1C2	 ; If gameplay is halted, jump to PRG004_B1C2

	JSR Object_DeleteOffScreen	; Delete object if it falls off-screen
	JSR Object_AttackOrDefeat	 	; Player to Bullet Bill collision
	JSR Object_ApplyXVel	 	; Apply X velocity
	JSR Object_ApplyYVel_NoGravity

PRG004_B1C2:
	JMP DrawBullet

ObjInit_MissileMark:
	LDA Sound_QLevel1
	ORA #SND_LEVELBABOOM
	STA Sound_QLevel1
	RTS

MissileMarkFrames:
	.byte $00, $00, $00, $00, $00, $00, $00, $00

ObjNorm_MissileMark:
	LDA <Player_HaltGameZ
	BNE PRG004_B1C2	 ; If gameplay is halted, jump to PRG004_B1C2

	JSR Object_DeleteOffScreen	; Delete object if it falls off-screen
	JSR Object_AttackOrDefeat	 	; Player to Bullet Bill collision

	LDA Objects_Data3, X
	BNE ObjNorm_MissileMarkB0
	INC Objects_Data5, X

ObjNorm_MissileMarkB0:
	LDA Objects_Data5, X
	LSR A
	LSR A
	LSR A

ObjNorm_MissileMarkB:
	AND #$01
	STA Objects_SpriteAttributes,X

	LDA Objects_Timer, X
	BEQ ObjNorm_MissileMarkA
	JSR Object_ApplyXVel
	JSR Object_ApplyYVel_NoGravity
	JMP DrawBullet
	 
ObjNorm_MissileMarkA:
	LDA Objects_Data3, X
	BEQ ObjNorm_MissileMarkC

	JSR Object_ApplyXVel
	JSR Object_ApplyYVel_NoGravity
	JMP ObjNorm_MissileMarkA1

ObjNorm_MissileMarkC:
	JSR Chase

ObjNorm_MissileMarkA1:
	JSR Object_DetectTiles
	LDA  <Objects_TilesDetectZ, X
	BEQ DrawBullet

	LDA #$00
	STA Objects_Frame, X
	;JMP KoopaExpload

DrawBullet:
	LDA #$00
	STA Objects_Orientation, X
	LDA Objects_XVelZ, X
	BMI DrawBullet1

	LDA #SPR_HFLIP
	STA Objects_Orientation, X

DrawBullet1:
	LDA Objects_XVelZ, X
	BEQ DrawBullet2

	CMP #$02
	BCC DrawBullet2

	CMP #$FE
	BCS DrawBullet2
	BCC ObjNorm_MissileMark1

DrawBullet2:
	LDA #$00
	STA <Temp_Var1
	BEQ ObjNorm_MissileMark2

ObjNorm_MissileMark1:
	LDA #$02
	STA <Temp_Var1
	LDA Objects_YVelZ, X
	BEQ ObjNorm_MissileMark2

	CMP #$08
	BCC ObjNorm_MissileMark2

	CMP #$F8
	BCS ObjNorm_MissileMark2
	AND #$80
	EOR #$80
	ROL A
	ROL A
	ROL A
	ORA #$01
	STA <Temp_Var1

ObjNorm_MissileMark2:
	LDA Objects_Frame, X
	BNE ObjNorm_MissileMark2_1

	LDA Objects_YVelZ, X
	BMI ObjNorm_MissileMark2_1
	LDA #SPR_VFLIP
	STA Objects_Orientation, X

ObjNorm_MissileMark2_1:
	LDA <Temp_Var1
	STA Objects_Frame, X
	CMP #$02
	BEQ ObjNorm_MissileMark3
	LDA #$4F
	STA PatTable_BankSel + 5

ObjNorm_MissileMark3:
	JMP Object_ShakeAndDraw


ObjInit_SpikeCheep:

	RTS		 ; Return

ObjInit_Goomba:
	JSR Object_MoveTowardsPlayer

	LDA Objects_Property, X
	BEQ ObjInit_Goomba1

	LDA #SPR_VFLIP
	STA Objects_Orientation, X

ObjInit_Goomba1:
	RTS


Goomba_CurrentFrame = Objects_Data1
Goomba_DeathTimer = Objects_Data2

ObjNorm_Goomba:
	LDA <Player_HaltGameZ
	BNE Goomba_DrawNoAnimate

	LDA Objects_State, X
	CMP #OBJSTATE_KILLED

	BNE ObjNorm_Goomba0
	JMP Goomba_Death

ObjNorm_Goomba0:
	JSR Object_DeleteOffScreen
	LDA DayNight
	BNE ObjNorm_Goomba1

	JSR Object_FacePlayerOnLanding

ObjNorm_Goomba1:

	LDA Objects_Property, X
	BEQ ObjNorm_Goomba02

	LDA #$01
	STA ReverseGravity

ObjNorm_Goomba02:
	JSR Object_Move
	JSR Object_CalcBoundBox	
	JSR Object_AttackOrDefeat
	JSR Object_InteractWithOtherObjects
	BCS Goomba_DrawNoAnimate

	JSR Object_DetectTiles
	JSR Object_InteractWithTiles
	JSR Object_HandleBumpUnderneath

Goomba_Draw:
	INC Goomba_CurrentFrame, X
	LDA Goomba_CurrentFrame, X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame,X

ObjNorm_Goomba4:
Goomba_DrawNoAnimate:
	LDA Objects_Orientation, X
	ORA #SPR_HFLIP
	EOR #SPR_HFLIP
	STA Objects_Orientation, X

	JSR Object_ShakeAndDraw
	LDA Sprite_RAM + 2, Y
	EOR #SPR_HFLIP
	STA Sprite_RAM + 6, Y

	RTS

Goomba_Death:
	LDA Objects_Health, X
	BPL Goomba_Death1
	JMP Goomba_Draw
	 
Goomba_Death1:
	INC Goomba_DeathTimer, X
	LDA Goomba_DeathTimer, X
	CMP #20
	BNE Goomba_Death2

	JMP Object_SetDeadEmpty

Goomba_Death2:
	LDA #$03
	STA Objects_Frame, X
	LDA #$00
	STA <Objects_YVelZ, X
	LDA #$00
	STA Objects_Orientation, X
	JMP Object_ShakeAndDrawMirrored

FlyingTroopa_StartX = Objects_Data6
FlyingTroopa_StartXHi = Objects_Data7

ObjInit_ParaTroopas:
	LDA <Objects_YZ, X
	ADD #$10
	STA <Objects_YZ, X

	LDA <Objects_YHiZ, X
	ADC #$00
	STA <Objects_YHiZ, X

	LDA #$20 
	STA Objects_Data8, X
	STA Objects_Data9, X

	LDA Objects_Property, X
	AND #$FE
	CMP #$04
	BNE ObjInit_ParaTroopas1

	LDA <Objects_YZ, X
	ADD #$30
	STA <Objects_YZ, X

	LDA <Objects_YHiZ, X
	ADC #$00
	STA <Objects_YHiZ, X

ObjInit_ParaTroopas1:
	LDA <Objects_XZ, X
	STA FlyingTroopa_StartX, X

	LDA <Objects_XHiZ, X
	STA FlyingTroopa_StartXHi, X
	JMP InitPatrol

ObjNorm_FlyingTroopa:
	LDA <Player_HaltGameZ
	BNE ObjNorm_FlyingTroopa2

	JSR Object_DeleteOffScreen

ObjNorm_FlyingTroopa0:
	JSR DoPatrol
	JSR Object_FaceDirectionMoving
	JSR Object_CalcBoundBox
	JSR Object_DetectTiles
	JSR Object_InteractWithTilesWallStops
	JSR Object_AttackOrDefeat

	INC <Koopa_CurrentFrame,X
	LDA <Koopa_CurrentFrame,X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame,X

ObjNorm_FlyingTroopa2:
	JMP Troopa_Draw

ObjInit_Troopa:
	JSR Object_MoveTowardsPlayer
	LDA <Objects_YZ, X
	ADD #$10
	STA <Objects_YZ, X

	LDA <Objects_YHiZ, X
	ADC #$00
	STA <Objects_YHiZ, X
	RTS


Koopa_CurrentFrame = Objects_Data1

ObjNorm_PurpleTroopa:
	JSR ObjNorm_RedTroopa
	LDA Objects_State, X
	CMP #OBJSTATE_NORMAL
	BEQ ObjNorm_PurpleTroopa1

	LDA #$FF
	STA Explosion_Timer, X

ObjNorm_PurpleTroopa1:
	RTS
ObjNorm_RedTroopa:
	LDA <Player_HaltGameZ
	BNE ObjNorm_Troopa1

	JSR Object_DeleteOffScreen
	JSR Object_Move
	JSR Object_FaceDirectionMoving
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat
	JSR Object_InteractWithOtherObjects
	BCS RedTroopa_Draw

	JSR Object_DetectTiles
	JSR Object_InteractWithTiles

	LDA Objects_PreviousTilesDetect, X
	AND #HIT_GROUND
	BEQ Troopa_Animate

	LDA <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BNE Troopa_Animate

	JSR Object_Reverse
	JSR Object_ApplyXVel

Troopa_Animate:
	INC <Koopa_CurrentFrame, X

RedTroopa_Draw:
	LDA <Koopa_CurrentFrame, X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame,X

	JMP Troopa_Draw

ObjNorm_Troopa:
	LDA <Player_HaltGameZ
	BNE ObjNorm_Troopa1

ObjNorm_Troopa0:
	
	JSR Object_DeleteOffScreen
	JSR Object_Move
	JSR Object_FaceDirectionMoving
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat
	JSR Object_InteractWithOtherObjects
	BCS ObjNorm_Troopa1

	JSR Object_DetectTiles
	JSR Object_InteractWithTiles

	INC <Koopa_CurrentFrame, X
	LDA <Koopa_CurrentFrame, X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame,X

ObjNorm_Troopa1:
	JMP Troopa_Draw


ObjNorm_PoisonMushroom:
	LDA <Player_HaltGameZ
	BNE ObjNorm_PoisonMushroom1

	LDA Objects_State, X
	CMP #OBJSTATE_KILLED
	BNE ObjNorm_PoisonMushroom0

	LDA #$80
	STA CompleteLevelTimer
	JMP Object_PoofDie

ObjNorm_PoisonMushroom0:
	JSR Object_DeleteOffScreen
	JSR Object_Move
	JSR Object_CalcBoundBox
	JSR Object_AttackOrDefeat
	JSR Object_DetectTiles
	JSR Object_InteractWithTiles

ObjNorm_PoisonMushroom1:
	JMP Object_ShakeAndDrawMirrored

Bouncey_FlutterTime: = Objects_Data2

ObjNorm_BouncyTroopa:
	LDA <Player_HaltGameZ
	BEQ ObjNorm_BouncyTroopa0

	JMP Troopa_Draw

ObjNorm_BouncyTroopa0:
	LDA  <Objects_TilesDetectZ, X
	AND #HIT_GROUND
	BEQ ObjNorm_BouncyTroopa1

	LDA Objects_PreviousTilesDetect, X
	AND #HIT_GROUND
	BNE ObjNorm_BouncyTroopa1

	LDA #$00
	STA <Bouncey_FlutterTime, X
	LDA #$C0
	STA Objects_YVelZ, X
	BNE ObjNorm_BouncyTroopa2

ObjNorm_BouncyTroopa1:
	LDA DayNight
	BPL ObjNorm_BouncyTroopa2

	LDA <Objects_YVelZ, X
	BMI ObjNorm_BouncyTroopa2

	LDA <Bouncey_FlutterTime, X
	CMP #$10
	BCS ObjNorm_BouncyTroopa2

	INC <Bouncey_FlutterTime, X
	LDA #$00
	STA Objects_YVelZ, X

ObjNorm_BouncyTroopa2:
	JMP ObjNorm_Troopa

ObjNorm_GroundTroop:
	RTS

ObjNorm_SpinyBuzzy:
	LDA <Player_HaltGameZ
	BNE ObjNorm_SpinyBuzzy1

	JSR Object_DeleteOffScreen
	JSR Object_Move
	JSR Object_InteractWithTiles
	JSR Object_HandleBumpUnderneath
	JSR Object_InteractWithPlayer
	JSR Object_InteractWithOtherObjects
	BCS ObjNorm_SpinyBuzzy1

	INC <Objects_Data2,X
	LDA <Objects_Data2,X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame,X

ObjNorm_SpinyBuzzy1:
	JMP Object_ShakeAndDraw

Troopa_YOffByFrame:
	.byte $06, $05

	; Basically select first and second column if the frame is even and the
	; second and third if the frame is odd for the foot sprite patterns.
Troopa_FootByEvenOddFrame:
	.byte $C7, $C9, $C7	; Even
	.byte $F9, $FB, $F9	; Odd

Troopa_Draw:

	LDA Object_SpriteRAM_Offset,X
	ADD #$08
	STA Object_SpriteRAM_Offset,X

	LDY Objects_Frame,X	 ; Y = current frame

	LDA Troopa_YOffByFrame,Y
	TAY		 ; Sprite Y offset -> 'Y'

	; For the following GroundTroop_DrawOffsetInY call:
	; This draws the troopa's "middle", which incidentally includes
	; the head (minus the top), although the simplicity of the function 
	; will set the attributes wrong on the head (wrong palette) which
	; will be corrected below...

	JSR GroundTroop_DrawOffsetInY	 ; Draw with specified offset

	; Temp_Var2 = FlipBits
	LDA Objects_Orientation,X
	STA <Temp_Var2

	BEQ PRG004_B4FB	 ; If not flipped (i.e. horizontal), jump to PRG004_B4FB

	; Y += 4 (next sprite, deciding which sprite to place the head on)
	INY
	INY
	INY
	INY

PRG004_B4FB:

	; Starting here, we begin the process of drawing the tip of the head,
	; correcting the lower head's attribute, and drawing the feet...

	LDA Sprite_RAM+$00,Y
	CMP #$f8
	BEQ PRG004_B520	 ; If this sprite is vertically off-screen, jump to PRG004_B520

	; We use -8 Sprite_RAM offsets here because of the initial +8 before...

	; -16 to get to tip of head
	SUB #16
	STA Sprite_RAM-$08,Y	 ; Store sprite Y

	; Tip of Troopa's head pattern
	LDA #$c1
	STA Sprite_RAM-$07,Y

	; Copy the same X coordinate
	LDA Sprite_RAM+$03,Y
	STA Sprite_RAM-$05,Y

	LDA Sprite_RAM+$02,Y
	AND #~$03	 ; Clear old palette select
	ORA #SPR_PAL3	 ; Set correct palette select
	STA Sprite_RAM-$06,Y	 ; Set on upper head
	STA Sprite_RAM+$02,Y	 ; Set on lower head

PRG004_B520:

	; Sprite on opposite side of whatever we just put the head on
	TYA
	EOR #$04
	TAY

	LDA Objects_ID,X

	CMP #OBJ_PURPLETROOPA
	BEQ PRG004_B55D

	CMP #OBJ_PARATROOPAGREENHOP
	BLT PRG004_B55D	 ; If this is not a paratroopa, jump to PRG004_B55D

DrawWings:
	LDA Sprite_RAM+$00,Y
	CMP #$f8
	BEQ PRG004_B55D	 ; If sprite was found to be vertically off-screen, jump to PRG004_B55D

	; The wing sprite is Y-8 from the body
	SUB #$08
	STA Sprite_RAM-$08,Y

	; Temp_Var1 = $CD (pattern for wing up)
	LDA #$CD
	STA <Temp_Var1

	LDA <Koopa_CurrentFrame,X
	ADC #$02
	AND #$04
	BEQ PRG004_B548	 ; 4 ticks on, 4 ticks off; jump to PRG004_B548

	; Temp_Var1 = $CF (pattern for wing down)
	LDA #$CF
	STA <Temp_Var1 

PRG004_B548:

	; Set correct wing pattern
	LDA <Temp_Var1
	STA Sprite_RAM-$07,Y

	; Copy Sprite X
	LDA Sprite_RAM+$03,Y
	STA Sprite_RAM-$05,Y

	LDA Sprite_RAM+$02,Y
	AND #~$03	 ; Clear old palette select
	ORA #SPR_PAL1	 ; Use proper palette select for wing
	STA Sprite_RAM-$06,Y	 ; Set wing attribute

PRG004_B55D:

	; Time for the left foot...

	LDY Object_SpriteRAM_Offset,X	 ; Y = Sprite_RAM offset

	LDA Sprite_RAM+$00,Y
	CMP #$f8
	BEQ PRG004_B56D	 ; If left bottom of troopa is off-screen, jump to PRG004_B56D

	; Left foot appears at Sprite Y + 16
	ADD #16
	STA Sprite_RAM+$08,Y

PRG004_B56D:
	LDA Sprite_RAM+$04,Y
	CMP #$f8
	BEQ PRG004_B57A	 ; If right bottom of troopa is off-screen, jump to PRG004_B57A

	; Right foot appears at Sprite Y + 16
	ADD #16
	STA Sprite_RAM+$0C,Y

PRG004_B57A:
	; Copy Sprite X for left foot
	LDA Sprite_RAM+$03,Y
	STA Sprite_RAM+$0B,Y

	; Copy Sprite X for right foot
	LDA Sprite_RAM+$07,Y
	STA Sprite_RAM+$0F,Y

	LDA Sprite_RAM+$02,Y
	AND #~$03	 ; Clear old palette select
	ORA #SPR_PAL3	 ; Set correct palette select

	STA Sprite_RAM+$0A,Y	 ; Set left foot attribute
	STA Sprite_RAM+$0E,Y	 ; Set right foot attribute

	LDA Objects_Frame,X

	LDX #$00	 ; X = 0

	LSR A
	BCC PRG004_B59E	 ; On even frames, jump to PRG004_B59E

	; On odd frames, X = 3
	INX
	INX
	INX

PRG004_B59E:
	LDA <Temp_Var2
	BEQ PRG004_B5A3	 ; If not flipped (horizontally), jump to PRG004_B5A3

	INX		 ; Otherwise, X++

PRG004_B5A3:

	; Left foot pattern
	LDA Troopa_FootByEvenOddFrame,X
	STA Sprite_RAM+$09,Y

	; Right foot pattern
	LDA Troopa_FootByEvenOddFrame+1,X
	STA Sprite_RAM+$0D,Y

	LDX <CurrentObjectIndexZ	 ; X = object slot index
	RTS		 ; Return

GiantEnemy_Draw:
	LDA Objects_ID,X
	CMP #OBJ_HELPER
	BNE PRG004_B5D6	 ; If this is not a Giant Goomba, jump to PRG004_B5D6

	; Giant Goomba only...

	LDA Objects_Orientation,X
	PHA		 ; Save flip bits

	AND #~SPR_HFLIP
	STA <Temp_Var1	 ; Temp_Var1 = flip bits sans horizontal flip

	; Set horizontal flip only if Var5 bit 2 is set
	LDA <Objects_Data2,X
	AND #$04
	ASL A	
	ASL A	
	ASL A	
	ASL A	
	ORA <Temp_Var1
	STA Objects_Orientation,X

	JSR PRG004_B5D6 	; Otherwise, draw like any other

	PLA
	STA Objects_Orientation,X	; Restore flip bits

	RTS		 ; Return

PRG004_B5D6:

	; Save X/Hi and Y
	LDA <Objects_XZ,X
	PHA
	LDA <Objects_XHiZ,X
	PHA
	LDA <Objects_YZ,X
	PHA

	CLC	

	LDY Objects_Orientation,X
	BMI PRG004_B5E7	 ; If vertically flipped, jump to PRG004_B5E7

	ADC #$08	 ; Otherwise, add 8

PRG004_B5E7:
	STA <Objects_YZ,X ; -> Y

	LDA <Objects_YHiZ,X
	PHA		 ; Save Y Hi

	ADC #$00
	STA <Objects_YHiZ,X	 ; Apply carry

	; Temp_VarNP0 = sprite horizontal visibility bits
	LDA Objects_SpritesHorizontallyOffScreen,X
	STA Temp_VarNP0

	LDA Objects_Orientation,X
	AND #SPR_HFLIP
	BEQ PRG004_B60D	 ; If not horizontally flipped, jump to PRG004_B60D

	ASL Objects_SpritesHorizontallyOffScreen,X

	; Add 8 to X
	LDA <Objects_XZ,X
	ADD #$08
	STA <Objects_XZ,X
	LDA <Objects_XHiZ,X
	ADC #$00
	STA <Objects_XHiZ,X

PRG004_B60D:
	JSR Object_Draw16x32Sprite	 ; Draw left 2/3 of Giant Enemy

	; Restore Y/Hi and X/Hi
	PLA
	STA <Objects_YHiZ,X
	PLA
	STA <Objects_YZ,X
	PLA
	STA <Objects_XHiZ,X
	PLA
	STA <Objects_XZ,X

	JSR Object_CalcSpriteXY_NoHi

	LDY #$00	 ; Y = 0
;
;	LDA Objects_Orientation,X
;	AND #SPR_HFLIP
;	BEQ PRG004_B629	 ; If not horizontally flipped, jump to PRG004_B629
;
;	INY		 ; Y = 1
;
;PRG004_B629:
;	LDA Temp_VarNP0	
;	AND Giant_HVisBit,Y
;	BNE PRG004_B68A	 ; If sprite is not visible, jump to PRG004_B68A
;
;	SEC	; Carry set if Timer4 is expired
;
;	LDA Objects_Timer4,X
;	BEQ PRG004_B638	 ; If Timer4 is expired, jump to PRG004_B638
;
;	LSR A	; Otherwise, set carry by timer
;
;PRG004_B638:
;
;	; Temp_Var2 = Sprite X
;	LDA <Objects_SpriteX,X
;	SBC #$00
;	ADD Giant_HXOff,Y
;	STA <Temp_Var2	
;
;	LDY Object_SpriteRAM_Offset,X	 ; Y = Sprite_RAM offset
;
;	; Set Sprite Xs
;	LDA <Temp_Var2
;	STA Sprite_RAM+$13,Y
;	STA Sprite_RAM+$17,Y
;
;	; Vertical visibilty -> Temp_Var1
;	LDA Objects_SpritesVerticallyOffScreen,X
;	STA <Temp_Var1	
;
;	LDA <Objects_SpriteY,X	
;	ADD #$08
;	LSR <Temp_Var1
;	BCS PRG004_B65E	 ; If this sprite is vertically off-screen, jump to PRG004_B65E
;
;	STA Sprite_RAM+$10,Y	 ; Otherwise, set Sprite Y
;
;PRG004_B65E:
;	LSR <Temp_Var1
;	BCS PRG004_B668	 ; If this sprite is vertically off-screen, jump to PRG004_B668
;
;	ADD #16			; Lower sprite is +16 Y
;	STA Sprite_RAM+$14,Y	 ; Set lower Sprite Y
;
;PRG004_B668:
;
;	; Copy attributes
;	LDA Sprite_RAM+$02,Y
;	STA Sprite_RAM+$12,Y
;	STA Sprite_RAM+$16,Y
;
;	LDA Objects_Orientation,X
;	BPL PRG004_B68A	 ; If not vertically flipped, jump to PRG004_B68A
;
;	; Otherwise, swap Sprite Ys
;	LDA Sprite_RAM+$10,Y
;	PHA
;	LDA Sprite_RAM+$14,Y
;	SUB #$08
;	STA Sprite_RAM+$10,Y
;	PLA
;	SUB #$08
;	STA Sprite_RAM+$14,Y
;
;PRG004_B68A:
;	LDA Objects_ID,X
;	CMP #OBJ_HELPER
;	BNE PRG004_B694	 ; If this is not a Giant Goomba, jump to PRG004_B694
;
;	JMP PRG004_B719	 ; Jump to PRG004_B719
;
;PRG004_B694:
;
;	; The only other Giant Enemy that uses this routine at this point are the Giant Troopas,
;	; so from here on out it's Giant Troopa code. 
;
;	LDA Objects_State,X
;	CMP #OBJSTATE_NORMAL
;	BEQ PRG004_B69E	 ; If Giant Troopa's state is Normal, jump to PRG004_B69E
;
;	JMP PRG004_B73E	 ; Jump to PRG004_B73E
;
;PRG004_B69E:
;	LDY #$00	 ; Y = 0
;
;	LDA Objects_Orientation,X
;	AND #SPR_HFLIP
;	BEQ PRG004_B6A9	 ; If Giant Troopa is not horizontally flipped, jump to PRG004_B6A9
;
;	LDY #$04	 ; Y = 4
;
;PRG004_B6A9:
;	STY <Temp_Var4	 ; Temp_Var4 = 0 or 4 (which sprite to use)
;
;	TYA
;	ADD Object_SpriteRAM_Offset,X	; Set base offset
;
;	TAY
;	LDA Sprite_RAM+$00,Y
;
;	CMP #$f8
;	BEQ PRG004_B6BE	 ; If sprite vertically not visible, jump to PRG004_B6BE
;
;	SUB #$08
;	STA Sprite_RAM+$00,Y
;
;PRG004_B6BE:
;	LDA Sprite_RAM+$08,Y
;
;	CMP #$f8
;	BEQ PRG004_B6CB	 ; If sprite vertically not visible, jump to PRG004_B6CB
;
;	SUB #$08
;	STA Sprite_RAM+$08,Y
;
;PRG004_B6CB:
;
;	; Palette select 3
;	LDA Sprite_RAM+$02,Y
;	ORA #SPR_PAL3
;	STA Sprite_RAM+$02,Y
;	STA Sprite_RAM+$0A,Y
;
;	LDA <Temp_Var4	 
;	EOR #$04	 ; Use "other" sprite
;	ADD Object_SpriteRAM_Offset,X	 ; Add base offset
;	TAY		 ; -> 'Y'
;
;	; Palette select 3
;	LDA Sprite_RAM+$0A,Y
;	ORA #SPR_PAL3
;	STA Sprite_RAM+$0A,Y
;
;	LDY Object_SpriteRAM_Offset,X	 ; Y = Sprite_RAM offset
;
;	; Top of rear part of shell pattern
;	LDA #$91
;	STA Sprite_RAM+$11,Y
;
;	LDA Objects_Frame,X
;	LSR A
;
;	LDA #$9f	 ; Foot pattern for odd frames
;
;	BCS PRG004_B6F9	 ; If odd frame, jump to PRG004_B6F9
;
;	LDA #$97	 ; Foot pattern for even frames
;
;PRG004_B6F9:
;	STA Sprite_RAM+$15,Y	 ; Store proper foot pattern
;
;	LDA Objects_ID,X
;	CMP #OBJ_BIGGREENHOPPER
;	BLT PRG004_B710	 ; If this is not a Giant Paratroopa, jump to PRG004_B710
;
;	LDA Objects_Frame,X
;	LSR A
;
;	LDA #$b9	 ; Wing up pattern
;
;	BCC PRG004_B70D	 ; If even frame, jump to PRG004_B70D
;
;	LDA #$bb	 ; Wing down pattern
;
;PRG004_B70D:
;	STA Sprite_RAM+$11,Y	 ; Set proper wing pattern
;
;PRG004_B710:
;
;	; Palette select 3
;	LDA Sprite_RAM+$16,Y
;	ORA #SPR_PAL3
;	STA Sprite_RAM+$16,Y
;
;	RTS		 ; Return
;
;PRG004_B719:
;
;	; Giant Goomba only...
;
;	LDA Objects_State,X
;	CMP #OBJSTATE_SQUASHED
;	BEQ PRG004_B72B	 ; If Giant Goomba is in state Squashed (Giant Goomba Only), jump to PRG004_B72B
;
;	; Otherwise, use standard Goomba patterns
;
;	LDA #$85
;	STA Sprite_RAM+$11,Y
;	LDA #$8b
;	STA Sprite_RAM+$15,Y
;
;	RTS		 ; Return
;
;PRG004_B72B:
;
;	; Giant Goomba is squashed
;
;	; Squashed goomba patterns
;	LDA #$71
;	STA Sprite_RAM+$11,Y
;	LDA #$bd
;	STA Sprite_RAM+$15,Y
;
;	; Mirror sprite
;	LDA Sprite_RAM+$16,Y
;	EOR #SPR_HFLIP
;	STA Sprite_RAM+$16,Y
;
;	RTS		 ; Return
;
;PRG004_B73E:
;
;	; Giant Troopa is non-normal state...
;
;	; Shell patterns
;	LDA #$b1
;	STA Sprite_RAM+$11,Y
;	LDA #$b5
;	STA Sprite_RAM+$15,Y
;
;	; Mirror the shell
;	LDA Sprite_RAM+$12,Y
;	EOR #SPR_HFLIP
;	STA Sprite_RAM+$12,Y
;	STA Sprite_RAM+$16,Y
;
;	RTS		 ; Return

ObjInit_GiantDRYPIRANHA:
	LDA #4		; A = 4
	BNE PRG004_B75A	; Jump (technically always) to PRG004_B75A

ObjInit_GiantRedPiranha:
	LDA #12	 	; A = 12

PRG004_B75A:
	ADD <Objects_XZ,X
	STA <Objects_XZ,X	; Set centering X

	LDY #$21	 ; Y = $21

	; Var5 = original Y
	LDA <Objects_YZ,X
	STA <Objects_Data2,X
	
	; Objects_TargetingYVal = $21
	TYA
	STA Objects_TargetingYVal,X

	; Var7 = original Y Hi
	LDA <Objects_YHiZ,X
	STA Objects_Data3,X

	; Set priority
	LDA #SPR_BEHINDBG
	STA Objects_Orientation,X
	RTS		 ; Return

GiantPiranha_TimerReloads:
	.byte $30, $30, $30, $30

ObjNorm_BigPiranha:
	JSR Object_DeleteOffScreen	 ; Delete object if it falls off-screen

	LDA <Objects_Data1,X
	AND #$03
	BNE PRG004_B78C	 ; If (Var4 & 3) <> 0 (internal state 0 means Piranha is fully retracted), jump to PRG004_B78C

	; Set all sprites as horizontally off-screen (piranha is fully retracted in pipe)
	LDA #$ff
	STA Objects_SpritesHorizontallyOffScreen,X

	JMP PRG004_B79D	 ; Jump to PRG004_B79D

PRG004_B78C:

	; Toggle frame 0/1
	LDA GameCounter
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame,X

	JSR GiantPiranha_Draw	 ; Draw the giant piranha
	JSR Object_AttackOrDefeat	 ; Player to piranha collision

PRG004_B79D:
	LDA <Player_HaltGameZ
	BNE PRG004_B7FD	 ; If gameplay is halted, jump to PRG004_B7FD (RTS)

	INC Objects_Data3,X	 ; Var3++

	LDA <Objects_Data1,X
	AND #$03	; Keep internal state counter 0-3

	JSR DynJump

	; THESE MUST FOLLOW DynJump FOR THE DYNAMIC JUMP TO WORK!!
	.word GiantPiranha_HideInPipe	; 0: Retracted in pipe
	.word GiantPiranha_Emerge	; 1: Emerging
	.word GiantPiranha_Chomp	; 2: Chomp
	.word GiantPiranha_Retract	; 3: Retract

GiantPiranha_Emerge:

	; Objects_TargetingYVal = $21
	; Var5 = original Y 
	; Var7 = original Y Hi

	LDA <Objects_Data2,X		; Original Y
	SUB Objects_TargetingYVal,X	; subtract TargetingYVal
	PHA				; Save it

	LDA Objects_Data3,X
	SBC #$00
	STA <Temp_Var1			; Temp_Var1 = Original Y Hi, carry applied

	PLA		 ; Restore the Original Y difference
	CMP <Objects_YZ,X
	LDA <Temp_Var1
	SBC <Objects_YHiZ,X
	BCS PRG004_B7F0	 ; Basically if Giant Piranha is at his Y and Y Hi highest point, jump to PRG004_B7F0

	LDA #-$10	 ; A = -$10
	BNE PRG004_B7E6	 ; Jump (technically always) to PRG004_B7E6

GiantPiranha_Retract:
	LDA <Objects_YZ,X
	ADD #$01
	PHA		 ; Save Y + 1

	LDA <Objects_YHiZ,X
	ADC #$00
	STA <Temp_Var1	 ; Temp_Var1 = carry applied to Y Hi

	PLA		 ; Restore Y + 1

	CMP <Objects_Data2,X
	LDA <Temp_Var1	
	SBC Objects_Data3,X
	BCS PRG004_B7F0	 ; Basically if Giant Piranha is at his Y and Y Hi origin, jump to PRG004_B7F0

	LDA #$10	 ; A = $10

PRG004_B7E6:

	; Giant Piranha is not fully extended/retracted...

	STA <Objects_YVelZ,X	 ; Set Y velocity as appropriate
	JMP Object_ApplyYVel_NoGravity	 ; Apply Y velocity and don't come back!!

GiantPiranha_Chomp:
	LDA Objects_Timer,X
	BNE PRG004_B80F	 ; If timer not expired, jump to PRG004_B80F

PRG004_B7F0:
	INC <Objects_Data1,X	 ; Var4++ (next internal state)

	LDA <Objects_Data1,X
	AND #$03
	TAY		 ; Y = 0 to 3, based on internal state

	LDA GiantPiranha_TimerReloads,Y	 ; Get timer reload value for this state
	STA Objects_Timer,X	 ; Reload timer

PRG004_B7FD:
	RTS		 ; Return

GiantPiranha_HideInPipe:
	LDA Objects_Timer,X
	BNE PRG004_B80F	 ; If timer not expired, jump to PRG004_B80F

	JSR Object_QuickXDistanceFromPlayer

	LDA <Temp_Var16
	ADD #$18
	CMP #$31
	BGE PRG004_B7F0	 ; If Player is not too close, jump to PRG004_B7F0

PRG004_B80F:
	RTS		 ; Return

GiantPiranha_Draw:
	LDA <Objects_XZ,X	 
	PHA		 ; Save piranha X

	LDA <Objects_XHiZ,X
	PHA		 ; Save piranha X Hi

	; Temp_VarNP0 = Sprite horizontal visibility flags
	LDA Objects_SpritesHorizontallyOffScreen,X
	STA Temp_VarNP0

	LDA Objects_Orientation,X
	AND #SPR_HFLIP
	BEQ PRG004_B833	 ; If piranha is not horizontally flipped, jump to PRG004_B833

	ASL Objects_SpritesHorizontallyOffScreen,X

	LDA <Objects_XZ,X
	ADD #$08
	STA <Objects_XZ,X
	LDA <Objects_XHiZ,X
	ADC #$00
	STA <Objects_XHiZ,X

PRG004_B833:
	JSR Object_Draw16x32Sprite	 ; Draw left 2/3 of piranha

	; Restore X/Hi
	PLA
	STA <Objects_XHiZ,X
	PLA
	STA <Objects_XZ,X

	JSR Object_CalcSpriteXY_NoHi

	LDY #$00	 ; Y = 0 (Not H-flipped)

	LDA Objects_Orientation,X
	AND #SPR_HFLIP
	BEQ PRG004_B849	 ; If piranha is not horizontally flipped, jump to PRG004_B849

	INY		 ; Y = 1 (H-flipped)

PRG004_B849:
	LDA Temp_VarNP0	 ; Get horizontal visibility bits

	AND Giant_HVisBit,Y
	BNE PRG004_B8B0	 ; If sprite is off-screen, jump to PRG004_B8B0 (RTS)

	; Temp_Var2 = Sprite X + offset
	LDA <Objects_SpriteX,X
	ADD Giant_HXOff,Y
	STA <Temp_Var2

	LDY Object_SpriteRAM_Offset,X	 ; Y = Sprite_RAM offset

	; Set Sprite Xs
	LDA <Temp_Var2
	STA Sprite_RAM+$13,Y
	STA Sprite_RAM+$17,Y

	; Temp_Var1 = vertical visibility flags
	LDA Objects_SpritesVerticallyOffScreen,X
	STA <Temp_Var1	

	LDA <Objects_SpriteY,X
	LSR <Temp_Var1
	BCS PRG004_B872	 ; If sprite is vertically off-screen, jump to PRG004_B872

	STA Sprite_RAM+$10,Y	 ; Set upper Sprite Y

PRG004_B872:
	LSR <Temp_Var1
	BCS PRG004_B87C	 ; If sprite is vertically off-screen, jump to PRG004_B87C

	ADD #16

	STA Sprite_RAM+$14,Y	 ; Set lower Sprite Y

PRG004_B87C:
	; Set equal-but-flipped attributes on right edge sprites
	LDA Sprite_RAM+$02,Y
	EOR #SPR_HFLIP
	STA Sprite_RAM+$12,Y
	STA Sprite_RAM+$16,Y

	LDA Objects_Frame,X
	LSR A

	; Set proper sprite pattern on upper sprite
	LDA #$a1
	BCC PRG004_B891	 ; On even frames, jump to PRG004_B891
	LDA #$a9
PRG004_B891:
	STA Sprite_RAM+$11,Y

	; Set proper sprite pattern on upper sprite
	LDA #$a5
	BCC PRG004_B89A	 ; On even frames, jump to PRG004_B891
	LDA #$ad
PRG004_B89A:
	STA Sprite_RAM+$15,Y

	LDA Objects_Orientation,X
	BPL PRG004_B8B0	 ; If not horizontally flipped, jump to PRG004_B8B0 (RTS)

	; Otherwise swap left and right sprites
	LDA Sprite_RAM+$10,Y
	PHA
	LDA Sprite_RAM+$14,Y
	STA Sprite_RAM+$10,Y
	PLA
	STA Sprite_RAM+$14,Y

PRG004_B8B0:
	RTS		 ; Return


; FIXME: Anybody want to claim this?
; I think it's an integer division/modulus kind of routine, but I didn't look at it real hard
; $B8B1 

	; 'A' -> Temp_Var2
	STA <Temp_Var2

	; Backup X and Y
	TXA
	PHA
	TYA
	PHA

	; Y Difference flag -> Temp_Var3
	JSR Object_QuickYDistanceFromPlayer
	STY <Temp_Var3

	; Get absolute value of Temp_Var16 (Y difference) -> Temp_Var13
	LDA <Temp_Var16
	BPL PRG004_B8C5
	NEG
PRG004_B8C5:
	STA <Temp_Var13

	; X Difference flag -> Temp_Var4
	JSR Object_QuickXDistanceFromPlayer
	STY <Temp_Var4

	; Get absolute value of Temp_Var16 (X difference) -> Temp_Var14
	LDA <Temp_Var16
	BPL PRG004_B8D5
	NEG
PRG004_B8D5:
	STA <Temp_Var14

	LDY #$00	 ; Y = 0

	LDA <Temp_Var14
	CMP <Temp_Var13
	BGE PRG004_B8E8	 ; If X distance > Y distance, jump to PRG004_B8E8

	INY		 ; Otherwise, Y = 1

	; Swap Temp_Var13/14 so that Temp_Var14 is greater
	PHA
	LDA <Temp_Var13
	STA <Temp_Var14
	PLA
	STA <Temp_Var13

PRG004_B8E8:

	LDA #$00
	STA <Temp_Var12	; Temp_Var12 = 0
	STA <Temp_Var1	; Temp_Var1 = 0

	LDX <Temp_Var2		 ; X = Temp_Var2 (input value)
PRG004_B8F0:
	LDA <Temp_Var12
	ADD <Temp_Var13
	CMP <Temp_Var14
	BLT PRG004_B8FD		; If Temp_Var12 + Temp_Var13 < Temp_Var14, jump to PRG004_B8FD

	SBC <Temp_Var14		; Temp_Var14 -= Temp_Var12 + Temp_Var13
	INC <Temp_Var1		; Temp_Var1

PRG004_B8FD:
	STA <Temp_Var12	 ; Update Temp_Var12
	DEX		 ; X--
	BNE PRG004_B8F0	 ; While X >= 0, loop

	TYA
	BEQ PRG004_B90F	 ; If Y = 0, jump to PRG004_B90F

	; Otherwise, swap Temp_Var1 and Temp_Var2
	LDA <Temp_Var1
	PHA
	LDA <Temp_Var2
	STA <Temp_Var1
	PLA
	STA <Temp_Var2

PRG004_B90F:
	LDA <Temp_Var1

	LDY <Temp_Var3
	BEQ PRG004_B91C	 ; If Temp_Var3 = 0, jump to PRG004_B91C

	; Otherwise, negate Temp_Var1
	NEG
	STA <Temp_Var1

PRG004_B91C:
	LDA <Temp_Var2

	LDY <Temp_Var4
	BEQ PRG004_B929	 ; If Temp_Var4 = 0, jump to PRG004_B929

	; Otherwise, negate Temp_Var2
	NEG
	STA <Temp_Var2

PRG004_B929:
	; Restore Y and X
	PLA
	TAY
	PLA
	TAX

	RTS		 ; Return

GroundTroop_DrawMirrored:
	LDY #$00	; Y = 0 (Sprite Y offset)
	LDA #SPR_VFLIP	; A = SPR_VFLIP (draw mirrored sprite)
	BNE PRG004_B938	; Jump (technically always) to PRG004_B938

GroundTroop_DrawNormal:
	LDY #$00	; Y = 0 (Sprite Y offset)

GroundTroop_DrawOffsetInY:
	LDA #$00	; A = 0 (draw non-mirrored sprite)

PRG004_B938:
	STA <Temp_Var9		 ; Temp_Var9 = $00 (non-mirrored sprite) or SPR_VFLIP (mirrored sprite), depending on entry
	STY <Temp_Var1		 ; Temp_Var1 = Sprite Y offset

	JSR Object_CalcSpriteXY_NoHi

	LDY Object_SpriteRAM_Offset,X	 ; Y = Sprite_RAM offset

	LDA Objects_SpritesVerticallyOffScreen,X
	LSR A
	BCC SkipPRG004_B9BA	 	; If this sprite is vertically off-screen, jump to PRG004_B9BA (RTS)
	RTS

SkipPRG004_B9BA
	; Temp_Var3 = horizontal visibility bits
	LDA Objects_SpritesHorizontallyOffScreen,X
	STA <Temp_Var3

	LDA <Objects_SpriteY,X
	SUB <Temp_Var1

	ASL <Temp_Var3
	BCS PRG004_B959	 ; If this sprite is horizontally off-screen, jump to PRG004_B959

	STA Sprite_RAM+$00,Y	 ; Otherwise, set Sprite Y

PRG004_B959:
	ASL <Temp_Var3
	BCS PRG004_B960	 ; If this sprite is horizontally off-screen, jump to PRG004_B960

	STA Sprite_RAM+$04,Y	 ; Otherwise, set Sprite Y


	; The following block appears to be unused
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PRG004_B960:
	SEC		; Set carry??

	LDA Objects_Timer4,X
	BEQ PRG004_B96D	 ; If timer 4 is expired, jump to PRG004_B96D

	CMP #$40
	BLT PRG004_B96C	 ; If timer 4 < $40, jump to PRG004_B96C

	; Timer 4 >= $40...

	LSR A
	LSR A		 ; Divide timer4 by 4

PRG004_B96C:
	LSR A		 ; Divide timer4 by 2

PRG004_B96D:
	; No one cares about the accumulator value or the carry flag...
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	; Set left sprite X
	LDA <Objects_SpriteX,X
	STA Sprite_RAM+$03,Y

	; Set right sprite X
	ADD #$08
	STA Sprite_RAM+$07,Y

	; Temp_Var1 = current flip bits
	LDA Objects_Orientation,X
	STA <Temp_Var1
	ORA Objects_SpriteAttributes,X	 ; OR in the sprite attributes
	STA DAIZ_TEMP1
	LDA DAIZ_TEMP1

	ASL <Temp_Var9
	BCC PRG004_B986	 ; If Temp_Var9 was assigned to $00 at start, we jump to PRG004_B986

	AND #~SPR_HFLIP	 ; Clear horizontal flip if Temp_Var9 was $80 at start

PRG004_B986:
	STA Sprite_RAM+$02,Y	 ; Set left sprite attribute

	BCC PRG004_B98D	 ; If Temp_Var9 was assigned to $00 at start, we jump to PRG004_B98D

	ORA #SPR_HFLIP	 ; Set horizontal flip if Temp_Var9 was $80 at start

PRG004_B98D:
	STA Sprite_RAM+$06,Y	 ; Set right sprite attribute

	LDA Objects_Frame,X
	LDX ObjGroupRel_Idx	 ; X = object group relative index

	ASL A		 ; Multiply frame by 2

	ADD ObjectGroup03_PatternStarts,X	; Add in the base pattern set index

	TAX		 ; Frame * 2 + Pattern Start -> 'X'

	LDA ObjectGroup03_PatternSets,X	 ; Get the appropriate pattern for this frame

	BIT <Temp_Var1
	BVS PRG004_B9AF	 ; If horizontally flipped, jump to PRG004_B9AF

	; Store left sprite pattern
	STA Sprite_RAM+$01,Y

	LDA ObjectGroup03_PatternSets+1,X ; Get the next pattern

	; Store right sprite pattern
	STA Sprite_RAM+$05,Y

	JMP PRG004_B9B8	 ; Jump to PRG004_B9B8

PRG004_B9AF:
	; Store right sprite pattern
	STA Sprite_RAM+$05,Y

	LDA ObjectGroup03_PatternSets+1,X ; Get the next pattern

	; Store left sprite pattern
	STA Sprite_RAM+$01,Y

PRG004_B9B8:
	LDX <CurrentObjectIndexZ	 ; X = object slot index

PRG004_B9BA:
	RTS		 ; Return

ObjInit_ChainChomp:

	; Fill in all of the following with the Chain Chomp's starting X coordinate
	LDA <Objects_XZ,X
	STA Objects_Data11,X
	STA ChainChomp_ChainX1,X
	STA ChainChomp_ChainX2,X
	STA ChainChomp_ChainX3,X
	STA ChainChomp_ChainX4,X

	; Var10 = origin X - 44 (left limit)
	SUB #44
	STA Objects_Data8,X

	; Var 11 = origin X + 44 (right limit)
	ADD #88
	STA Objects_Data9,X

	; Fill in all of the following with the Chain Chomp's starting Y coordinate
	LDA <Objects_YZ,X
	STA Objects_Data12,X
	STA ChainChomp_ChainY1,X
	STA ChainChomp_ChainY2,X
	STA ChainChomp_ChainY3,X
	STA ChainChomp_ChainY4,X

	; Var12 = origin Y - 56 (upper limit)
	SUB #56
	STA Objects_Data10,X

	; Var7 holds corresponding Y Hi
	LDA <Objects_YHiZ,X
	SBC #$00
	STA Objects_Data3,X

	LDA Objects_XHiZ, X
	STA Objects_Data13, X

	LDA Objects_YHiZ, X
	STA Objects_Data14, X

	RTS		 ; Return

ChainChomp_BreakFree:
	LDY #$01	 ; Y = 1 (two buffer slots)
PRG004_B9F9:
	LDA Buffer_Occupied,Y
	BEQ PRG004_BA02	 ; If this buffer is free, jump to PRG004_BA02

	DEY		 ; Y--
	BPL PRG004_B9F9	 ; While Y >= 0, loop!

	RTS		 ; Return

PRG004_BA02:

	; Become a freed Chain Chomp!
	LDA #OBJ_CHAINCHOMPFREE
	STA Objects_ID,X

	; Var7 = 4
	LDA #$04
	STA Objects_Data3,X

	; Claim this buffer slot
	LDA #$01
	STA Buffer_Occupied,Y

	JSR Object_CalcSpriteXY_NoHi

	; Temp_Var1 = Sprite Y
	LDA <Objects_SpriteY,X
	STA <Temp_Var1

	; Temp_Var2 = Sprite X
	LDA <Objects_SpriteX,X
	STA <Temp_Var2	

	TYA
	STA Objects_Data6,X	 ; Var6 = buffer slot select

	LSR A
	ROR A
	LSR A
	LSR A	; A = $00 or $20 (offset into corresponding buffer)
	TAX		 ; -> 'X'

	; This loop loads up the X/Y buffers with the Chain Chomp's position
	LDY #$1f	 ; Y = $1F (buffer space count)
PRG004_BA27:
	LDA <Temp_Var1
	STA Object_BufferY,X
	LDA <Temp_Var2
	STA Object_BufferX,X

	INX		 ; X++ (next buffer byte)
	DEY		 ; Y-- (one less count)
	BPL PRG004_BA27	 ; While Y >= 0, loop!

	LDX <CurrentObjectIndexZ		 ; X = object slot index

	; Reset Timer
	LDA #$00
	STA Objects_Timer,X

	JSR Object_QuickXDistanceFromPlayer
	LDA Chomp_FreeXVels, Y
	STA Objects_XVelZ, X
	LDA #$00
	STA Objects_YVelZ, X

	RTS		 ; Return

Chomp_FreeXVels: .byte -$20, $20
ChainChomp_ChaseYVel:	.byte -$20, -$40, -$30, -$50
ChainChomp_ChaseXVel:	.byte  $50,  $30,  $40,  $20

ChainChomp_YDelta:	.byte  $03, $0D, $08, $0D
ChainChomp_XDelta:	.byte  $0C, $0A, $0A, $08

ObjNorm_ChainChomp:
	JSR ChainChomp_Draw	 ; Draw Chain Chomp and his chain

	LDA <Player_HaltGameZ
	BNE PRG004_BAC8	 ; If gameplay is halted, jump to PRG004_BAC8 (RTS)

	JSR Object_DeleteOffScreen	 
	JSR Object_AttackOrDefeat	 ; Do Player to Chain Chomp collision detection
	JSR Object_FlipByXVel	 ; Flip based on travel direction

	INC Objects_Data3,X	 ; Var3++
	INC <Objects_Data1,X	 ; Var4++

	; Toggle frame 0/1
	LDA <Objects_Data1,X
	LSR A
	LSR A
	LSR A
	AND #$01
	STA Objects_Frame,X

	LDA Objects_SpritesHorizontallyOffScreen, X
	AND #$C0
	CMP #$C0
	BEQ ChompNoCheck

	JSR ChompRoutine
	LDA RandomN
	AND #$01
	BNE ChompNoCheck

	JSR ChainChomp_DetectFree

ChompNoCheck:
	RTS

ChompRoutine:
	LDA <Objects_Data2,X	 ; Var5 is internal state
	JSR DynJump

	; THESE MUST FOLLOW DynJump FOR THE DYNAMIC JUMP TO WORK!!
	.word ChainChomp_ChooseLunge
	.word ChainChomp_DoMove
	.word ChainChomp_Drop

ChainChomp_ChooseLunge:
	LDA Objects_Timer,X	 
	BNE PRG004_BAC8	 ; If timer not expired, jump to PRG004_BAC8 (RTS)

	LDA RandomN,X
	AND #$03
	; ...??

	JSR Object_QuickXDistanceFromPlayer	

	LDA <Temp_Var16
	PHP		 ; Save CPU state
	BPL PRG004_BA8B	 ; If Player is to the right of Chain Chomp, jump to PRG004_BA8B

	EOR #$ff	 ; Otherwise, sort of negate the difference (almost absolute value)

PRG004_BA8B:
	CMP #64
	BLT PRG004_BA97	 ; If the distance < 64, jump to PRG004_BA97

	LDA #63

PRG004_BA97:

	; Divide distance by 16
	LSR A
	LSR A
	LSR A
	LSR A

PRG004_BA9E:
	STA Objects_TargetingXVal,X	 ; -> Objects_TargetingXVal
 
	TAY		
	LDA ChainChomp_ChaseYVel,Y
	STA <Objects_YVelZ,X	 ; Set Y Velocity
 
	LDA ChainChomp_ChaseXVel,Y
	PLP		 ; Restore CPU state
	BPL PRG004_BAB2	 ; If we inverted for Y, we must invert for X too, jump to PRG004_BAB2

	NEG	; Negate (absolute value)

PRG004_BAB2:
	STA <Objects_XVelZ,X	 ; -> X velocity

	; Timer = $28
	LDA #$28
	STA Objects_Timer,X

	INC <Objects_Data2,X	 ; Var5++ (next internal state)

	INC Objects_Data4,X	 ; Var1++

PRG004_BAC8:

	RTS		 ; Return


ChainChomp_DoMove:
	LDA Objects_Timer,X	 
	BNE PRG004_BAEC	 ; If timer not expired, jump to PRG004_BAEC

	LDA RandomN,X
	AND #$3f
	ORA #$20
	STA Objects_Timer,X	 ; Set timer to $20 - $3F

	INC <Objects_Data2,X	 ; Var5++ (next internal state)

	; Halt vertical movement
	LDA #$00
	STA <Objects_YVelZ,X

	LDY #$08	 ; Y = 8

	LDA <Objects_XZ,X
	CMP Objects_Data11,X
	BLT PRG004_BAE9	 ; If Chain Chomp X < starting X, jump to PRG004_BAE9

	LDY #-$08	 ; Otherwise, Y = -8

PRG004_BAE9:
	STY <Objects_XVelZ,X	 ; Update X velocity
	RTS		 ; Return


PRG004_BAEC:
	LDA <Objects_XZ,X
	CMP Objects_Data8,X
	BLT PRG004_BB07	 ; If Chain Chomp is already at his left limit, jump to PRG004_BB07

	CMP Objects_Data9,X
	BGE PRG004_BB07	 ; If Chain Chomp is already at his right limit, jump to PRG004_BB07

	LDA <Objects_YZ,X
	CMP Objects_Data10,X
	LDA <Objects_YHiZ,X
	SBC Objects_Data3,X
	BCC PRG004_BB07	 ; If Chain Chomp is above his upper limit, jump to PRG004_BB07

	JMP ChainChomp_MoveChain	 ; Chain Chomp moves with his chain, and don't come back!

PRG004_BB07:

	; Var4 += 2
	INC <Objects_Data1,X
	INC <Objects_Data1,X

	; Temp_Var4 = 4
	LDA #$04
	STA <Temp_Var4

	LDA Objects_Data11,X	 	; Chain Chomp starting X
	SUB <Objects_XZ,X		; Subtract current X (relative difference)
	JSR Modulus_ByTempVar4		
	ADD <Objects_XZ,X		; Add modulus result to Chain Chomp X
	STA ChainChomp_ChainX1,X	; Set Chain link 1 X

	ADC <Temp_Var1			; Apply same
	STA ChainChomp_ChainX2,X	; Set Chain link 2 X

	ADC <Temp_Var1			; Apply same
	STA ChainChomp_ChainX3,X	; Set Chain link 3 X

	ADC <Temp_Var1			; Apply same
	STA ChainChomp_ChainX4,X	; Set Chain link 4 X

	; Temp_Var4 = 5
	LDA #$05
	STA <Temp_Var4

	LDA Objects_Data12,X	 	; Chain Chomp starting Y
	SUB <Objects_YZ,X		; Subtract current Y (relative difference)
	JSR Modulus_ByTempVar4		
	ADD <Objects_YZ,X		; Add modulus result to Chain Chomp Y
	STA ChainChomp_ChainY1,X	; Set Chain link 1 Y

	ADC <Temp_Var1			; Apply same
	STA ChainChomp_ChainY2,X	; Set Chain link 2 Y

	ADC <Temp_Var1			; Apply same
	STA ChainChomp_ChainY3,X	; Set Chain link 3 Y

	ADC <Temp_Var1			; Apply same
	STA ChainChomp_ChainY4,X	; Set Chain link 4 Y

	LDA Object_SpriteRAM_Offset,X
	ADD #$08	 ; A = Sprite_RAM offset + 8 (two sprites over)

	LDY <Objects_YVelZ,X
	TAX		 ; X = sprite RAM offset
	CPY #-$30
	BGE PRG004_BB61	 

	; Change sprite Y instead of X
	INX
	INX
	INX

PRG004_BB61:
	LDY #$03	 ; Y = 3

	LDA <Counter_1
	LSR A	
	LSR A	
PRG004_BB67:
	BCC PRG004_BB6C	 ; If carry set, jump to PRG004_BB6C (this actually ought to skip the loop, it ends up does nothing)

	INC Sprite_RAM+$00,X	 ; Increment X or Y

PRG004_BB6C:

	; X += 4 (next sprite)
	INX
	INX
	INX
	INX

	DEY		 ; Y--
	BPL PRG004_BB67	 ; While Y >= 0, loop

	LDX <CurrentObjectIndexZ		 ; X = object slot index

	RTS		 ; Return

	; Essentially performs a modulus against the accumulator by Temp_Var4
	; 'Y' stores the effective division result
Modulus_ByTempVar4:
	PHP		 ; Save CPU state
	BPL PRG004_BB7E	 ; If input is positive, jump to PRG004_BB7E

	NEG		; Otherwise, negate! (Absolute value)

PRG004_BB7E:
	LDY #$ff	 ; Y = $FF

PRG004_BB80:
	SBC <Temp_Var4	 ; Subtract Temp_Var4 from input

	INY		 ; Y++
	BCS PRG004_BB80	 ; If the value has not gone below zero, loop!

	TYA		 ; Y -> A

	PLP		 ; Restore CPU state
	BPL PRG004_BB8E	 ; If input is positive, jump to PRG004_BB8E

	NEG

PRG004_BB8E:
	STA <Temp_Var1		 ; Result -> Temp_Var1

	RTS		 ; Return

ChainChomp_LungeMask:	.byte $1f, $0f
ChainChomp_XVel:	.byte $10, $20

ChainChomp_Drop:
	JSR Object_QuickXDistanceFromPlayer	 

	LDA <Temp_Var16
	ADC #$60
	CMP #$c0
	LDY #$00	 ; Y = 0
	BGE PRG004_BBB5	 ; If Player is too close, jump to PRG004_BBB5

	INC <Objects_Data1,X	 ; Var4++

	LDA Objects_Timer,X
	BNE PRG004_BBB4	 ; If timer not expired, jump to PRG004_BBB4

	LDA #$00
	STA Objects_Timer,X	 ; Reset timer
	STA <Objects_Data2,X	 ; Return to initial internal state
	STA Objects_TargetingYVal,X
	RTS		 ; Return

PRG004_BBB4:
	INY		 ; Y = 1

PRG004_BBB5:
	STY <Temp_Var16	 ; Temp_Var16 = 0 or 1

	JSR ChainChomp_MoveChain	 ; Chain Chomp moves with his chain, and don't come back!

	; Chain Chomp falls down
	INC <Objects_YVelZ,X
	INC <Objects_YVelZ,X
	INC <Objects_YVelZ,X

	LDA Objects_TargetingYVal,X
	BEQ PRG004_BBE2	 ; If PRG004_BBCC = 0, jump to PRG004_BBE2

	; Temp_Var1 = Var14 (Chain Chomp's starting Y)
	LDA Objects_Data12,X
	STA <Temp_Var1

	LDY #$03	 ; Y = 3 (4 chain links)
PRG004_BBCC:
	LDA ChainChomp_ChainY1,X
	CMP <Temp_Var1
	BGE PRG004_BBD8	

	ADC #$02
	STA ChainChomp_ChainY1,X

PRG004_BBD8:

	; Next chain link
	INX
	INX
	INX
	INX
	INX

	DEY		 ; Y--
	BPL PRG004_BBCC	 ; While Y >= 0, loop!

	LDX <CurrentObjectIndexZ		 ; X = object slot index

PRG004_BBE2:
	LDA <Objects_YZ,X
	CMP Objects_Data12,X
	BLT PRG004_BC58	 ; If Chain Chomp is above the starting Y, jump to PRG004_BC58

	; Objects_TargetingYVal = 1
	LDA #$01
	STA Objects_TargetingYVal,X

	LDA <Objects_YVelZ,X
	PHA		 ; Save Y Velocity

	JSR Object_HitGround	 ; Align to ground

	PLA		 ; Restore Y velocity
	CMP #$28
	BLT PRG004_BC02	 ; If Y Velocity < $28, jump to PRG004_BC02

	; Chain Chomp Y Vel = -$18
	LDA #-$18
	STA <Objects_YVelZ,X

	; Var3 = 0
	LDA #$00
	STA Objects_Data3,X

PRG004_BC02:
	LDA #$03	 ; A = 3

	LDY <Temp_Var16	
	BEQ PRG004_BC0A	; If PRG004_BC0A = 0, jump to PRG004_BC0A

	LDA #$00	 ; A = 0

PRG004_BC0A:
	STA Objects_TargetingXVal,X	 ; Objects_TargetingXVal = 0 or 3

	LDA Objects_Data3,X
	AND ChainChomp_LungeMask,Y
	BNE PRG004_BC29	 

	LDA ChainChomp_XVel,Y
	PHA		 ; Save value

	LDA Objects_Data11,X
	CMP <Objects_XZ,X
	BGE PRG004_BC26	 ; If origin X >= Chain Chomp's X, jump to PRG004_BC26

	PLA		 ; Restore value

	; Negate
	EOR #$ff
	ADC #$01

	PHA		 ; Save value (just because it runs into the PLA below)

PRG004_BC26:
	PLA		 ; Restore value
	STA <Objects_XVelZ,X	 ; Set as X velocity

PRG004_BC29:
	LDA RandomN,X
	AND #$d5
	BNE PRG004_BC34	 ; Randomly jump to PRG004_BC34

	; Stop horizontal movement
	LDA #$00
	STA <Objects_XVelZ,X

PRG004_BC34:
	LDA <Objects_XZ,X

	LDY Objects_Orientation,X
	BNE PRG004_BC42	 ; If Chain Chomp is flipped, jump to PRG004_BC42

	CMP Objects_Data8,X
	BLT PRG004_BC47	 ; If Chain Chomp X < left limit, jump to PRG004_BC47
	BGE PRG004_BC58	 ; Otherwise, jump to PRG004_BC58 (RTS)

PRG004_BC42:
	CMP Objects_Data9,X
	BLT PRG004_BC58	 ; If Chain Chomp X < right limit, jump to PRG004_BC58 (RTS)

PRG004_BC47:
	LDY <Temp_Var16	 ; Y = Temp_Var16

	LDA ChainChomp_XVel,Y
	BCC PRG004_BC53	 

	NEG	; Negate!

PRG004_BC53:
	STA <Objects_XVelZ,X	 ; Set as X velocity
	JSR ChainChomp_MoveChain	 ; Chain Chomp moves with his chain, and don't come back!

PRG004_BC58:
	RTS		 ; Return

ChainChomp_Draw:
	JSR GroundTroop_DrawNormal	 ; Draw Chain Chomp's head

	CLC
	TYA
	ADC #$14
	STA <Temp_Var14	 ; Temp_Var14 = ending sprite offset + $14 (5 more sprites inward)

	; Temp_Var16 = 3
	LDA #$03
	STA <Temp_Var16

PRG004_BC66:
	LDA <Temp_Var16	
	ASL A	
	ASL A	
	ADC <Temp_Var16
	ADC <CurrentObjectIndexZ
	TAY		 

	; Temp_Var1 = Chain Chomp chain link Y made relative
	LDA ChainChomp_ChainY1,Y
	SUB Level_VertScroll
	ADD #$04
	STA <Temp_Var1

	; Temp_Var2 = Chain Chomp 
	LDA ChainChomp_ChainX1,Y
	SUB <Horz_Scroll
	ADD #$04
	STA <Temp_Var2

	JSR ChainChomp_LinkVisibleTest
	BCS PRG004_BCB4	 ; If this link is not visible, jump to PRG004_BCB4

	; Temp_Var14: Current chain sprite offset
	LDA <Temp_Var14
	TAY			; Sprite Offset -> 'Y'
	SUB #$04
	STA <Temp_Var14		 ; Temp_Var14 -= 4 (one sprite prior in memory)

	; Chain Link Y
	LDA <Temp_Var1
	STA Sprite_RAM+$00,Y

	; Chain Link X
	LDA <Temp_Var2
	STA Sprite_RAM+$03,Y

	; Chain Link pattern
	LDA #$75
	STA Sprite_RAM+$01,Y

	LDA Objects_Data4,X
	CMP #$2f
	LDA #$03	 ; A = 3
	BLT PRG004_BCB1	 ; If Var1 < $2F, jump to PRG004_BCB1

	LDA GameCounter
	LSR A
	AND #$03	; Palette cycle 0-3

PRG004_BCB1:
	STA Sprite_RAM+$02,Y	 ; Store attribute

PRG004_BCB4:
	DEC <Temp_Var16		; Temp_Var16--
	BPL PRG004_BC66		; While Temp_Var16 >= 0, loop!

	LDX <CurrentObjectIndexZ		 ; X = object slot index
	RTS		 ; Return

ChainChomp_MoveChain:
	JSR Object_ApplyYVel_NoGravity	 ; Apply Y velocity
	STA <Temp_Var1		 ; Store carry flag -> Temp_Var1

	JSR Object_ApplyXVel	; Apply X velocity
	STA <Temp_Var2		 ; Store carry flag -> Temp_var2

	LDY Objects_TargetingXVal,X	 ; Y = Objects_TargetingXVal (0-3, CC's chosen direction)

	LDA <Objects_XVelZ,X
	BLS PRG004_BD22	 ; If Chain Chomp is moving to the left, jump to PRG004_BD22

	; Chain Chomp moving rightward version...

	LDA ChainChomp_ChainX1,X
	ADD ChainChomp_XDelta,Y	; Add X Delta for direction
	CMP <Objects_XZ,X
	BGE PRG004_BD1F	 	; If chain is beyong Chain Chomp, jump to PRG004_BD1F

	; Apply velocity carry
	LDA ChainChomp_ChainX1,X
	ADD <Temp_Var2	
	STA ChainChomp_ChainX1,X

	LDA ChainChomp_ChainX2,X
	ADD ChainChomp_XDelta,Y	; Add X Delta for direction
	CMP ChainChomp_ChainX1,X
	BGE PRG004_BD1F	 	; If chain link is beyond previous chain link, jump to PRG004_BD1F

	; Apply velocity carry
	LDA ChainChomp_ChainX2,X
	ADD <Temp_Var2	
	STA ChainChomp_ChainX2,X

	LDA ChainChomp_ChainX3,X
	ADD ChainChomp_XDelta,Y	; Add X Delta for direction
	CMP ChainChomp_ChainX2,X
	BGE PRG004_BD1F	 	; If chain link is beyond previous chain link, jump to PRG004_BD1F

	; Apply velocity carry
	LDA ChainChomp_ChainX3,X
	ADD <Temp_Var2	
	STA ChainChomp_ChainX3,X

	LDA ChainChomp_ChainX4,X
	ADD ChainChomp_XDelta,Y	; Add X Delta for direction
	CMP ChainChomp_ChainX3,X
	BGE PRG004_BD1F	 	; If chain link is beyond previous chain link, jump to PRG004_BD1F

	; Apply velocity carry
	LDA ChainChomp_ChainX4,X
	ADD <Temp_Var2	
	STA ChainChomp_ChainX4,X

PRG004_BD1F:
	JMP PRG004_BD75

PRG004_BD22:

	; Chain Chomp moving leftward version...

	LDA ChainChomp_ChainX1,X
	SUB ChainChomp_XDelta,Y	; Add X Delta for direction
	CMP <Objects_XZ,X
	BLT PRG004_BD75	 	; If chain is beyong Chain Chomp, jump to PRG004_BD75

	; Apply velocity carry
	LDA ChainChomp_ChainX1,X
	ADD <Temp_Var2	
	STA ChainChomp_ChainX1,X

	LDA ChainChomp_ChainX2,X
	SUB ChainChomp_XDelta,Y	; Add X Delta for direction
	CMP ChainChomp_ChainX1,X
	BLT PRG004_BD75	 	; If chain link is beyond previous chain link, jump to PRG004_BD75

	; Apply velocity carry
	LDA ChainChomp_ChainX2,X
	ADD <Temp_Var2	
	STA ChainChomp_ChainX2,X

	LDA ChainChomp_ChainX3,X
	SUB ChainChomp_XDelta,Y	; Add X Delta for direction
	CMP ChainChomp_ChainX2,X
	BLT PRG004_BD75	 	; If chain link is beyond previous chain link, jump to PRG004_BD75

	; Apply velocity carry
	LDA ChainChomp_ChainX3,X
	ADD <Temp_Var2	
	STA ChainChomp_ChainX3,X

	LDA ChainChomp_ChainX4,X
	SUB ChainChomp_XDelta,Y	; Add X Delta for direction
	CMP ChainChomp_ChainX3,X
	BLT PRG004_BD75	 	; If chain link is beyond previous chain link, jump to PRG004_BD75

	; Apply velocity carry
	LDA ChainChomp_ChainX4,X
	ADD <Temp_Var2	
	STA ChainChomp_ChainX4,X
 

PRG004_BD75:
	LDA <Objects_YVelZ,X
	BMI PRG004_BDCD	 ; If Chain Chomp is moving upward, jump to PRG004_BDCD

	; Chain Chomp moving downward version...

	LDA ChainChomp_ChainY1,X
	ADD ChainChomp_YDelta,Y	; Add Y Delta for direction
	CMP <Objects_YZ,X
	BGE PRG004_BDCC	 	; If chain is beyond Chain Chomp, jump to PRG004_BDCC (RTS)

	; Apply velocity carry
	LDA ChainChomp_ChainY1,X
	ADD <Temp_Var1
	STA ChainChomp_ChainY1,X

	LDA ChainChomp_ChainY2,X
	ADD ChainChomp_YDelta,Y	; Add Y Delta for direction
	CMP ChainChomp_ChainY1,X
	BGE PRG004_BDCC	 	; If chain is beyond Chain Chomp, jump to PRG004_BDCC (RTS)

	; Apply velocity carry
	LDA ChainChomp_ChainY2,X
	ADD <Temp_Var1
	STA ChainChomp_ChainY2,X

	LDA ChainChomp_ChainY3,X
	ADD ChainChomp_YDelta,Y	; Add Y Delta for direction
	CMP ChainChomp_ChainY2,X
	BGE PRG004_BDCC	 	; If chain is beyond Chain Chomp, jump to PRG004_BDCC (RTS)

	; Apply velocity carry
	LDA ChainChomp_ChainY3,X
	ADD <Temp_Var1
	STA ChainChomp_ChainY3,X

	LDA ChainChomp_ChainY4,X
	ADD ChainChomp_YDelta,Y	; Add Y Delta for direction
	CMP ChainChomp_ChainY3,X
	BGE PRG004_BDCC	 	; If chain is beyond Chain Chomp, jump to PRG004_BDCC (RTS)

	; Apply velocity carry
	LDA ChainChomp_ChainY4,X
	ADD <Temp_Var1
	STA ChainChomp_ChainY4,X

PRG004_BDCC:
	RTS		 ; Return


PRG004_BDCD:

	; Chain Chomp moving upward version...

	LDA ChainChomp_ChainY1,X
	SUB ChainChomp_YDelta,Y	; Add Y Delta for direction
	CMP <Objects_YZ,X
	BLT PRG004_BE20	 	; If chain is beyond Chain Chomp, jump to PRG004_BE20 (RTS)

	; Apply velocity carry
	LDA ChainChomp_ChainY1,X
	ADD <Temp_Var1
	STA ChainChomp_ChainY1,X

	LDA ChainChomp_ChainY2,X
	SUB ChainChomp_YDelta,Y	; Add Y Delta for direction
	CMP ChainChomp_ChainY1,X
	BLT PRG004_BE20	 	; If chain is beyond Chain Chomp, jump to PRG004_BE20 (RTS)

	; Apply velocity carry
	LDA ChainChomp_ChainY2,X
	ADD <Temp_Var1
	STA ChainChomp_ChainY2,X

	LDA ChainChomp_ChainY3,X
	SUB ChainChomp_YDelta,Y	; Add Y Delta for direction
	CMP ChainChomp_ChainY2,X
	BLT PRG004_BE20	 	; If chain is beyond Chain Chomp, jump to PRG004_BE20 (RTS)

	; Apply velocity carry
	LDA ChainChomp_ChainY3,X
	ADD <Temp_Var1
	STA ChainChomp_ChainY3,X

	LDA ChainChomp_ChainY4,X
	SUB ChainChomp_YDelta,Y	; Add Y Delta for direction
	CMP ChainChomp_ChainY3,X
	BLT PRG004_BE20	 	; If chain is beyond Chain Chomp, jump to PRG004_BE20 (RTS)

	; Apply velocity carry
	LDA ChainChomp_ChainY4,X
	ADD <Temp_Var1
	STA ChainChomp_ChainY4,X

PRG004_BE20:
	RTS		 ; Return


Object_FlipByXVel:
	LDA Objects_Orientation,X	 
	AND #~SPR_HFLIP	; Clear horizontal flip

	LDY <Objects_XVelZ,X
	BEQ PRG004_BE31	 ; If not moving horizontally, jump to PRG004_BE31
	BMI PRG004_BE2E	 ; If moving to the left, jump to PRG004_BE2E

	; Moving to the right
	ORA #SPR_HFLIP	; Set horizontal flip

PRG004_BE2E:
	; Moving to the left/right
	STA Objects_Orientation,X	 ; Set flip bits

PRG004_BE31:
	RTS		 ; Return


	; Check if a chain link sprite is visible or not
	; Carry set if not visible, cleared if it is visible
ChainChomp_LinkVisibleTest:

	LDA Objects_SpritesVerticallyOffScreen,X
	BNE PRG004_BE52	 ; If any sprite is vertically off-screen, jump to PRG004_BE52

	LDA <Objects_SpriteY,X	
	CMP #200
	BGE PRG004_BE52	 ; If Sprite Y >= 200, jump to PRG004_BE52

	LDY #$40	 ; Y = $40

	LDA <Objects_SpriteX,X
	BMI PRG004_BE45	 ; If on right half, jump to PRG004_BE45

	LDY #$c0	 ; Y = $C0

PRG004_BE45:
	CPY <Temp_Var2
	EOR Objects_SpritesHorizontallyOffScreen,X
	BMI PRG004_BE50
	BCC PRG004_BE52
	BCS PRG004_BE54

PRG004_BE50:
	BCC PRG004_BE54

PRG004_BE52:
	SEC		 ; Set carry (link not visible)

	RTS		 ; Return

PRG004_BE54:
	CLC		 ; Clear carry (link is visible)
	RTS		 ; Return

; Rest of ROM bank was empty

ChainChomp_DetectFree:
	LDA Objects_XZ, X
	PHA
	LDA Objects_XHiZ, X
	PHA
	LDA Objects_YZ, X
	PHA
	LDA Objects_YHiZ, X
	PHA

	LDA Objects_Data11, X
	STA Objects_XZ, X

	LDA Objects_Data12, X
	STA Objects_YZ, X

	LDA Objects_Data14, X
	STA Objects_YHiZ, X
	
	LDA Objects_Data13, X
	STA Objects_XHiZ, X

	LDY #(OTDO_Water - Object_TileDetectOffsets)
	JSR Object_DetectTile
	BNE ChainChomp_DetectFreeRTS
	JSR ChainChomp_BreakFree

ChainChomp_DetectFreeRTS:
	PLA
	STA Objects_YHiZ, X
	PLA
	STA Objects_YZ, X
	PLA
	STA Objects_XHiZ, X
	PLA
	STA Objects_XZ, X
	RTS

LakituMessage1:
	.byte "THANK YOU FOR FREEING ME. "

LakituMessage2:
	.byte "I WILL HELP YOU IN RETURN."

ObjInit_DeliveryLakitu:
	LDA #$9D
	STA Objects_Data8, X
	RTS

ObjNorm_DeliveryLakitu:
	LDA Objects_Data4, X
	JSR DynJump

	.word WaitForMario
	.word DisplayLakituText
	.word DeliveryLakituFlyAway
	.word DeliveryLakituTrack
	.word DeliveryLakituWait

WaitForMario:
	LDA <Counter_1
	LSR A
	LSR A
	LSR A
	AND #$01
	ORA #$02
	STA Objects_Frame, X
	JSR Object_ShakeAndDrawMirrored
	JSR Object_HitTest
	BCC WaitForMarioRTS
	JSR SpecialObject_FindEmptyAbort
	INC Objects_Data4, X
	LDA <Objects_XZ, X
	STA SpecialObj_X, Y
	LDA <Objects_YZ, X
	STA SpecialObj_Y, Y
	LDA <Objects_YHiZ,X
	STA SpecialObj_YHi,Y
	LDA #SOBJ_POOF
	STA SpecialObj_ID, Y
	LDA #$20	 
	STA SpecialObj_Data, Y
	STA Objects_Timer, X
	LDA #$00
	STA Objects_Frame, X

	LDA #$40
	STA Objects_SlowTimer, X

	LDA #$80
	STA StatusBar_Mode

	LDX #$8C
	STX Status_Bar_Top
	INX
	STX Status_Bar_Top + 1
	LDX #$9C
	STX Status_Bar_Bottom
	INX
	STX Status_Bar_Bottom + 1
	LDX #$00

NextLakituLetter:
	LDA LakituMessage1, X
	STA Status_Bar_Top + 2, X
	LDA LakituMessage2, X
	STA Status_Bar_Bottom + 2, X
	INX
	CPX #26
	BNE NextLakituLetter

WaitForMarioRTS:
	RTS

DisplayLakituText:
	LDA Objects_SlowTimer, X
	BNE DisplayLakituText1

	LDA Last_StatusBar_Mode
	STA StatusBar_Mode
	LDA #$80
	STA Last_StatusBar_Mode
	INC Objects_Data4, X
	LDY Objects_Property, X
	LDA Effective_Suit
	CMP PowerUpChecks, Y
	BEQ DisplayLakituText1
	LDA #$03
	STA Objects_Data4, X

DisplayLakituText1:
	JSR DrawLakitu
	LDA #$01
	STA Player_HaltTick
	RTS

DeliveryLakituFlyAway:
	LDA Objects_YHiZ, X
	BPL DeliveryLakituFlyAway1

	LDA #$04
	STA Objects_Data4, X
	LDA #$00
	STA <Objects_YVelZ, X
	RTS
	
DeliveryLakituFlyAway1:
	INC ReverseGravity
	JSR Object_Move
	JSR DrawLakitu
	RTS

PowerUpChecks:
	.byte $02, $0B, $05, $04

PowerUpDeliveries:
	.byte OBJ_POWERUP_FIREFLOWER, OBJ_POWERUP, OBJ_POWERUP_STARMAN, OBJ_POWERUP_STARMAN

PowerUpDeliveriesFlash:
	.byte 00, 00, 02, 01

DeliveryLakituWait:
	LDY Objects_Property, X
	LDA Effective_Suit
	CMP PowerUpChecks, Y
	BEQ DeliveryLakituWait1
	LDA #$03
	STA Objects_Data4, X
	LDA <Player_X
	STA <Objects_XZ, X
	LDA <Player_XHi
	ADD #$01
	STA <Objects_XHiZ, X
	LDA <Player_Y
	STA <Objects_YZ, X
	LDA <Player_YHi
	STA <Objects_YHiZ, X

DeliveryLakituWait1:
	RTS

DeliveryLakituTrack:
	LDY Objects_Property, X
	LDA <Player_HaltGameZ
	BNE DeliveryLakituTrack1
	LDA Effective_Suit
	CMP PowerUpChecks, Y
	BEQ DeliveryLakituEscape

	LDA Objects_State + 5
	BNE DeliveryLakituEscape

	JSR Chase
	JSR Object_HitTest
	BCC DeliveryLakituTrack1
	
	LDA Objects_State + 5
	BNE DeliveryLakituTrack1

	LDA #$01
	STA PowerUp_Reserve
	
	LDA #OBJSTATE_INIT
	STA Objects_State + 5
	
	LDY Objects_Property, X
	LDA PowerUpDeliveries, Y
	STA Objects_ID + 5
	STA PowerUp_NoRaise

	LDA PowerUpDeliveriesFlash, Y
	STA PUp_StarManFlash

	LDA <Objects_XZ, X
	STA <Objects_XZ + 5
	LDA <Objects_XHiZ, X
	STA <Objects_XHiZ + 5
	LDA <Objects_YZ, X
	SUB #$10
	STA <Objects_YZ + 5
	LDA <Objects_YHiZ, X
	SBC #$00
	STA <Objects_YHiZ + 5
	
DeliveryLakituEscape:
	LDA #$02
	STA Objects_Data4, X

DeliveryLakituTrack1:
	JSR DrawLakitu
	RTS

BlueShellExplosionTimers:
	.byte $40, $80, $C0, $FF

ObjInit_BlueShell:
	LDA Objects_Property, X
	TAY
	LDA BlueShellExplosionTimers, Y
	STA Objects_SlowTimer, X
	RTS

ObjNorm_BlueShell:
	LDA <Player_HaltGameZ
	BNE DrawBlueShell

	JSR Object_HandleBumpUnderneath
	JSR Object_InteractWithPlayer
	INC Objects_Data4, X

	LDA Objects_SlowTimer, X
	BEQ ObjNorm_BlueShell0

ObjNorm_BlueShell_1:
	LDA Level_VertScroll
	ADD #$10
	STA ChaseTargetY
	LDA #$00
	ADC #$00
	STA ChaseTargetYHi
	JSR ChaseTargeted
	JSR Object_ApplyXVel
	JMP DrawBlueShell

ObjNorm_BlueShell0:
	LDA Objects_Data5, X
	BNE ObjNorm_BlueShellDive1

	JSR Object_XDistanceFromPlayer
	CMP #$01
	BNE ObjNorm_BlueShell_1

	CPY #$00
	BNE ObjNorm_BlueShell01

	LDY <Player_XVel
	BPL ObjNorm_BlueShell_1
	BMI ObjNorm_BlueShellDive

ObjNorm_BlueShell01:
	LDY <Player_XVel
	BMI ObjNorm_BlueShell_1 

ObjNorm_BlueShellDive:
	INC Objects_Data5, X

ObjNorm_BlueShellDive1:

	LDA Objects_YVelZ, X
	AND #$F0
	CMP #$70
	BEQ ObjNorm_BlueShell1
	LDA Objects_YVelZ, X
	ADD #$04
	STA Objects_YVelZ, X
	

ObjNorm_BlueShell1:
	LDA #$01
	STA Objects_Frame, X
	JSR Object_ApplyYVel_NoGravity
	JSR Object_DetectTiles
	LDA  <Objects_TilesDetectZ, X
	BEQ DrawBlueShell
	BNE BlueShell_Expload

DrawBlueShell:
	LDA Objects_Frame, X
	CMP #$01
	BNE DrawBlueShell0_1
	JMP Object_ShakeAndDraw

DrawBlueShell0_1:
	JSR Object_ShakeAndDrawMirrored
	
DrawBlueShell0_2:
	LDA Objects_Data5, X
	BNE ObjNorm_BlueShellDraw2

	LDA Objects_SlowTimer, X
	CMP #$10
	BCS DrawBlueShell0

	LDA Objects_Data4, X
	AND #$02
	BEQ ObjNorm_BlueShellDraw2

DrawBlueShell0:
	LDY Object_SpriteRAM_Offset, X
	LDA Sprite_RAM+$00,Y
	CMP #$f8
	BEQ ObjNorm_BlueShellDraw1	 ; If sprite was found to be vertically off-screen, jump to PRG004_B55D

	; The wing sprite is Y-8 from the body
	SUB #$08
	STA Sprite_RAM+08,Y

	; Temp_Var1 = $CD (pattern for wing up)
	LDA #$CD
	STA <Temp_Var1

	
	LDA Objects_Data4, X
	AND #$04
	BEQ ObjNorm_BlueShellDraw0	 ; 4 ticks on, 4 ticks off; jump to PRG004_B548

	; Temp_Var1 = $CF (pattern for wing down)
	LDA #$CF
	STA <Temp_Var1 

ObjNorm_BlueShellDraw0:

	; Set correct wing pattern
	LDA <Temp_Var1
	STA Sprite_RAM+9,Y

	; Copy Sprite X
	LDA #$0C
	STA <Temp_Var1

	LDA Objects_Orientation, X
	BEQ  ObjNorm_BlueShellDraw1

	LDA #$FC
	STA <Temp_Var1

ObjNorm_BlueShellDraw1:
	LDA Sprite_RAM+03,Y
	ADD <Temp_Var1
	STA Sprite_RAM+11,Y

	LDA #SPR_PAL1
	ORA Objects_Orientation, X
	STA Sprite_RAM+10,Y	 ; Set wing attribute

ObjNorm_BlueShellDraw2:
	RTS

BlueShell_Expload:
	LDY Objects_SpawnIdx,X
	LDA Level_ObjectsSpawned,Y
	AND #$7f
	STA Level_ObjectsSpawned,Y
	LDA Objects_XZ, X
	SUB #$10
	STA Objects_XZ, X
	LDA Objects_XHiZ, X
	SBC #$00
	STA Objects_XHiZ, X
	STX TempX
	;JSR KoopaExpload
	JSR Object_FindEmpty
	LDY TempX
	LDA Objects_XZ, Y
	ADD #$20
	STA Objects_XZ, X
	LDA Objects_XHiZ, Y
	ADC #$00
	STA Objects_XHiZ, X
	LDA #OBJSTATE_NORMAL
	STA Objects_State, X
	LDA Objects_YZ, Y
	STA Objects_YZ, X
	LDA Objects_YHiZ, Y
	STA Objects_YHiZ, X
	;JMP KoopaExpload
	
ThwompDetectLeftBlock:
	LDY #(SuperGiantOffsets1 - Object_TileDetectOffsets)
	LDA Objects_YVelZ, X
	BPL ThwompDetectLeftBlock0

	INY
	INY
	INY
	INY

ThwompDetectLeftBlock0:
	JSR Object_DetectTile
	CMP #TILE_ITEM_BRICK
	BEQ ThwompDetectLeftBlock1

	CMP #TILE_PROP_SOLID_TOP
	BCC ThwompDetectRightBlock
	LDA #$00
	STA Objects_Data6, X
	RTS

ThwompDetectLeftBlock1:
	JSR ThwompBreakBlock
	JMP ThwompBreakBlockRTS

ThwompDetectRightBlock:
	LDY #((SuperGiantOffsets1  - Object_TileDetectOffsets) + 2)
	LDA Objects_YVelZ, X
	BPL ThwompDetectRightBlock0
	INY
	INY
	INY
	INY

ThwompDetectRightBlock0:
	JSR Object_DetectTile
	CMP #TILE_ITEM_BRICK
	BEQ ThwompBreakBlock

	CMP #TILE_PROP_SOLID_TOP
	BCC ThwompBreakBlockRTS
	LDA #$00
	STA Objects_Data6, X
	RTS

ThwompBreakBlock:
	DEC Objects_Data6, X
	BEQ ThwompBreakBlockRTS

	LDA #$00
	STA <Objects_YVelZ, X
	LDA #$81
	STA Block_UpdateValue
	INC Block_NeedsUpdate
	LDA Tile_DetectionY
	AND #$F0
	STA Block_ChangeY
	LDA Tile_DetectionYHi
	STA Block_ChangeYHi
	
	LDA Tile_DetectionX
	AND #$F0
	STA Block_ChangeX
	LDA Tile_DetectionXHi
	STA Block_ChangeXHi

	LDA Objects_SpritesHorizontallyOffScreen, X
	AND #$C0
	BNE ThwompBreakBlockRTS

	LDA Objects_SpritesVerticallyOffScreen, X
	AND #$03
	BNE ThwompBreakBlockRTS
	JSR ThwompBustBrick
	 
ThwompBreakBlockRTS:
	RTS

ThwompBustBrick:
	LDA #SND_LEVELCRUMBLE
	STA Sound_QLevel2

	JSR BrickBust_MoveOver	 ; Copy the bust values over (mainly because Bowser uses both)

	; Set the brick bust
	LDA #$02
	STA BrickBust_En

	; Brick bust upper Y
	LDA Block_ChangeY
	CLC
	SBC Level_VertScroll
	STA Brick_DebrisYHi

	; Brick bust lower Y
	ADD #$08
	STA Brick_DebrisY

	; Brick bust X
	LDA Block_ChangeX
	SUB <Horz_Scroll	
	STA Brick_DebrisX

	; reset brick bust X distance, no horizontal
	LDA #$00
	STA Brick_DebrisXDist
	STA BrickBust_HEn

	; Brick bust Y velocity
	LDA #-$06
	STA BrickBust_YVel
	RTS
